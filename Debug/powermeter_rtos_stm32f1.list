
powermeter_rtos_stm32f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b50  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  08009c60  08009c60  00019c60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a194  0800a194  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a194  0800a194  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a194  0800a194  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a194  0800a194  0001a194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a198  0800a198  0001a198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a19c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001210  200001e8  0800a384  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013f8  0800a384  000213f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c95  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a20  00000000  00000000  00038ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  0003c8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001600  00000000  00000000  0003e018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b608  00000000  00000000  0003f618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001988d  00000000  00000000  0005ac20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c131  00000000  00000000  000744ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001105de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074f4  00000000  00000000  00110630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009c48 	.word	0x08009c48

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08009c48 	.word	0x08009c48

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	; 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_f2uiz>:
 8000e0c:	0042      	lsls	r2, r0, #1
 8000e0e:	d20e      	bcs.n	8000e2e <__aeabi_f2uiz+0x22>
 8000e10:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e14:	d30b      	bcc.n	8000e2e <__aeabi_f2uiz+0x22>
 8000e16:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e1a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e1e:	d409      	bmi.n	8000e34 <__aeabi_f2uiz+0x28>
 8000e20:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e28:	fa23 f002 	lsr.w	r0, r3, r2
 8000e2c:	4770      	bx	lr
 8000e2e:	f04f 0000 	mov.w	r0, #0
 8000e32:	4770      	bx	lr
 8000e34:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e38:	d101      	bne.n	8000e3e <__aeabi_f2uiz+0x32>
 8000e3a:	0242      	lsls	r2, r0, #9
 8000e3c:	d102      	bne.n	8000e44 <__aeabi_f2uiz+0x38>
 8000e3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e42:	4770      	bx	lr
 8000e44:	f04f 0000 	mov.w	r0, #0
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <vApplicationGetIdleTaskMemory+0x28>)
 8000e5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2280      	movs	r2, #128	; 0x80
 8000e68:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e6a:	bf00      	nop
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	20000204 	.word	0x20000204
 8000e78:	200002b8 	.word	0x200002b8

08000e7c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8000e84:	1d39      	adds	r1, r7, #4
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4803      	ldr	r0, [pc, #12]	; (8000e9c <__io_putchar+0x20>)
 8000e8e:	f003 fb6a 	bl	8004566 <HAL_UART_Transmit>
	return ch;
 8000e92:	687b      	ldr	r3, [r7, #4]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	200005c4 	.word	0x200005c4

08000ea0 <NEXTION_SendString>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void NEXTION_SendString(char *ID, char *string) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b090      	sub	sp, #64	; 0x40
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%s\"", ID, string);
 8000eaa:	f107 0008 	add.w	r0, r7, #8
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	490b      	ldr	r1, [pc, #44]	; (8000ee0 <NEXTION_SendString+0x40>)
 8000eb4:	f006 fdfa 	bl	8007aac <siprintf>
 8000eb8:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, len, 1000);
 8000eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	f107 0108 	add.w	r1, r7, #8
 8000ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec6:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <NEXTION_SendString+0x44>)
 8000ec8:	f003 fb4d 	bl	8004566 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8000ecc:	2364      	movs	r3, #100	; 0x64
 8000ece:	2203      	movs	r2, #3
 8000ed0:	4905      	ldr	r1, [pc, #20]	; (8000ee8 <NEXTION_SendString+0x48>)
 8000ed2:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <NEXTION_SendString+0x44>)
 8000ed4:	f003 fb47 	bl	8004566 <HAL_UART_Transmit>
}
 8000ed8:	bf00      	nop
 8000eda:	3740      	adds	r7, #64	; 0x40
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	08009c8c 	.word	0x08009c8c
 8000ee4:	20000580 	.word	0x20000580
 8000ee8:	20000000 	.word	0x20000000

08000eec <NEXTION_SendValue>:
void NEXTION_SendValue(char *ID, int value) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b090      	sub	sp, #64	; 0x40
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf(buf, "%s.val=%d", ID, value);
 8000ef6:	f107 0008 	add.w	r0, r7, #8
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	490b      	ldr	r1, [pc, #44]	; (8000f2c <NEXTION_SendValue+0x40>)
 8000f00:	f006 fdd4 	bl	8007aac <siprintf>
 8000f04:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, len, 1000);
 8000f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	f107 0108 	add.w	r1, r7, #8
 8000f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f12:	4807      	ldr	r0, [pc, #28]	; (8000f30 <NEXTION_SendValue+0x44>)
 8000f14:	f003 fb27 	bl	8004566 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8000f18:	2364      	movs	r3, #100	; 0x64
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	4905      	ldr	r1, [pc, #20]	; (8000f34 <NEXTION_SendValue+0x48>)
 8000f1e:	4804      	ldr	r0, [pc, #16]	; (8000f30 <NEXTION_SendValue+0x44>)
 8000f20:	f003 fb21 	bl	8004566 <HAL_UART_Transmit>
}
 8000f24:	bf00      	nop
 8000f26:	3740      	adds	r7, #64	; 0x40
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	08009c98 	.word	0x08009c98
 8000f30:	20000580 	.word	0x20000580
 8000f34:	20000000 	.word	0x20000000

08000f38 <NEXTION_SendGraphicValue>:
void NEXTION_SendGraphicValue(int id, int ch, int val) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b094      	sub	sp, #80	; 0x50
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
	char buf[50];
	int len = sprintf(buf, "add %d,%d,%d", id, ch, val);
 8000f44:	f107 0010 	add.w	r0, r7, #16
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	490b      	ldr	r1, [pc, #44]	; (8000f80 <NEXTION_SendGraphicValue+0x48>)
 8000f52:	f006 fdab 	bl	8007aac <siprintf>
 8000f56:	6478      	str	r0, [r7, #68]	; 0x44
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, len, 1000);
 8000f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	f107 0110 	add.w	r1, r7, #16
 8000f60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f64:	4807      	ldr	r0, [pc, #28]	; (8000f84 <NEXTION_SendGraphicValue+0x4c>)
 8000f66:	f003 fafe 	bl	8004566 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8000f6a:	2364      	movs	r3, #100	; 0x64
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	4906      	ldr	r1, [pc, #24]	; (8000f88 <NEXTION_SendGraphicValue+0x50>)
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <NEXTION_SendGraphicValue+0x4c>)
 8000f72:	f003 faf8 	bl	8004566 <HAL_UART_Transmit>
}
 8000f76:	bf00      	nop
 8000f78:	3748      	adds	r7, #72	; 0x48
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	08009ca4 	.word	0x08009ca4
 8000f84:	20000580 	.word	0x20000580
 8000f88:	20000000 	.word	0x20000000

08000f8c <map_range>:

int map_range(int OldValue, int OldMax, int OldMin, int NewMax, int NewMin) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	603b      	str	r3, [r7, #0]

	return (((OldValue - OldMin) * (NewMax - NewMin)) / (OldMax - OldMin))
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	6839      	ldr	r1, [r7, #0]
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	1a8a      	subs	r2, r1, r2
 8000fa6:	fb03 f202 	mul.w	r2, r3, r2
 8000faa:	68b9      	ldr	r1, [r7, #8]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	1acb      	subs	r3, r1, r3
 8000fb0:	fb92 f2f3 	sdiv	r2, r2, r3
			+ NewMin;
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	4413      	add	r3, r2
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
	...

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b5b0      	push	{r4, r5, r7, lr}
 8000fc6:	b096      	sub	sp, #88	; 0x58
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fca:	f000 ff5d 	bl	8001e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fce:	f000 f87b 	bl	80010c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd2:	f000 f9df 	bl	8001394 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fd6:	f000 f9bf 	bl	8001358 <MX_DMA_Init>
  MX_ADC1_Init();
 8000fda:	f000 f8d1 	bl	8001180 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000fde:	f000 f939 	bl	8001254 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000fe2:	f000 f965 	bl	80012b0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000fe6:	f000 f98d 	bl	8001304 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, value, 4);
 8000fea:	2204      	movs	r2, #4
 8000fec:	492a      	ldr	r1, [pc, #168]	; (8001098 <main+0xd4>)
 8000fee:	482b      	ldr	r0, [pc, #172]	; (800109c <main+0xd8>)
 8000ff0:	f001 f854 	bl	800209c <HAL_ADC_Start_DMA>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
	/* add semaphores, ... */
	fac_amp_mutex = xSemaphoreCreateMutex();
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f004 f9ae 	bl	8005356 <xQueueCreateMutex>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a28      	ldr	r2, [pc, #160]	; (80010a0 <main+0xdc>)
 8000ffe:	6013      	str	r3, [r2, #0]
	fac_volt_mutex = xSemaphoreCreateMutex();
 8001000:	2001      	movs	r0, #1
 8001002:	f004 f9a8 	bl	8005356 <xQueueCreateMutex>
 8001006:	4603      	mov	r3, r0
 8001008:	4a26      	ldr	r2, [pc, #152]	; (80010a4 <main+0xe0>)
 800100a:	6013      	str	r3, [r2, #0]
	fdc_amp_mutex = xSemaphoreCreateMutex();
 800100c:	2001      	movs	r0, #1
 800100e:	f004 f9a2 	bl	8005356 <xQueueCreateMutex>
 8001012:	4603      	mov	r3, r0
 8001014:	4a24      	ldr	r2, [pc, #144]	; (80010a8 <main+0xe4>)
 8001016:	6013      	str	r3, [r2, #0]
	fdc_volt_mutex = xSemaphoreCreateMutex();
 8001018:	2001      	movs	r0, #1
 800101a:	f004 f99c 	bl	8005356 <xQueueCreateMutex>
 800101e:	4603      	mov	r3, r0
 8001020:	4a22      	ldr	r2, [pc, #136]	; (80010ac <main+0xe8>)
 8001022:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task_ADC */
  osThreadDef(task_ADC, StartADC, osPriorityNormal, 0, 128);
 8001024:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <main+0xec>)
 8001026:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800102a:	461d      	mov	r5, r3
 800102c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001030:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001034:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_ADCHandle = osThreadCreate(osThread(task_ADC), NULL);
 8001038:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f003 ff9a 	bl	8004f78 <osThreadCreate>
 8001044:	4603      	mov	r3, r0
 8001046:	4a1b      	ldr	r2, [pc, #108]	; (80010b4 <main+0xf0>)
 8001048:	6013      	str	r3, [r2, #0]

  /* definition and creation of task_nextion */
  osThreadDef(task_nextion, StartNextion, osPriorityBelowNormal, 0, 128);
 800104a:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <main+0xf4>)
 800104c:	f107 0420 	add.w	r4, r7, #32
 8001050:	461d      	mov	r5, r3
 8001052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001056:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800105a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_nextionHandle = osThreadCreate(osThread(task_nextion), NULL);
 800105e:	f107 0320 	add.w	r3, r7, #32
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f003 ff87 	bl	8004f78 <osThreadCreate>
 800106a:	4603      	mov	r3, r0
 800106c:	4a13      	ldr	r2, [pc, #76]	; (80010bc <main+0xf8>)
 800106e:	6013      	str	r3, [r2, #0]

  /* definition and creation of task_bluetooth */
  osThreadDef(task_bluetooth, StartBluetooth, osPriorityLow, 0, 128);
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <main+0xfc>)
 8001072:	1d3c      	adds	r4, r7, #4
 8001074:	461d      	mov	r5, r3
 8001076:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001078:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800107a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800107e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_bluetoothHandle = osThreadCreate(osThread(task_bluetooth), NULL);
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f003 ff76 	bl	8004f78 <osThreadCreate>
 800108c:	4603      	mov	r3, r0
 800108e:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <main+0x100>)
 8001090:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001092:	f003 ff6a 	bl	8004f6a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001096:	e7fe      	b.n	8001096 <main+0xd2>
 8001098:	20000614 	.word	0x20000614
 800109c:	200004b8 	.word	0x200004b8
 80010a0:	2000063c 	.word	0x2000063c
 80010a4:	20000640 	.word	0x20000640
 80010a8:	20000644 	.word	0x20000644
 80010ac:	20000648 	.word	0x20000648
 80010b0:	08009cb4 	.word	0x08009cb4
 80010b4:	20000608 	.word	0x20000608
 80010b8:	08009cd0 	.word	0x08009cd0
 80010bc:	2000060c 	.word	0x2000060c
 80010c0:	08009cec 	.word	0x08009cec
 80010c4:	20000610 	.word	0x20000610

080010c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b094      	sub	sp, #80	; 0x50
 80010cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010d2:	2228      	movs	r2, #40	; 0x28
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f005 fee3 	bl	8006ea2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f8:	2301      	movs	r3, #1
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001106:	2301      	movs	r3, #1
 8001108:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110a:	2302      	movs	r3, #2
 800110c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800110e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001112:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 8001114:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8001118:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800111e:	4618      	mov	r0, r3
 8001120:	f002 f9ca 	bl	80034b8 <HAL_RCC_OscConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800112a:	f000 fb7f 	bl	800182c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112e:	230f      	movs	r3, #15
 8001130:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001132:	2302      	movs	r3, #2
 8001134:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800113a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800113e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2102      	movs	r1, #2
 800114a:	4618      	mov	r0, r3
 800114c:	f002 fc36 	bl	80039bc <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001156:	f000 fb69 	bl	800182c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800115a:	2302      	movs	r3, #2
 800115c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800115e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001162:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	4618      	mov	r0, r3
 8001168:	f002 fdf0 	bl	8003d4c <HAL_RCCEx_PeriphCLKConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001172:	f000 fb5b 	bl	800182c <Error_Handler>
  }
}
 8001176:	bf00      	nop
 8001178:	3750      	adds	r7, #80	; 0x50
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001190:	4b2e      	ldr	r3, [pc, #184]	; (800124c <MX_ADC1_Init+0xcc>)
 8001192:	4a2f      	ldr	r2, [pc, #188]	; (8001250 <MX_ADC1_Init+0xd0>)
 8001194:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001196:	4b2d      	ldr	r3, [pc, #180]	; (800124c <MX_ADC1_Init+0xcc>)
 8001198:	f44f 7280 	mov.w	r2, #256	; 0x100
 800119c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800119e:	4b2b      	ldr	r3, [pc, #172]	; (800124c <MX_ADC1_Init+0xcc>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011a4:	4b29      	ldr	r3, [pc, #164]	; (800124c <MX_ADC1_Init+0xcc>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011aa:	4b28      	ldr	r3, [pc, #160]	; (800124c <MX_ADC1_Init+0xcc>)
 80011ac:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b2:	4b26      	ldr	r3, [pc, #152]	; (800124c <MX_ADC1_Init+0xcc>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80011b8:	4b24      	ldr	r3, [pc, #144]	; (800124c <MX_ADC1_Init+0xcc>)
 80011ba:	2204      	movs	r2, #4
 80011bc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011be:	4823      	ldr	r0, [pc, #140]	; (800124c <MX_ADC1_Init+0xcc>)
 80011c0:	f000 fe94 	bl	8001eec <HAL_ADC_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80011ca:	f000 fb2f 	bl	800182c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011ce:	2301      	movs	r3, #1
 80011d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d2:	2301      	movs	r3, #1
 80011d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80011d6:	2303      	movs	r3, #3
 80011d8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	4619      	mov	r1, r3
 80011de:	481b      	ldr	r0, [pc, #108]	; (800124c <MX_ADC1_Init+0xcc>)
 80011e0:	f001 f84c 	bl	800227c <HAL_ADC_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011ea:	f000 fb1f 	bl	800182c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011ee:	2302      	movs	r3, #2
 80011f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011f2:	2302      	movs	r3, #2
 80011f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	4619      	mov	r1, r3
 80011fa:	4814      	ldr	r0, [pc, #80]	; (800124c <MX_ADC1_Init+0xcc>)
 80011fc:	f001 f83e 	bl	800227c <HAL_ADC_ConfigChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001206:	f000 fb11 	bl	800182c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800120a:	2303      	movs	r3, #3
 800120c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800120e:	2303      	movs	r3, #3
 8001210:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	4619      	mov	r1, r3
 8001216:	480d      	ldr	r0, [pc, #52]	; (800124c <MX_ADC1_Init+0xcc>)
 8001218:	f001 f830 	bl	800227c <HAL_ADC_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001222:	f000 fb03 	bl	800182c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001226:	2308      	movs	r3, #8
 8001228:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800122a:	2304      	movs	r3, #4
 800122c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	4619      	mov	r1, r3
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <MX_ADC1_Init+0xcc>)
 8001234:	f001 f822 	bl	800227c <HAL_ADC_ConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800123e:	f000 faf5 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	200004b8 	.word	0x200004b8
 8001250:	40012400 	.word	0x40012400

08001254 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_I2C1_Init+0x50>)
 800125a:	4a13      	ldr	r2, [pc, #76]	; (80012a8 <MX_I2C1_Init+0x54>)
 800125c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001260:	4a12      	ldr	r2, [pc, #72]	; (80012ac <MX_I2C1_Init+0x58>)
 8001262:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_I2C1_Init+0x50>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001272:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001276:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <MX_I2C1_Init+0x50>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_I2C1_Init+0x50>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001290:	4804      	ldr	r0, [pc, #16]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001292:	f001 ffcd 	bl	8003230 <HAL_I2C_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800129c:	f000 fac6 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	2000052c 	.word	0x2000052c
 80012a8:	40005400 	.word	0x40005400
 80012ac:	00061a80 	.word	0x00061a80

080012b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_USART1_UART_Init+0x4c>)
 80012b6:	4a12      	ldr	r2, [pc, #72]	; (8001300 <MX_USART1_UART_Init+0x50>)
 80012b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <MX_USART1_UART_Init+0x4c>)
 80012bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_USART1_UART_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_USART1_UART_Init+0x4c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <MX_USART1_UART_Init+0x4c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_USART1_UART_Init+0x4c>)
 80012d6:	220c      	movs	r2, #12
 80012d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <MX_USART1_UART_Init+0x4c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_USART1_UART_Init+0x4c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_USART1_UART_Init+0x4c>)
 80012e8:	f003 f8f0 	bl	80044cc <HAL_UART_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012f2:	f000 fa9b 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000580 	.word	0x20000580
 8001300:	40013800 	.word	0x40013800

08001304 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_USART3_UART_Init+0x4c>)
 800130a:	4a12      	ldr	r2, [pc, #72]	; (8001354 <MX_USART3_UART_Init+0x50>)
 800130c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <MX_USART3_UART_Init+0x4c>)
 8001310:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001314:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_USART3_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_USART3_UART_Init+0x4c>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <MX_USART3_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_USART3_UART_Init+0x4c>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <MX_USART3_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_USART3_UART_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_USART3_UART_Init+0x4c>)
 800133c:	f003 f8c6 	bl	80044cc <HAL_UART_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001346:	f000 fa71 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200005c4 	.word	0x200005c4
 8001354:	40004800 	.word	0x40004800

08001358 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_DMA_Init+0x38>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	4a0b      	ldr	r2, [pc, #44]	; (8001390 <MX_DMA_Init+0x38>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6153      	str	r3, [r2, #20]
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_DMA_Init+0x38>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2105      	movs	r1, #5
 800137a:	200b      	movs	r0, #11
 800137c:	f001 fad9 	bl	8002932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001380:	200b      	movs	r0, #11
 8001382:	f001 faf2 	bl	800296a <HAL_NVIC_EnableIRQ>

}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000

08001394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a8:	4b24      	ldr	r3, [pc, #144]	; (800143c <MX_GPIO_Init+0xa8>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a23      	ldr	r2, [pc, #140]	; (800143c <MX_GPIO_Init+0xa8>)
 80013ae:	f043 0310 	orr.w	r3, r3, #16
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b21      	ldr	r3, [pc, #132]	; (800143c <MX_GPIO_Init+0xa8>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0310 	and.w	r3, r3, #16
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c0:	4b1e      	ldr	r3, [pc, #120]	; (800143c <MX_GPIO_Init+0xa8>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a1d      	ldr	r2, [pc, #116]	; (800143c <MX_GPIO_Init+0xa8>)
 80013c6:	f043 0320 	orr.w	r3, r3, #32
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <MX_GPIO_Init+0xa8>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f003 0320 	and.w	r3, r3, #32
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d8:	4b18      	ldr	r3, [pc, #96]	; (800143c <MX_GPIO_Init+0xa8>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a17      	ldr	r2, [pc, #92]	; (800143c <MX_GPIO_Init+0xa8>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b15      	ldr	r3, [pc, #84]	; (800143c <MX_GPIO_Init+0xa8>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <MX_GPIO_Init+0xa8>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	4a11      	ldr	r2, [pc, #68]	; (800143c <MX_GPIO_Init+0xa8>)
 80013f6:	f043 0308 	orr.w	r3, r3, #8
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_GPIO_Init+0xa8>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0308 	and.w	r3, r3, #8
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800140e:	480c      	ldr	r0, [pc, #48]	; (8001440 <MX_GPIO_Init+0xac>)
 8001410:	f001 fedc 	bl	80031cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2302      	movs	r3, #2
 8001424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	4619      	mov	r1, r3
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <MX_GPIO_Init+0xac>)
 800142e:	f001 fd49 	bl	8002ec4 <HAL_GPIO_Init>

}
 8001432:	bf00      	nop
 8001434:	3720      	adds	r7, #32
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000
 8001440:	40011000 	.word	0x40011000

08001444 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc){
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	//printf("value[0]: %ld \n",value[0]);
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
	...

08001458 <HAL_UART_RxCpltCallback>:
		HAL_I2C_Mem_Write(&i2c_hdl, address, 0x0E, 1,
				(uint8_t*) (control | (0x20)), 1, 100); // write modified control register with CONV bit as'1'
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

	printf("\r\nLlego: %c %c \r\n", rx_buff[0],rx_buff[1]);
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <HAL_UART_RxCpltCallback+0x74>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <HAL_UART_RxCpltCallback+0x74>)
 8001468:	785b      	ldrb	r3, [r3, #1]
 800146a:	461a      	mov	r2, r3
 800146c:	4818      	ldr	r0, [pc, #96]	; (80014d0 <HAL_UART_RxCpltCallback+0x78>)
 800146e:	f006 fa15 	bl	800789c <iprintf>
	if (rx_buff[0] == '$' && rx_buff[1] == '1') {
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <HAL_UART_RxCpltCallback+0x74>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b24      	cmp	r3, #36	; 0x24
 8001478:	d106      	bne.n	8001488 <HAL_UART_RxCpltCallback+0x30>
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <HAL_UART_RxCpltCallback+0x74>)
 800147c:	785b      	ldrb	r3, [r3, #1]
 800147e:	2b31      	cmp	r3, #49	; 0x31
 8001480:	d102      	bne.n	8001488 <HAL_UART_RxCpltCallback+0x30>
		delay_sec = 100;
 8001482:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <HAL_UART_RxCpltCallback+0x7c>)
 8001484:	2264      	movs	r2, #100	; 0x64
 8001486:	801a      	strh	r2, [r3, #0]

	}

	if (rx_buff[0] == '$' && rx_buff[2] == '1') {
 8001488:	4b10      	ldr	r3, [pc, #64]	; (80014cc <HAL_UART_RxCpltCallback+0x74>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b24      	cmp	r3, #36	; 0x24
 800148e:	d107      	bne.n	80014a0 <HAL_UART_RxCpltCallback+0x48>
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_UART_RxCpltCallback+0x74>)
 8001492:	789b      	ldrb	r3, [r3, #2]
 8001494:	2b31      	cmp	r3, #49	; 0x31
 8001496:	d103      	bne.n	80014a0 <HAL_UART_RxCpltCallback+0x48>

		delay_sec = 1000;
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <HAL_UART_RxCpltCallback+0x7c>)
 800149a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800149e:	801a      	strh	r2, [r3, #0]

	}

	if (rx_buff[0] == '$' && rx_buff[3] == '1') {
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_UART_RxCpltCallback+0x74>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b24      	cmp	r3, #36	; 0x24
 80014a6:	d107      	bne.n	80014b8 <HAL_UART_RxCpltCallback+0x60>
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <HAL_UART_RxCpltCallback+0x74>)
 80014aa:	78db      	ldrb	r3, [r3, #3]
 80014ac:	2b31      	cmp	r3, #49	; 0x31
 80014ae:	d103      	bne.n	80014b8 <HAL_UART_RxCpltCallback+0x60>

		delay_sec = 10000;
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <HAL_UART_RxCpltCallback+0x7c>)
 80014b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80014b6:	801a      	strh	r2, [r3, #0]

	}
	//HAL_UART_Transmit(&huart1, (uint8_t*) rx_buff, sizeof(rx_buff), 1000);
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	HAL_UART_Receive_IT(&huart1, rx_buff, sizeof(rx_buff));
 80014b8:	2207      	movs	r2, #7
 80014ba:	4904      	ldr	r1, [pc, #16]	; (80014cc <HAL_UART_RxCpltCallback+0x74>)
 80014bc:	4806      	ldr	r0, [pc, #24]	; (80014d8 <HAL_UART_RxCpltCallback+0x80>)
 80014be:	f003 f8e4 	bl	800468a <HAL_UART_Receive_IT>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000624 	.word	0x20000624
 80014d0:	08009d08 	.word	0x08009d08
 80014d4:	20000004 	.word	0x20000004
 80014d8:	20000580 	.word	0x20000580

080014dc <StartADC>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartADC */
void StartADC(void const * argument)
{
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b089      	sub	sp, #36	; 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	float ac_amp_prev = 0;
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
	float ac_volt_prev = 0;
 80014ea:	f04f 0300 	mov.w	r3, #0
 80014ee:	61bb      	str	r3, [r7, #24]
	float dc_amp_prev = 0;
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
	float dc_volt_prev = 0;
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]

	float a = 0.1;
 80014fc:	4b48      	ldr	r3, [pc, #288]	; (8001620 <StartADC+0x144>)
 80014fe:	60fb      	str	r3, [r7, #12]

	HAL_ADCEx_Calibration_Start(&hadc1);
 8001500:	4848      	ldr	r0, [pc, #288]	; (8001624 <StartADC+0x148>)
 8001502:	f001 f8b5 	bl	8002670 <HAL_ADCEx_Calibration_Start>

	/* Infinite loop */
	for (;;) {

		//xSemaphoreTake(fac_amp_mutex, portMAX_DELAY);
		filter_AC_AMP = (1 - a) * ac_amp_prev + value[0] * a;
 8001506:	68f9      	ldr	r1, [r7, #12]
 8001508:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800150c:	f7ff fb74 	bl	8000bf8 <__aeabi_fsub>
 8001510:	4603      	mov	r3, r0
 8001512:	69f9      	ldr	r1, [r7, #28]
 8001514:	4618      	mov	r0, r3
 8001516:	f7fe fe23 	bl	8000160 <__aeabi_fmul>
 800151a:	4603      	mov	r3, r0
 800151c:	461c      	mov	r4, r3
 800151e:	4b42      	ldr	r3, [pc, #264]	; (8001628 <StartADC+0x14c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fc1a 	bl	8000d5c <__aeabi_ui2f>
 8001528:	4603      	mov	r3, r0
 800152a:	68f9      	ldr	r1, [r7, #12]
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe fe17 	bl	8000160 <__aeabi_fmul>
 8001532:	4603      	mov	r3, r0
 8001534:	4619      	mov	r1, r3
 8001536:	4620      	mov	r0, r4
 8001538:	f7ff fb60 	bl	8000bfc <__addsf3>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	4b3a      	ldr	r3, [pc, #232]	; (800162c <StartADC+0x150>)
 8001542:	601a      	str	r2, [r3, #0]
		ac_amp_prev = filter_AC_AMP;
 8001544:	4b39      	ldr	r3, [pc, #228]	; (800162c <StartADC+0x150>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	61fb      	str	r3, [r7, #28]

		//xSemaphoreGive(fac_amp_mutex);

		filter_AC_VOLT = (1 - a) * ac_volt_prev + value[1]* a;
 800154a:	68f9      	ldr	r1, [r7, #12]
 800154c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001550:	f7ff fb52 	bl	8000bf8 <__aeabi_fsub>
 8001554:	4603      	mov	r3, r0
 8001556:	69b9      	ldr	r1, [r7, #24]
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe fe01 	bl	8000160 <__aeabi_fmul>
 800155e:	4603      	mov	r3, r0
 8001560:	461c      	mov	r4, r3
 8001562:	4b31      	ldr	r3, [pc, #196]	; (8001628 <StartADC+0x14c>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fbf8 	bl	8000d5c <__aeabi_ui2f>
 800156c:	4603      	mov	r3, r0
 800156e:	68f9      	ldr	r1, [r7, #12]
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe fdf5 	bl	8000160 <__aeabi_fmul>
 8001576:	4603      	mov	r3, r0
 8001578:	4619      	mov	r1, r3
 800157a:	4620      	mov	r0, r4
 800157c:	f7ff fb3e 	bl	8000bfc <__addsf3>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <StartADC+0x154>)
 8001586:	601a      	str	r2, [r3, #0]
		ac_volt_prev = filter_AC_VOLT;
 8001588:	4b29      	ldr	r3, [pc, #164]	; (8001630 <StartADC+0x154>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	61bb      	str	r3, [r7, #24]


		filter_DC_AMP = (1 - a) * dc_amp_prev + value[2] * a;
 800158e:	68f9      	ldr	r1, [r7, #12]
 8001590:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001594:	f7ff fb30 	bl	8000bf8 <__aeabi_fsub>
 8001598:	4603      	mov	r3, r0
 800159a:	6979      	ldr	r1, [r7, #20]
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe fddf 	bl	8000160 <__aeabi_fmul>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461c      	mov	r4, r3
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <StartADC+0x14c>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fbd6 	bl	8000d5c <__aeabi_ui2f>
 80015b0:	4603      	mov	r3, r0
 80015b2:	68f9      	ldr	r1, [r7, #12]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe fdd3 	bl	8000160 <__aeabi_fmul>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4619      	mov	r1, r3
 80015be:	4620      	mov	r0, r4
 80015c0:	f7ff fb1c 	bl	8000bfc <__addsf3>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <StartADC+0x158>)
 80015ca:	601a      	str	r2, [r3, #0]
		dc_amp_prev = filter_DC_AMP ;
 80015cc:	4b19      	ldr	r3, [pc, #100]	; (8001634 <StartADC+0x158>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	617b      	str	r3, [r7, #20]


		filter_DC_VOLT = (1 - a) * dc_volt_prev + value[3]* a;
 80015d2:	68f9      	ldr	r1, [r7, #12]
 80015d4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80015d8:	f7ff fb0e 	bl	8000bf8 <__aeabi_fsub>
 80015dc:	4603      	mov	r3, r0
 80015de:	6939      	ldr	r1, [r7, #16]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe fdbd 	bl	8000160 <__aeabi_fmul>
 80015e6:	4603      	mov	r3, r0
 80015e8:	461c      	mov	r4, r3
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <StartADC+0x14c>)
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fbb4 	bl	8000d5c <__aeabi_ui2f>
 80015f4:	4603      	mov	r3, r0
 80015f6:	68f9      	ldr	r1, [r7, #12]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe fdb1 	bl	8000160 <__aeabi_fmul>
 80015fe:	4603      	mov	r3, r0
 8001600:	4619      	mov	r1, r3
 8001602:	4620      	mov	r0, r4
 8001604:	f7ff fafa 	bl	8000bfc <__addsf3>
 8001608:	4603      	mov	r3, r0
 800160a:	461a      	mov	r2, r3
 800160c:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <StartADC+0x15c>)
 800160e:	601a      	str	r2, [r3, #0]
		dc_volt_prev= filter_DC_VOLT;
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <StartADC+0x15c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	613b      	str	r3, [r7, #16]
		//printf("\r\tvale[0]: %ld \tvale[1]: %ld\tvale[2]: %ld\tvale[3]: %ld\r\n",value[0],value[1],value[2],value[3]);

		osDelay(1);
 8001616:	2001      	movs	r0, #1
 8001618:	f003 fcfa 	bl	8005010 <osDelay>
		filter_AC_AMP = (1 - a) * ac_amp_prev + value[0] * a;
 800161c:	e773      	b.n	8001506 <StartADC+0x2a>
 800161e:	bf00      	nop
 8001620:	3dcccccd 	.word	0x3dcccccd
 8001624:	200004b8 	.word	0x200004b8
 8001628:	20000614 	.word	0x20000614
 800162c:	2000062c 	.word	0x2000062c
 8001630:	20000630 	.word	0x20000630
 8001634:	20000634 	.word	0x20000634
 8001638:	20000638 	.word	0x20000638

0800163c <StartNextion>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartNextion */
void StartNextion(void const * argument)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af02      	add	r7, sp, #8
 8001642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartNextion */

	uint8_t mapped = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	73fb      	strb	r3, [r7, #15]
	uint8_t year = 23;
 8001648:	2317      	movs	r3, #23
 800164a:	73bb      	strb	r3, [r7, #14]
	uint8_t month = 1;
 800164c:	2301      	movs	r3, #1
 800164e:	737b      	strb	r3, [r7, #13]
	uint8_t dm = 30;
 8001650:	231e      	movs	r3, #30
 8001652:	733b      	strb	r3, [r7, #12]
	uint8_t dw = 1;
 8001654:	2301      	movs	r3, #1
 8001656:	72fb      	strb	r3, [r7, #11]
	uint8_t hour = 21;
 8001658:	2315      	movs	r3, #21
 800165a:	72bb      	strb	r3, [r7, #10]
	uint8_t min = 12;
 800165c:	230c      	movs	r3, #12
 800165e:	727b      	strb	r3, [r7, #9]
	uint8_t sec = 00;
 8001660:	2300      	movs	r3, #0
 8001662:	723b      	strb	r3, [r7, #8]

	//Set_Time(hi2c1, (uint16_t) DS3231 << 1, sec, min, hour, dw, dm, month,
			//year);
	printf("Nextion Thread Started\n");
 8001664:	4851      	ldr	r0, [pc, #324]	; (80017ac <StartNextion+0x170>)
 8001666:	f006 f99f 	bl	80079a8 <puts>
	osDelay(100);
 800166a:	2064      	movs	r0, #100	; 0x64
 800166c:	f003 fcd0 	bl	8005010 <osDelay>

	/* Infinite loop */
	for (;;) {

		//HAL_UART_Receive_IT(&huart1, rx_buff, sizeof(rx_buff));
		mapped = map_range((uint16_t)filter_AC_AMP, 4095, 0, 255, 0);
 8001670:	4b4f      	ldr	r3, [pc, #316]	; (80017b0 <StartNextion+0x174>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fbc9 	bl	8000e0c <__aeabi_f2uiz>
 800167a:	4603      	mov	r3, r0
 800167c:	b29b      	uxth	r3, r3
 800167e:	4618      	mov	r0, r3
 8001680:	2300      	movs	r3, #0
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	23ff      	movs	r3, #255	; 0xff
 8001686:	2200      	movs	r2, #0
 8001688:	f640 71ff 	movw	r1, #4095	; 0xfff
 800168c:	f7ff fc7e 	bl	8000f8c <map_range>
 8001690:	4603      	mov	r3, r0
 8001692:	73fb      	strb	r3, [r7, #15]
		NEXTION_SendValue("x0", mapped);
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	4619      	mov	r1, r3
 8001698:	4846      	ldr	r0, [pc, #280]	; (80017b4 <StartNextion+0x178>)
 800169a:	f7ff fc27 	bl	8000eec <NEXTION_SendValue>
		NEXTION_SendGraphicValue(7, 0, mapped);
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	461a      	mov	r2, r3
 80016a2:	2100      	movs	r1, #0
 80016a4:	2007      	movs	r0, #7
 80016a6:	f7ff fc47 	bl	8000f38 <NEXTION_SendGraphicValue>
		mapped = map_range((uint16_t)filter_AC_VOLT, 4095, 0, 255, 0);
 80016aa:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <StartNextion+0x17c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fbac 	bl	8000e0c <__aeabi_f2uiz>
 80016b4:	4603      	mov	r3, r0
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	4618      	mov	r0, r3
 80016ba:	2300      	movs	r3, #0
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	23ff      	movs	r3, #255	; 0xff
 80016c0:	2200      	movs	r2, #0
 80016c2:	f640 71ff 	movw	r1, #4095	; 0xfff
 80016c6:	f7ff fc61 	bl	8000f8c <map_range>
 80016ca:	4603      	mov	r3, r0
 80016cc:	73fb      	strb	r3, [r7, #15]
		NEXTION_SendValue("x1", mapped);
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	4619      	mov	r1, r3
 80016d2:	483a      	ldr	r0, [pc, #232]	; (80017bc <StartNextion+0x180>)
 80016d4:	f7ff fc0a 	bl	8000eec <NEXTION_SendValue>
		NEXTION_SendGraphicValue(7, 1, mapped);
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	461a      	mov	r2, r3
 80016dc:	2101      	movs	r1, #1
 80016de:	2007      	movs	r0, #7
 80016e0:	f7ff fc2a 	bl	8000f38 <NEXTION_SendGraphicValue>
		mapped = map_range((uint16_t)filter_DC_AMP, 4095, 0, 255, 0);
 80016e4:	4b36      	ldr	r3, [pc, #216]	; (80017c0 <StartNextion+0x184>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fb8f 	bl	8000e0c <__aeabi_f2uiz>
 80016ee:	4603      	mov	r3, r0
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	2300      	movs	r3, #0
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	23ff      	movs	r3, #255	; 0xff
 80016fa:	2200      	movs	r2, #0
 80016fc:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001700:	f7ff fc44 	bl	8000f8c <map_range>
 8001704:	4603      	mov	r3, r0
 8001706:	73fb      	strb	r3, [r7, #15]
		NEXTION_SendValue("x2", mapped);
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	4619      	mov	r1, r3
 800170c:	482d      	ldr	r0, [pc, #180]	; (80017c4 <StartNextion+0x188>)
 800170e:	f7ff fbed 	bl	8000eec <NEXTION_SendValue>
		NEXTION_SendGraphicValue(7, 2, mapped);
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	461a      	mov	r2, r3
 8001716:	2102      	movs	r1, #2
 8001718:	2007      	movs	r0, #7
 800171a:	f7ff fc0d 	bl	8000f38 <NEXTION_SendGraphicValue>
		mapped = map_range((uint16_t)filter_DC_VOLT, 4095, 0, 255, 0);
 800171e:	4b2a      	ldr	r3, [pc, #168]	; (80017c8 <StartNextion+0x18c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fb72 	bl	8000e0c <__aeabi_f2uiz>
 8001728:	4603      	mov	r3, r0
 800172a:	b29b      	uxth	r3, r3
 800172c:	4618      	mov	r0, r3
 800172e:	2300      	movs	r3, #0
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	23ff      	movs	r3, #255	; 0xff
 8001734:	2200      	movs	r2, #0
 8001736:	f640 71ff 	movw	r1, #4095	; 0xfff
 800173a:	f7ff fc27 	bl	8000f8c <map_range>
 800173e:	4603      	mov	r3, r0
 8001740:	73fb      	strb	r3, [r7, #15]
		NEXTION_SendValue("x3", mapped);
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	4619      	mov	r1, r3
 8001746:	4821      	ldr	r0, [pc, #132]	; (80017cc <StartNextion+0x190>)
 8001748:	f7ff fbd0 	bl	8000eec <NEXTION_SendValue>
		NEXTION_SendGraphicValue(7, 3, mapped);
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	461a      	mov	r2, r3
 8001750:	2103      	movs	r1, #3
 8001752:	2007      	movs	r0, #7
 8001754:	f7ff fbf0 	bl	8000f38 <NEXTION_SendGraphicValue>
				time.month, time.year, time.hour, time.minutes, time.seconds);
		NEXTION_SendString("t1", buffer);

		printf("\r\n%s\r\n", buffer);
		*/
		switch (delay_sec) {
 8001758:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <StartNextion+0x194>)
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001760:	4293      	cmp	r3, r2
 8001762:	d013      	beq.n	800178c <StartNextion+0x150>
 8001764:	f242 7210 	movw	r2, #10000	; 0x2710
 8001768:	4293      	cmp	r3, r2
 800176a:	dc14      	bgt.n	8001796 <StartNextion+0x15a>
 800176c:	2b64      	cmp	r3, #100	; 0x64
 800176e:	d003      	beq.n	8001778 <StartNextion+0x13c>
 8001770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001774:	d005      	beq.n	8001782 <StartNextion+0x146>
 8001776:	e00e      	b.n	8001796 <StartNextion+0x15a>
		case 100:
			NEXTION_SendString("t0", "delay 0.1sec");
 8001778:	4916      	ldr	r1, [pc, #88]	; (80017d4 <StartNextion+0x198>)
 800177a:	4817      	ldr	r0, [pc, #92]	; (80017d8 <StartNextion+0x19c>)
 800177c:	f7ff fb90 	bl	8000ea0 <NEXTION_SendString>
			break;
 8001780:	e00e      	b.n	80017a0 <StartNextion+0x164>
		case 1000:
			NEXTION_SendString("t0", "delay 1sec");
 8001782:	4916      	ldr	r1, [pc, #88]	; (80017dc <StartNextion+0x1a0>)
 8001784:	4814      	ldr	r0, [pc, #80]	; (80017d8 <StartNextion+0x19c>)
 8001786:	f7ff fb8b 	bl	8000ea0 <NEXTION_SendString>
			break;
 800178a:	e009      	b.n	80017a0 <StartNextion+0x164>
		case 10000:
			NEXTION_SendString("t0", "delay 10sec");
 800178c:	4914      	ldr	r1, [pc, #80]	; (80017e0 <StartNextion+0x1a4>)
 800178e:	4812      	ldr	r0, [pc, #72]	; (80017d8 <StartNextion+0x19c>)
 8001790:	f7ff fb86 	bl	8000ea0 <NEXTION_SendString>
			break;
 8001794:	e004      	b.n	80017a0 <StartNextion+0x164>
		default:
			NEXTION_SendString("t0", "unknown");
 8001796:	4913      	ldr	r1, [pc, #76]	; (80017e4 <StartNextion+0x1a8>)
 8001798:	480f      	ldr	r0, [pc, #60]	; (80017d8 <StartNextion+0x19c>)
 800179a:	f7ff fb81 	bl	8000ea0 <NEXTION_SendString>
			break;
 800179e:	bf00      	nop

		}

		osDelay(delay_sec);
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <StartNextion+0x194>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f003 fc33 	bl	8005010 <osDelay>
		mapped = map_range((uint16_t)filter_AC_AMP, 4095, 0, 255, 0);
 80017aa:	e761      	b.n	8001670 <StartNextion+0x34>
 80017ac:	08009d1c 	.word	0x08009d1c
 80017b0:	2000062c 	.word	0x2000062c
 80017b4:	08009d34 	.word	0x08009d34
 80017b8:	20000630 	.word	0x20000630
 80017bc:	08009d38 	.word	0x08009d38
 80017c0:	20000634 	.word	0x20000634
 80017c4:	08009d3c 	.word	0x08009d3c
 80017c8:	20000638 	.word	0x20000638
 80017cc:	08009d40 	.word	0x08009d40
 80017d0:	20000004 	.word	0x20000004
 80017d4:	08009d44 	.word	0x08009d44
 80017d8:	08009d54 	.word	0x08009d54
 80017dc:	08009d58 	.word	0x08009d58
 80017e0:	08009d64 	.word	0x08009d64
 80017e4:	08009d70 	.word	0x08009d70

080017e8 <StartBluetooth>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBluetooth */
void StartBluetooth(void const * argument)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for (;;) {



		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80017f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017f4:	4803      	ldr	r0, [pc, #12]	; (8001804 <StartBluetooth+0x1c>)
 80017f6:	f001 fd01 	bl	80031fc <HAL_GPIO_TogglePin>
		osDelay(100);
 80017fa:	2064      	movs	r0, #100	; 0x64
 80017fc:	f003 fc08 	bl	8005010 <osDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001800:	e7f6      	b.n	80017f0 <StartBluetooth+0x8>
 8001802:	bf00      	nop
 8001804:	40011000 	.word	0x40011000

08001808 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a04      	ldr	r2, [pc, #16]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d101      	bne.n	800181e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800181a:	f000 fb4b 	bl	8001eb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40000400 	.word	0x40000400

0800182c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001830:	b672      	cpsid	i
}
 8001832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001834:	e7fe      	b.n	8001834 <Error_Handler+0x8>
	...

08001838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <HAL_MspInit+0x4c>)
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	4a10      	ldr	r2, [pc, #64]	; (8001884 <HAL_MspInit+0x4c>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6193      	str	r3, [r2, #24]
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <HAL_MspInit+0x4c>)
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_MspInit+0x4c>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_MspInit+0x4c>)
 800185c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001860:	61d3      	str	r3, [r2, #28]
 8001862:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_MspInit+0x4c>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	210f      	movs	r1, #15
 8001872:	f06f 0001 	mvn.w	r0, #1
 8001876:	f001 f85c 	bl	8002932 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40021000 	.word	0x40021000

08001888 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0318 	add.w	r3, r7, #24
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a34      	ldr	r2, [pc, #208]	; (8001974 <HAL_ADC_MspInit+0xec>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d160      	bne.n	800196a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018a8:	4b33      	ldr	r3, [pc, #204]	; (8001978 <HAL_ADC_MspInit+0xf0>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	4a32      	ldr	r2, [pc, #200]	; (8001978 <HAL_ADC_MspInit+0xf0>)
 80018ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b2:	6193      	str	r3, [r2, #24]
 80018b4:	4b30      	ldr	r3, [pc, #192]	; (8001978 <HAL_ADC_MspInit+0xf0>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c0:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <HAL_ADC_MspInit+0xf0>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a2c      	ldr	r2, [pc, #176]	; (8001978 <HAL_ADC_MspInit+0xf0>)
 80018c6:	f043 0304 	orr.w	r3, r3, #4
 80018ca:	6193      	str	r3, [r2, #24]
 80018cc:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <HAL_ADC_MspInit+0xf0>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d8:	4b27      	ldr	r3, [pc, #156]	; (8001978 <HAL_ADC_MspInit+0xf0>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	4a26      	ldr	r2, [pc, #152]	; (8001978 <HAL_ADC_MspInit+0xf0>)
 80018de:	f043 0308 	orr.w	r3, r3, #8
 80018e2:	6193      	str	r3, [r2, #24]
 80018e4:	4b24      	ldr	r3, [pc, #144]	; (8001978 <HAL_ADC_MspInit+0xf0>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f003 0308 	and.w	r3, r3, #8
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80018f0:	230e      	movs	r3, #14
 80018f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018f4:	2303      	movs	r3, #3
 80018f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	f107 0318 	add.w	r3, r7, #24
 80018fc:	4619      	mov	r1, r3
 80018fe:	481f      	ldr	r0, [pc, #124]	; (800197c <HAL_ADC_MspInit+0xf4>)
 8001900:	f001 fae0 	bl	8002ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001904:	2301      	movs	r3, #1
 8001906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001908:	2303      	movs	r3, #3
 800190a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190c:	f107 0318 	add.w	r3, r7, #24
 8001910:	4619      	mov	r1, r3
 8001912:	481b      	ldr	r0, [pc, #108]	; (8001980 <HAL_ADC_MspInit+0xf8>)
 8001914:	f001 fad6 	bl	8002ec4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001918:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <HAL_ADC_MspInit+0xfc>)
 800191a:	4a1b      	ldr	r2, [pc, #108]	; (8001988 <HAL_ADC_MspInit+0x100>)
 800191c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800191e:	4b19      	ldr	r3, [pc, #100]	; (8001984 <HAL_ADC_MspInit+0xfc>)
 8001920:	2200      	movs	r2, #0
 8001922:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001924:	4b17      	ldr	r3, [pc, #92]	; (8001984 <HAL_ADC_MspInit+0xfc>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800192a:	4b16      	ldr	r3, [pc, #88]	; (8001984 <HAL_ADC_MspInit+0xfc>)
 800192c:	2280      	movs	r2, #128	; 0x80
 800192e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001930:	4b14      	ldr	r3, [pc, #80]	; (8001984 <HAL_ADC_MspInit+0xfc>)
 8001932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001936:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_ADC_MspInit+0xfc>)
 800193a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800193e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001940:	4b10      	ldr	r3, [pc, #64]	; (8001984 <HAL_ADC_MspInit+0xfc>)
 8001942:	2220      	movs	r2, #32
 8001944:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <HAL_ADC_MspInit+0xfc>)
 8001948:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800194c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800194e:	480d      	ldr	r0, [pc, #52]	; (8001984 <HAL_ADC_MspInit+0xfc>)
 8001950:	f001 f81a 	bl	8002988 <HAL_DMA_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 800195a:	f7ff ff67 	bl	800182c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a08      	ldr	r2, [pc, #32]	; (8001984 <HAL_ADC_MspInit+0xfc>)
 8001962:	621a      	str	r2, [r3, #32]
 8001964:	4a07      	ldr	r2, [pc, #28]	; (8001984 <HAL_ADC_MspInit+0xfc>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800196a:	bf00      	nop
 800196c:	3728      	adds	r7, #40	; 0x28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40012400 	.word	0x40012400
 8001978:	40021000 	.word	0x40021000
 800197c:	40010800 	.word	0x40010800
 8001980:	40010c00 	.word	0x40010c00
 8001984:	200004e8 	.word	0x200004e8
 8001988:	40020008 	.word	0x40020008

0800198c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a1d      	ldr	r2, [pc, #116]	; (8001a1c <HAL_I2C_MspInit+0x90>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d132      	bne.n	8001a12 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ac:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <HAL_I2C_MspInit+0x94>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	4a1b      	ldr	r2, [pc, #108]	; (8001a20 <HAL_I2C_MspInit+0x94>)
 80019b2:	f043 0308 	orr.w	r3, r3, #8
 80019b6:	6193      	str	r3, [r2, #24]
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_I2C_MspInit+0x94>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f003 0308 	and.w	r3, r3, #8
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ca:	2312      	movs	r3, #18
 80019cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ce:	2303      	movs	r3, #3
 80019d0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4619      	mov	r1, r3
 80019d8:	4812      	ldr	r0, [pc, #72]	; (8001a24 <HAL_I2C_MspInit+0x98>)
 80019da:	f001 fa73 	bl	8002ec4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_I2C_MspInit+0x9c>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	f043 0302 	orr.w	r3, r3, #2
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
 80019f4:	4a0c      	ldr	r2, [pc, #48]	; (8001a28 <HAL_I2C_MspInit+0x9c>)
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_I2C_MspInit+0x94>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <HAL_I2C_MspInit+0x94>)
 8001a00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a04:	61d3      	str	r3, [r2, #28]
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_I2C_MspInit+0x94>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a12:	bf00      	nop
 8001a14:	3728      	adds	r7, #40	; 0x28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40005400 	.word	0x40005400
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40010c00 	.word	0x40010c00
 8001a28:	40010000 	.word	0x40010000

08001a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0318 	add.w	r3, r7, #24
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a3c      	ldr	r2, [pc, #240]	; (8001b38 <HAL_UART_MspInit+0x10c>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d13a      	bne.n	8001ac2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a4c:	4b3b      	ldr	r3, [pc, #236]	; (8001b3c <HAL_UART_MspInit+0x110>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a3a      	ldr	r2, [pc, #232]	; (8001b3c <HAL_UART_MspInit+0x110>)
 8001a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a56:	6193      	str	r3, [r2, #24]
 8001a58:	4b38      	ldr	r3, [pc, #224]	; (8001b3c <HAL_UART_MspInit+0x110>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a64:	4b35      	ldr	r3, [pc, #212]	; (8001b3c <HAL_UART_MspInit+0x110>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	4a34      	ldr	r2, [pc, #208]	; (8001b3c <HAL_UART_MspInit+0x110>)
 8001a6a:	f043 0304 	orr.w	r3, r3, #4
 8001a6e:	6193      	str	r3, [r2, #24]
 8001a70:	4b32      	ldr	r3, [pc, #200]	; (8001b3c <HAL_UART_MspInit+0x110>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a86:	2303      	movs	r3, #3
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8a:	f107 0318 	add.w	r3, r7, #24
 8001a8e:	4619      	mov	r1, r3
 8001a90:	482b      	ldr	r0, [pc, #172]	; (8001b40 <HAL_UART_MspInit+0x114>)
 8001a92:	f001 fa17 	bl	8002ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa4:	f107 0318 	add.w	r3, r7, #24
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4825      	ldr	r0, [pc, #148]	; (8001b40 <HAL_UART_MspInit+0x114>)
 8001aac:	f001 fa0a 	bl	8002ec4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2105      	movs	r1, #5
 8001ab4:	2025      	movs	r0, #37	; 0x25
 8001ab6:	f000 ff3c 	bl	8002932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001aba:	2025      	movs	r0, #37	; 0x25
 8001abc:	f000 ff55 	bl	800296a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ac0:	e036      	b.n	8001b30 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a1f      	ldr	r2, [pc, #124]	; (8001b44 <HAL_UART_MspInit+0x118>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d131      	bne.n	8001b30 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001acc:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <HAL_UART_MspInit+0x110>)
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	4a1a      	ldr	r2, [pc, #104]	; (8001b3c <HAL_UART_MspInit+0x110>)
 8001ad2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad6:	61d3      	str	r3, [r2, #28]
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <HAL_UART_MspInit+0x110>)
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae4:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_UART_MspInit+0x110>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a14      	ldr	r2, [pc, #80]	; (8001b3c <HAL_UART_MspInit+0x110>)
 8001aea:	f043 0308 	orr.w	r3, r3, #8
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_UART_MspInit+0x110>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b06:	2303      	movs	r3, #3
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0a:	f107 0318 	add.w	r3, r7, #24
 8001b0e:	4619      	mov	r1, r3
 8001b10:	480d      	ldr	r0, [pc, #52]	; (8001b48 <HAL_UART_MspInit+0x11c>)
 8001b12:	f001 f9d7 	bl	8002ec4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b24:	f107 0318 	add.w	r3, r7, #24
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4807      	ldr	r0, [pc, #28]	; (8001b48 <HAL_UART_MspInit+0x11c>)
 8001b2c:	f001 f9ca 	bl	8002ec4 <HAL_GPIO_Init>
}
 8001b30:	bf00      	nop
 8001b32:	3728      	adds	r7, #40	; 0x28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40013800 	.word	0x40013800
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40010800 	.word	0x40010800
 8001b44:	40004800 	.word	0x40004800
 8001b48:	40010c00 	.word	0x40010c00

08001b4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08e      	sub	sp, #56	; 0x38
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001b62:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <HAL_InitTick+0xe8>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	4a33      	ldr	r2, [pc, #204]	; (8001c34 <HAL_InitTick+0xe8>)
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	61d3      	str	r3, [r2, #28]
 8001b6e:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <HAL_InitTick+0xe8>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b7a:	f107 0210 	add.w	r2, r7, #16
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f002 f893 	bl	8003cb0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d103      	bne.n	8001b9c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b94:	f002 f864 	bl	8003c60 <HAL_RCC_GetPCLK1Freq>
 8001b98:	6378      	str	r0, [r7, #52]	; 0x34
 8001b9a:	e004      	b.n	8001ba6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b9c:	f002 f860 	bl	8003c60 <HAL_RCC_GetPCLK1Freq>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba8:	4a23      	ldr	r2, [pc, #140]	; (8001c38 <HAL_InitTick+0xec>)
 8001baa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bae:	0c9b      	lsrs	r3, r3, #18
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001bb4:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <HAL_InitTick+0xf0>)
 8001bb6:	4a22      	ldr	r2, [pc, #136]	; (8001c40 <HAL_InitTick+0xf4>)
 8001bb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001bba:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <HAL_InitTick+0xf0>)
 8001bbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bc0:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001bc2:	4a1e      	ldr	r2, [pc, #120]	; (8001c3c <HAL_InitTick+0xf0>)
 8001bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc6:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <HAL_InitTick+0xf0>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bce:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <HAL_InitTick+0xf0>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd4:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <HAL_InitTick+0xf0>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001bda:	4818      	ldr	r0, [pc, #96]	; (8001c3c <HAL_InitTick+0xf0>)
 8001bdc:	f002 fa2c 	bl	8004038 <HAL_TIM_Base_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001be6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d11b      	bne.n	8001c26 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001bee:	4813      	ldr	r0, [pc, #76]	; (8001c3c <HAL_InitTick+0xf0>)
 8001bf0:	f002 fa7a 	bl	80040e8 <HAL_TIM_Base_Start_IT>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001bfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d111      	bne.n	8001c26 <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c02:	201d      	movs	r0, #29
 8001c04:	f000 feb1 	bl	800296a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b0f      	cmp	r3, #15
 8001c0c:	d808      	bhi.n	8001c20 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	201d      	movs	r0, #29
 8001c14:	f000 fe8d 	bl	8002932 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c18:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <HAL_InitTick+0xf8>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	e002      	b.n	8001c26 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3738      	adds	r7, #56	; 0x38
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
 8001c38:	431bde83 	.word	0x431bde83
 8001c3c:	2000064c 	.word	0x2000064c
 8001c40:	40000400 	.word	0x40000400
 8001c44:	2000000c 	.word	0x2000000c

08001c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <NMI_Handler+0x4>

08001c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <HardFault_Handler+0x4>

08001c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <MemManage_Handler+0x4>

08001c5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <BusFault_Handler+0x4>

08001c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <UsageFault_Handler+0x4>

08001c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
	...

08001c74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <DMA1_Channel1_IRQHandler+0x10>)
 8001c7a:	f000 ffef 	bl	8002c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200004e8 	.word	0x200004e8

08001c88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <TIM3_IRQHandler+0x10>)
 8001c8e:	f002 fa7d 	bl	800418c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	2000064c 	.word	0x2000064c

08001c9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ca0:	4802      	ldr	r0, [pc, #8]	; (8001cac <USART1_IRQHandler+0x10>)
 8001ca2:	f002 fd23 	bl	80046ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000580 	.word	0x20000580

08001cb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return 1;
 8001cb4:	2301      	movs	r3, #1
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr

08001cbe <_kill>:

int _kill(int pid, int sig)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cc8:	f004 ffba 	bl	8006c40 <__errno>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2216      	movs	r2, #22
 8001cd0:	601a      	str	r2, [r3, #0]
  return -1;
 8001cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <_exit>:

void _exit (int status)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ce6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ffe7 	bl	8001cbe <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cf0:	e7fe      	b.n	8001cf0 <_exit+0x12>

08001cf2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b086      	sub	sp, #24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	e00a      	b.n	8001d1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d04:	f3af 8000 	nop.w
 8001d08:	4601      	mov	r1, r0
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	1c5a      	adds	r2, r3, #1
 8001d0e:	60ba      	str	r2, [r7, #8]
 8001d10:	b2ca      	uxtb	r2, r1
 8001d12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	3301      	adds	r3, #1
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	dbf0      	blt.n	8001d04 <_read+0x12>
  }

  return len;
 8001d22:	687b      	ldr	r3, [r7, #4]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	e009      	b.n	8001d52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	60ba      	str	r2, [r7, #8]
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff f898 	bl	8000e7c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	dbf1      	blt.n	8001d3e <_write+0x12>
  }
  return len;
 8001d5a:	687b      	ldr	r3, [r7, #4]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <_close>:

int _close(int file)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr

08001d7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d8a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <_isatty>:

int _isatty(int file)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001da0:	2301      	movs	r3, #1
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dcc:	4a14      	ldr	r2, [pc, #80]	; (8001e20 <_sbrk+0x5c>)
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <_sbrk+0x60>)
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <_sbrk+0x64>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d102      	bne.n	8001de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de0:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <_sbrk+0x64>)
 8001de2:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <_sbrk+0x68>)
 8001de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d207      	bcs.n	8001e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df4:	f004 ff24 	bl	8006c40 <__errno>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e02:	e009      	b.n	8001e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <_sbrk+0x64>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e0a:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <_sbrk+0x64>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <_sbrk+0x64>)
 8001e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e16:	68fb      	ldr	r3, [r7, #12]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20005000 	.word	0x20005000
 8001e24:	00000400 	.word	0x00000400
 8001e28:	20000694 	.word	0x20000694
 8001e2c:	200013f8 	.word	0x200013f8

08001e30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e3c:	480c      	ldr	r0, [pc, #48]	; (8001e70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e3e:	490d      	ldr	r1, [pc, #52]	; (8001e74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e40:	4a0d      	ldr	r2, [pc, #52]	; (8001e78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e44:	e002      	b.n	8001e4c <LoopCopyDataInit>

08001e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4a:	3304      	adds	r3, #4

08001e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e50:	d3f9      	bcc.n	8001e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e54:	4c0a      	ldr	r4, [pc, #40]	; (8001e80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e58:	e001      	b.n	8001e5e <LoopFillZerobss>

08001e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e5c:	3204      	adds	r2, #4

08001e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e60:	d3fb      	bcc.n	8001e5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e62:	f7ff ffe5 	bl	8001e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e66:	f004 ffe7 	bl	8006e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e6a:	f7ff f8ab 	bl	8000fc4 <main>
  bx lr
 8001e6e:	4770      	bx	lr
  ldr r0, =_sdata
 8001e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e74:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001e78:	0800a19c 	.word	0x0800a19c
  ldr r2, =_sbss
 8001e7c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001e80:	200013f8 	.word	0x200013f8

08001e84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e84:	e7fe      	b.n	8001e84 <ADC1_2_IRQHandler>
	...

08001e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <HAL_Init+0x28>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <HAL_Init+0x28>)
 8001e92:	f043 0310 	orr.w	r3, r3, #16
 8001e96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f000 fd3f 	bl	800291c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e9e:	200f      	movs	r0, #15
 8001ea0:	f7ff fe54 	bl	8001b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea4:	f7ff fcc8 	bl	8001838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40022000 	.word	0x40022000

08001eb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <HAL_IncTick+0x1c>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <HAL_IncTick+0x20>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	4a03      	ldr	r2, [pc, #12]	; (8001ed4 <HAL_IncTick+0x20>)
 8001ec6:	6013      	str	r3, [r2, #0]
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	20000010 	.word	0x20000010
 8001ed4:	20000698 	.word	0x20000698

08001ed8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return uwTick;
 8001edc:	4b02      	ldr	r3, [pc, #8]	; (8001ee8 <HAL_GetTick+0x10>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	20000698 	.word	0x20000698

08001eec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e0be      	b.n	800208c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d109      	bne.n	8001f30 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff fcac 	bl	8001888 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 faf5 	bl	8002520 <ADC_ConversionStop_Disable>
 8001f36:	4603      	mov	r3, r0
 8001f38:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f040 8099 	bne.w	800207a <HAL_ADC_Init+0x18e>
 8001f48:	7dfb      	ldrb	r3, [r7, #23]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f040 8095 	bne.w	800207a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f58:	f023 0302 	bic.w	r3, r3, #2
 8001f5c:	f043 0202 	orr.w	r2, r3, #2
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f6c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	7b1b      	ldrb	r3, [r3, #12]
 8001f72:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f74:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f84:	d003      	beq.n	8001f8e <HAL_ADC_Init+0xa2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d102      	bne.n	8001f94 <HAL_ADC_Init+0xa8>
 8001f8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f92:	e000      	b.n	8001f96 <HAL_ADC_Init+0xaa>
 8001f94:	2300      	movs	r3, #0
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7d1b      	ldrb	r3, [r3, #20]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d119      	bne.n	8001fd8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	7b1b      	ldrb	r3, [r3, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d109      	bne.n	8001fc0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	035a      	lsls	r2, r3, #13
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	e00b      	b.n	8001fd8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc4:	f043 0220 	orr.w	r2, r3, #32
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	f043 0201 	orr.w	r2, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	4b28      	ldr	r3, [pc, #160]	; (8002094 <HAL_ADC_Init+0x1a8>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	68b9      	ldr	r1, [r7, #8]
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002008:	d003      	beq.n	8002012 <HAL_ADC_Init+0x126>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d104      	bne.n	800201c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	3b01      	subs	r3, #1
 8002018:	051b      	lsls	r3, r3, #20
 800201a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002022:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	430a      	orrs	r2, r1
 800202e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	4b18      	ldr	r3, [pc, #96]	; (8002098 <HAL_ADC_Init+0x1ac>)
 8002038:	4013      	ands	r3, r2
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	429a      	cmp	r2, r3
 800203e:	d10b      	bne.n	8002058 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204a:	f023 0303 	bic.w	r3, r3, #3
 800204e:	f043 0201 	orr.w	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002056:	e018      	b.n	800208a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205c:	f023 0312 	bic.w	r3, r3, #18
 8002060:	f043 0210 	orr.w	r2, r3, #16
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206c:	f043 0201 	orr.w	r2, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002078:	e007      	b.n	800208a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207e:	f043 0210 	orr.w	r2, r3, #16
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800208a:	7dfb      	ldrb	r3, [r7, #23]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	ffe1f7fd 	.word	0xffe1f7fd
 8002098:	ff1f0efe 	.word	0xff1f0efe

0800209c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a64      	ldr	r2, [pc, #400]	; (8002244 <HAL_ADC_Start_DMA+0x1a8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d004      	beq.n	80020c0 <HAL_ADC_Start_DMA+0x24>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a63      	ldr	r2, [pc, #396]	; (8002248 <HAL_ADC_Start_DMA+0x1ac>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d106      	bne.n	80020ce <HAL_ADC_Start_DMA+0x32>
 80020c0:	4b60      	ldr	r3, [pc, #384]	; (8002244 <HAL_ADC_Start_DMA+0x1a8>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f040 80b3 	bne.w	8002234 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_ADC_Start_DMA+0x40>
 80020d8:	2302      	movs	r3, #2
 80020da:	e0ae      	b.n	800223a <HAL_ADC_Start_DMA+0x19e>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 f9c1 	bl	800246c <ADC_Enable>
 80020ea:	4603      	mov	r3, r0
 80020ec:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020ee:	7dfb      	ldrb	r3, [r7, #23]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f040 809a 	bne.w	800222a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020fe:	f023 0301 	bic.w	r3, r3, #1
 8002102:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a4e      	ldr	r2, [pc, #312]	; (8002248 <HAL_ADC_Start_DMA+0x1ac>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d105      	bne.n	8002120 <HAL_ADC_Start_DMA+0x84>
 8002114:	4b4b      	ldr	r3, [pc, #300]	; (8002244 <HAL_ADC_Start_DMA+0x1a8>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d115      	bne.n	800214c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002124:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002136:	2b00      	cmp	r3, #0
 8002138:	d026      	beq.n	8002188 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002142:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800214a:	e01d      	b.n	8002188 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002150:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a39      	ldr	r2, [pc, #228]	; (8002244 <HAL_ADC_Start_DMA+0x1a8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d004      	beq.n	800216c <HAL_ADC_Start_DMA+0xd0>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a38      	ldr	r2, [pc, #224]	; (8002248 <HAL_ADC_Start_DMA+0x1ac>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d10d      	bne.n	8002188 <HAL_ADC_Start_DMA+0xec>
 800216c:	4b35      	ldr	r3, [pc, #212]	; (8002244 <HAL_ADC_Start_DMA+0x1a8>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002174:	2b00      	cmp	r3, #0
 8002176:	d007      	beq.n	8002188 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002180:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d006      	beq.n	80021a2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	f023 0206 	bic.w	r2, r3, #6
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	62da      	str	r2, [r3, #44]	; 0x2c
 80021a0:	e002      	b.n	80021a8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	4a25      	ldr	r2, [pc, #148]	; (800224c <HAL_ADC_Start_DMA+0x1b0>)
 80021b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	4a24      	ldr	r2, [pc, #144]	; (8002250 <HAL_ADC_Start_DMA+0x1b4>)
 80021be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	4a23      	ldr	r2, [pc, #140]	; (8002254 <HAL_ADC_Start_DMA+0x1b8>)
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 0202 	mvn.w	r2, #2
 80021d0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021e0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a18      	ldr	r0, [r3, #32]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	334c      	adds	r3, #76	; 0x4c
 80021ec:	4619      	mov	r1, r3
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f000 fc23 	bl	8002a3c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002200:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002204:	d108      	bne.n	8002218 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002214:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002216:	e00f      	b.n	8002238 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002226:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002228:	e006      	b.n	8002238 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002232:	e001      	b.n	8002238 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002238:	7dfb      	ldrb	r3, [r7, #23]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40012400 	.word	0x40012400
 8002248:	40012800 	.word	0x40012800
 800224c:	080025a3 	.word	0x080025a3
 8002250:	0800261f 	.word	0x0800261f
 8002254:	0800263b 	.word	0x0800263b

08002258 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr

0800226a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_ADC_ConfigChannel+0x20>
 8002298:	2302      	movs	r3, #2
 800229a:	e0dc      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1da>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b06      	cmp	r3, #6
 80022aa:	d81c      	bhi.n	80022e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	3b05      	subs	r3, #5
 80022be:	221f      	movs	r2, #31
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	4019      	ands	r1, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	3b05      	subs	r3, #5
 80022d8:	fa00 f203 	lsl.w	r2, r0, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	635a      	str	r2, [r3, #52]	; 0x34
 80022e4:	e03c      	b.n	8002360 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b0c      	cmp	r3, #12
 80022ec:	d81c      	bhi.n	8002328 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	3b23      	subs	r3, #35	; 0x23
 8002300:	221f      	movs	r2, #31
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	4019      	ands	r1, r3
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	3b23      	subs	r3, #35	; 0x23
 800231a:	fa00 f203 	lsl.w	r2, r0, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	631a      	str	r2, [r3, #48]	; 0x30
 8002326:	e01b      	b.n	8002360 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	3b41      	subs	r3, #65	; 0x41
 800233a:	221f      	movs	r2, #31
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	4019      	ands	r1, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	6818      	ldr	r0, [r3, #0]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	3b41      	subs	r3, #65	; 0x41
 8002354:	fa00 f203 	lsl.w	r2, r0, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b09      	cmp	r3, #9
 8002366:	d91c      	bls.n	80023a2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68d9      	ldr	r1, [r3, #12]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	4613      	mov	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4413      	add	r3, r2
 8002378:	3b1e      	subs	r3, #30
 800237a:	2207      	movs	r2, #7
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	4019      	ands	r1, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6898      	ldr	r0, [r3, #8]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4613      	mov	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	4413      	add	r3, r2
 8002392:	3b1e      	subs	r3, #30
 8002394:	fa00 f203 	lsl.w	r2, r0, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	60da      	str	r2, [r3, #12]
 80023a0:	e019      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6919      	ldr	r1, [r3, #16]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4613      	mov	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4413      	add	r3, r2
 80023b2:	2207      	movs	r2, #7
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	4019      	ands	r1, r3
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	6898      	ldr	r0, [r3, #8]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4613      	mov	r3, r2
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4413      	add	r3, r2
 80023ca:	fa00 f203 	lsl.w	r2, r0, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b10      	cmp	r3, #16
 80023dc:	d003      	beq.n	80023e6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023e2:	2b11      	cmp	r3, #17
 80023e4:	d132      	bne.n	800244c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a1d      	ldr	r2, [pc, #116]	; (8002460 <HAL_ADC_ConfigChannel+0x1e4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d125      	bne.n	800243c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d126      	bne.n	800244c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800240c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b10      	cmp	r3, #16
 8002414:	d11a      	bne.n	800244c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002416:	4b13      	ldr	r3, [pc, #76]	; (8002464 <HAL_ADC_ConfigChannel+0x1e8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a13      	ldr	r2, [pc, #76]	; (8002468 <HAL_ADC_ConfigChannel+0x1ec>)
 800241c:	fba2 2303 	umull	r2, r3, r2, r3
 8002420:	0c9a      	lsrs	r2, r3, #18
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800242c:	e002      	b.n	8002434 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	3b01      	subs	r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f9      	bne.n	800242e <HAL_ADC_ConfigChannel+0x1b2>
 800243a:	e007      	b.n	800244c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	f043 0220 	orr.w	r2, r3, #32
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002454:	7bfb      	ldrb	r3, [r7, #15]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	40012400 	.word	0x40012400
 8002464:	20000008 	.word	0x20000008
 8002468:	431bde83 	.word	0x431bde83

0800246c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b01      	cmp	r3, #1
 8002488:	d040      	beq.n	800250c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 0201 	orr.w	r2, r2, #1
 8002498:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800249a:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <ADC_Enable+0xac>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a1f      	ldr	r2, [pc, #124]	; (800251c <ADC_Enable+0xb0>)
 80024a0:	fba2 2303 	umull	r2, r3, r2, r3
 80024a4:	0c9b      	lsrs	r3, r3, #18
 80024a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024a8:	e002      	b.n	80024b0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f9      	bne.n	80024aa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024b6:	f7ff fd0f 	bl	8001ed8 <HAL_GetTick>
 80024ba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024bc:	e01f      	b.n	80024fe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024be:	f7ff fd0b 	bl	8001ed8 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d918      	bls.n	80024fe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d011      	beq.n	80024fe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024de:	f043 0210 	orr.w	r2, r3, #16
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ea:	f043 0201 	orr.w	r2, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e007      	b.n	800250e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b01      	cmp	r3, #1
 800250a:	d1d8      	bne.n	80024be <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000008 	.word	0x20000008
 800251c:	431bde83 	.word	0x431bde83

08002520 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b01      	cmp	r3, #1
 8002538:	d12e      	bne.n	8002598 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0201 	bic.w	r2, r2, #1
 8002548:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800254a:	f7ff fcc5 	bl	8001ed8 <HAL_GetTick>
 800254e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002550:	e01b      	b.n	800258a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002552:	f7ff fcc1 	bl	8001ed8 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d914      	bls.n	800258a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b01      	cmp	r3, #1
 800256c:	d10d      	bne.n	800258a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002572:	f043 0210 	orr.w	r2, r3, #16
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	f043 0201 	orr.w	r2, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e007      	b.n	800259a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b01      	cmp	r3, #1
 8002596:	d0dc      	beq.n	8002552 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b084      	sub	sp, #16
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d127      	bne.n	800260c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80025d2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80025d6:	d115      	bne.n	8002604 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d111      	bne.n	8002604 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d105      	bne.n	8002604 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	f043 0201 	orr.w	r2, r3, #1
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f7fe ff1d 	bl	8001444 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800260a:	e004      	b.n	8002616 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	4798      	blx	r3
}
 8002616:	bf00      	nop
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b084      	sub	sp, #16
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f7ff fe13 	bl	8002258 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b084      	sub	sp, #16
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002658:	f043 0204 	orr.w	r2, r3, #4
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f7ff fe02 	bl	800226a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002670:	b590      	push	{r4, r7, lr}
 8002672:	b087      	sub	sp, #28
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_ADCEx_Calibration_Start+0x1e>
 800268a:	2302      	movs	r3, #2
 800268c:	e095      	b.n	80027ba <HAL_ADCEx_Calibration_Start+0x14a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff ff42 	bl	8002520 <ADC_ConversionStop_Disable>
 800269c:	4603      	mov	r3, r0
 800269e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80026a0:	7dfb      	ldrb	r3, [r7, #23]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 8084 	bne.w	80027b0 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026b0:	f023 0302 	bic.w	r3, r3, #2
 80026b4:	f043 0202 	orr.w	r2, r3, #2
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80026bc:	4b41      	ldr	r3, [pc, #260]	; (80027c4 <HAL_ADCEx_Calibration_Start+0x154>)
 80026be:	681c      	ldr	r4, [r3, #0]
 80026c0:	2002      	movs	r0, #2
 80026c2:	f001 fbf9 	bl	8003eb8 <HAL_RCCEx_GetPeriphCLKFreq>
 80026c6:	4603      	mov	r3, r0
 80026c8:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80026cc:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80026ce:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80026d0:	e002      	b.n	80026d8 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	3b01      	subs	r3, #1
 80026d6:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f9      	bne.n	80026d2 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff fec4 	bl	800246c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0208 	orr.w	r2, r2, #8
 80026f2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80026f4:	f7ff fbf0 	bl	8001ed8 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80026fa:	e01b      	b.n	8002734 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80026fc:	f7ff fbec 	bl	8001ed8 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b0a      	cmp	r3, #10
 8002708:	d914      	bls.n	8002734 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00d      	beq.n	8002734 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271c:	f023 0312 	bic.w	r3, r3, #18
 8002720:	f043 0210 	orr.w	r2, r3, #16
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e042      	b.n	80027ba <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1dc      	bne.n	80026fc <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0204 	orr.w	r2, r2, #4
 8002750:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002752:	f7ff fbc1 	bl	8001ed8 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002758:	e01b      	b.n	8002792 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800275a:	f7ff fbbd 	bl	8001ed8 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b0a      	cmp	r3, #10
 8002766:	d914      	bls.n	8002792 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00d      	beq.n	8002792 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	f023 0312 	bic.w	r3, r3, #18
 800277e:	f043 0210 	orr.w	r2, r3, #16
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e013      	b.n	80027ba <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1dc      	bne.n	800275a <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a4:	f023 0303 	bic.w	r3, r3, #3
 80027a8:	f043 0201 	orr.w	r2, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	371c      	adds	r7, #28
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd90      	pop	{r4, r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000008 	.word	0x20000008

080027c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d8:	4b0c      	ldr	r3, [pc, #48]	; (800280c <__NVIC_SetPriorityGrouping+0x44>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027e4:	4013      	ands	r3, r2
 80027e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027fa:	4a04      	ldr	r2, [pc, #16]	; (800280c <__NVIC_SetPriorityGrouping+0x44>)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	60d3      	str	r3, [r2, #12]
}
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002814:	4b04      	ldr	r3, [pc, #16]	; (8002828 <__NVIC_GetPriorityGrouping+0x18>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	0a1b      	lsrs	r3, r3, #8
 800281a:	f003 0307 	and.w	r3, r3, #7
}
 800281e:	4618      	mov	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	2b00      	cmp	r3, #0
 800283c:	db0b      	blt.n	8002856 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	f003 021f 	and.w	r2, r3, #31
 8002844:	4906      	ldr	r1, [pc, #24]	; (8002860 <__NVIC_EnableIRQ+0x34>)
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	2001      	movs	r0, #1
 800284e:	fa00 f202 	lsl.w	r2, r0, r2
 8002852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	e000e100 	.word	0xe000e100

08002864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	6039      	str	r1, [r7, #0]
 800286e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002874:	2b00      	cmp	r3, #0
 8002876:	db0a      	blt.n	800288e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	b2da      	uxtb	r2, r3
 800287c:	490c      	ldr	r1, [pc, #48]	; (80028b0 <__NVIC_SetPriority+0x4c>)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	0112      	lsls	r2, r2, #4
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	440b      	add	r3, r1
 8002888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800288c:	e00a      	b.n	80028a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	b2da      	uxtb	r2, r3
 8002892:	4908      	ldr	r1, [pc, #32]	; (80028b4 <__NVIC_SetPriority+0x50>)
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	3b04      	subs	r3, #4
 800289c:	0112      	lsls	r2, r2, #4
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	440b      	add	r3, r1
 80028a2:	761a      	strb	r2, [r3, #24]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	e000e100 	.word	0xe000e100
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b089      	sub	sp, #36	; 0x24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f1c3 0307 	rsb	r3, r3, #7
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	bf28      	it	cs
 80028d6:	2304      	movcs	r3, #4
 80028d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3304      	adds	r3, #4
 80028de:	2b06      	cmp	r3, #6
 80028e0:	d902      	bls.n	80028e8 <NVIC_EncodePriority+0x30>
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3b03      	subs	r3, #3
 80028e6:	e000      	b.n	80028ea <NVIC_EncodePriority+0x32>
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43da      	mvns	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	401a      	ands	r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002900:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	43d9      	mvns	r1, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	4313      	orrs	r3, r2
         );
}
 8002912:	4618      	mov	r0, r3
 8002914:	3724      	adds	r7, #36	; 0x24
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff ff4f 	bl	80027c8 <__NVIC_SetPriorityGrouping>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002932:	b580      	push	{r7, lr}
 8002934:	b086      	sub	sp, #24
 8002936:	af00      	add	r7, sp, #0
 8002938:	4603      	mov	r3, r0
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002944:	f7ff ff64 	bl	8002810 <__NVIC_GetPriorityGrouping>
 8002948:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	6978      	ldr	r0, [r7, #20]
 8002950:	f7ff ffb2 	bl	80028b8 <NVIC_EncodePriority>
 8002954:	4602      	mov	r2, r0
 8002956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295a:	4611      	mov	r1, r2
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff81 	bl	8002864 <__NVIC_SetPriority>
}
 8002962:	bf00      	nop
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	4603      	mov	r3, r0
 8002972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff57 	bl	800282c <__NVIC_EnableIRQ>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e043      	b.n	8002a26 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <HAL_DMA_Init+0xa8>)
 80029a6:	4413      	add	r3, r2
 80029a8:	4a22      	ldr	r2, [pc, #136]	; (8002a34 <HAL_DMA_Init+0xac>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	091b      	lsrs	r3, r3, #4
 80029b0:	009a      	lsls	r2, r3, #2
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a1f      	ldr	r2, [pc, #124]	; (8002a38 <HAL_DMA_Init+0xb0>)
 80029ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80029d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80029d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80029e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	bffdfff8 	.word	0xbffdfff8
 8002a34:	cccccccd 	.word	0xcccccccd
 8002a38:	40020000 	.word	0x40020000

08002a3c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_DMA_Start_IT+0x20>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e04a      	b.n	8002af2 <HAL_DMA_Start_IT+0xb6>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d13a      	bne.n	8002ae4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2202      	movs	r2, #2
 8002a72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0201 	bic.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 f9e8 	bl	8002e68 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 020e 	orr.w	r2, r2, #14
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	e00f      	b.n	8002ad2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0204 	bic.w	r2, r2, #4
 8002ac0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f042 020a 	orr.w	r2, r2, #10
 8002ad0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f042 0201 	orr.w	r2, r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	e005      	b.n	8002af0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002aec:	2302      	movs	r3, #2
 8002aee:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b085      	sub	sp, #20
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d008      	beq.n	8002b22 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2204      	movs	r2, #4
 8002b14:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e020      	b.n	8002b64 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 020e 	bic.w	r2, r2, #14
 8002b30:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0201 	bic.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b50:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr
	...

08002b70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d005      	beq.n	8002b92 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2204      	movs	r2, #4
 8002b8a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	73fb      	strb	r3, [r7, #15]
 8002b90:	e051      	b.n	8002c36 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 020e 	bic.w	r2, r2, #14
 8002ba0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0201 	bic.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a22      	ldr	r2, [pc, #136]	; (8002c40 <HAL_DMA_Abort_IT+0xd0>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d029      	beq.n	8002c10 <HAL_DMA_Abort_IT+0xa0>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a20      	ldr	r2, [pc, #128]	; (8002c44 <HAL_DMA_Abort_IT+0xd4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d022      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x9c>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a1f      	ldr	r2, [pc, #124]	; (8002c48 <HAL_DMA_Abort_IT+0xd8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d01a      	beq.n	8002c06 <HAL_DMA_Abort_IT+0x96>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a1d      	ldr	r2, [pc, #116]	; (8002c4c <HAL_DMA_Abort_IT+0xdc>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d012      	beq.n	8002c00 <HAL_DMA_Abort_IT+0x90>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a1c      	ldr	r2, [pc, #112]	; (8002c50 <HAL_DMA_Abort_IT+0xe0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d00a      	beq.n	8002bfa <HAL_DMA_Abort_IT+0x8a>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a1a      	ldr	r2, [pc, #104]	; (8002c54 <HAL_DMA_Abort_IT+0xe4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d102      	bne.n	8002bf4 <HAL_DMA_Abort_IT+0x84>
 8002bee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bf2:	e00e      	b.n	8002c12 <HAL_DMA_Abort_IT+0xa2>
 8002bf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bf8:	e00b      	b.n	8002c12 <HAL_DMA_Abort_IT+0xa2>
 8002bfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bfe:	e008      	b.n	8002c12 <HAL_DMA_Abort_IT+0xa2>
 8002c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c04:	e005      	b.n	8002c12 <HAL_DMA_Abort_IT+0xa2>
 8002c06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c0a:	e002      	b.n	8002c12 <HAL_DMA_Abort_IT+0xa2>
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	e000      	b.n	8002c12 <HAL_DMA_Abort_IT+0xa2>
 8002c10:	2301      	movs	r3, #1
 8002c12:	4a11      	ldr	r2, [pc, #68]	; (8002c58 <HAL_DMA_Abort_IT+0xe8>)
 8002c14:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	4798      	blx	r3
    } 
  }
  return status;
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40020008 	.word	0x40020008
 8002c44:	4002001c 	.word	0x4002001c
 8002c48:	40020030 	.word	0x40020030
 8002c4c:	40020044 	.word	0x40020044
 8002c50:	40020058 	.word	0x40020058
 8002c54:	4002006c 	.word	0x4002006c
 8002c58:	40020000 	.word	0x40020000

08002c5c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	2204      	movs	r2, #4
 8002c7a:	409a      	lsls	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d04f      	beq.n	8002d24 <HAL_DMA_IRQHandler+0xc8>
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d04a      	beq.n	8002d24 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d107      	bne.n	8002cac <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0204 	bic.w	r2, r2, #4
 8002caa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a66      	ldr	r2, [pc, #408]	; (8002e4c <HAL_DMA_IRQHandler+0x1f0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d029      	beq.n	8002d0a <HAL_DMA_IRQHandler+0xae>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a65      	ldr	r2, [pc, #404]	; (8002e50 <HAL_DMA_IRQHandler+0x1f4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d022      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xaa>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a63      	ldr	r2, [pc, #396]	; (8002e54 <HAL_DMA_IRQHandler+0x1f8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d01a      	beq.n	8002d00 <HAL_DMA_IRQHandler+0xa4>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a62      	ldr	r2, [pc, #392]	; (8002e58 <HAL_DMA_IRQHandler+0x1fc>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d012      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x9e>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a60      	ldr	r2, [pc, #384]	; (8002e5c <HAL_DMA_IRQHandler+0x200>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00a      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x98>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a5f      	ldr	r2, [pc, #380]	; (8002e60 <HAL_DMA_IRQHandler+0x204>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d102      	bne.n	8002cee <HAL_DMA_IRQHandler+0x92>
 8002ce8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cec:	e00e      	b.n	8002d0c <HAL_DMA_IRQHandler+0xb0>
 8002cee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002cf2:	e00b      	b.n	8002d0c <HAL_DMA_IRQHandler+0xb0>
 8002cf4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cf8:	e008      	b.n	8002d0c <HAL_DMA_IRQHandler+0xb0>
 8002cfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cfe:	e005      	b.n	8002d0c <HAL_DMA_IRQHandler+0xb0>
 8002d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d04:	e002      	b.n	8002d0c <HAL_DMA_IRQHandler+0xb0>
 8002d06:	2340      	movs	r3, #64	; 0x40
 8002d08:	e000      	b.n	8002d0c <HAL_DMA_IRQHandler+0xb0>
 8002d0a:	2304      	movs	r3, #4
 8002d0c:	4a55      	ldr	r2, [pc, #340]	; (8002e64 <HAL_DMA_IRQHandler+0x208>)
 8002d0e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 8094 	beq.w	8002e42 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d22:	e08e      	b.n	8002e42 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	2202      	movs	r2, #2
 8002d2a:	409a      	lsls	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d056      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x186>
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d051      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10b      	bne.n	8002d64 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 020a 	bic.w	r2, r2, #10
 8002d5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a38      	ldr	r2, [pc, #224]	; (8002e4c <HAL_DMA_IRQHandler+0x1f0>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d029      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x166>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a37      	ldr	r2, [pc, #220]	; (8002e50 <HAL_DMA_IRQHandler+0x1f4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d022      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x162>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a35      	ldr	r2, [pc, #212]	; (8002e54 <HAL_DMA_IRQHandler+0x1f8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d01a      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x15c>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a34      	ldr	r2, [pc, #208]	; (8002e58 <HAL_DMA_IRQHandler+0x1fc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d012      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x156>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a32      	ldr	r2, [pc, #200]	; (8002e5c <HAL_DMA_IRQHandler+0x200>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00a      	beq.n	8002dac <HAL_DMA_IRQHandler+0x150>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a31      	ldr	r2, [pc, #196]	; (8002e60 <HAL_DMA_IRQHandler+0x204>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d102      	bne.n	8002da6 <HAL_DMA_IRQHandler+0x14a>
 8002da0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002da4:	e00e      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x168>
 8002da6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002daa:	e00b      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x168>
 8002dac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002db0:	e008      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x168>
 8002db2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002db6:	e005      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x168>
 8002db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dbc:	e002      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x168>
 8002dbe:	2320      	movs	r3, #32
 8002dc0:	e000      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x168>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	4a27      	ldr	r2, [pc, #156]	; (8002e64 <HAL_DMA_IRQHandler+0x208>)
 8002dc6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d034      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002de0:	e02f      	b.n	8002e42 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	2208      	movs	r2, #8
 8002de8:	409a      	lsls	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d028      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x1e8>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d023      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 020e 	bic.w	r2, r2, #14
 8002e0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e14:	2101      	movs	r1, #1
 8002e16:	fa01 f202 	lsl.w	r2, r1, r2
 8002e1a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d004      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	4798      	blx	r3
    }
  }
  return;
 8002e42:	bf00      	nop
 8002e44:	bf00      	nop
}
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40020008 	.word	0x40020008
 8002e50:	4002001c 	.word	0x4002001c
 8002e54:	40020030 	.word	0x40020030
 8002e58:	40020044 	.word	0x40020044
 8002e5c:	40020058 	.word	0x40020058
 8002e60:	4002006c 	.word	0x4002006c
 8002e64:	40020000 	.word	0x40020000

08002e68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7e:	2101      	movs	r1, #1
 8002e80:	fa01 f202 	lsl.w	r2, r1, r2
 8002e84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b10      	cmp	r3, #16
 8002e94:	d108      	bne.n	8002ea8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ea6:	e007      	b.n	8002eb8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	60da      	str	r2, [r3, #12]
}
 8002eb8:	bf00      	nop
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr
	...

08002ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b08b      	sub	sp, #44	; 0x2c
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ed6:	e169      	b.n	80031ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ed8:	2201      	movs	r2, #1
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	69fa      	ldr	r2, [r7, #28]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	f040 8158 	bne.w	80031a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	4a9a      	ldr	r2, [pc, #616]	; (8003164 <HAL_GPIO_Init+0x2a0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d05e      	beq.n	8002fbe <HAL_GPIO_Init+0xfa>
 8002f00:	4a98      	ldr	r2, [pc, #608]	; (8003164 <HAL_GPIO_Init+0x2a0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d875      	bhi.n	8002ff2 <HAL_GPIO_Init+0x12e>
 8002f06:	4a98      	ldr	r2, [pc, #608]	; (8003168 <HAL_GPIO_Init+0x2a4>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d058      	beq.n	8002fbe <HAL_GPIO_Init+0xfa>
 8002f0c:	4a96      	ldr	r2, [pc, #600]	; (8003168 <HAL_GPIO_Init+0x2a4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d86f      	bhi.n	8002ff2 <HAL_GPIO_Init+0x12e>
 8002f12:	4a96      	ldr	r2, [pc, #600]	; (800316c <HAL_GPIO_Init+0x2a8>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d052      	beq.n	8002fbe <HAL_GPIO_Init+0xfa>
 8002f18:	4a94      	ldr	r2, [pc, #592]	; (800316c <HAL_GPIO_Init+0x2a8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d869      	bhi.n	8002ff2 <HAL_GPIO_Init+0x12e>
 8002f1e:	4a94      	ldr	r2, [pc, #592]	; (8003170 <HAL_GPIO_Init+0x2ac>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d04c      	beq.n	8002fbe <HAL_GPIO_Init+0xfa>
 8002f24:	4a92      	ldr	r2, [pc, #584]	; (8003170 <HAL_GPIO_Init+0x2ac>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d863      	bhi.n	8002ff2 <HAL_GPIO_Init+0x12e>
 8002f2a:	4a92      	ldr	r2, [pc, #584]	; (8003174 <HAL_GPIO_Init+0x2b0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d046      	beq.n	8002fbe <HAL_GPIO_Init+0xfa>
 8002f30:	4a90      	ldr	r2, [pc, #576]	; (8003174 <HAL_GPIO_Init+0x2b0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d85d      	bhi.n	8002ff2 <HAL_GPIO_Init+0x12e>
 8002f36:	2b12      	cmp	r3, #18
 8002f38:	d82a      	bhi.n	8002f90 <HAL_GPIO_Init+0xcc>
 8002f3a:	2b12      	cmp	r3, #18
 8002f3c:	d859      	bhi.n	8002ff2 <HAL_GPIO_Init+0x12e>
 8002f3e:	a201      	add	r2, pc, #4	; (adr r2, 8002f44 <HAL_GPIO_Init+0x80>)
 8002f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f44:	08002fbf 	.word	0x08002fbf
 8002f48:	08002f99 	.word	0x08002f99
 8002f4c:	08002fab 	.word	0x08002fab
 8002f50:	08002fed 	.word	0x08002fed
 8002f54:	08002ff3 	.word	0x08002ff3
 8002f58:	08002ff3 	.word	0x08002ff3
 8002f5c:	08002ff3 	.word	0x08002ff3
 8002f60:	08002ff3 	.word	0x08002ff3
 8002f64:	08002ff3 	.word	0x08002ff3
 8002f68:	08002ff3 	.word	0x08002ff3
 8002f6c:	08002ff3 	.word	0x08002ff3
 8002f70:	08002ff3 	.word	0x08002ff3
 8002f74:	08002ff3 	.word	0x08002ff3
 8002f78:	08002ff3 	.word	0x08002ff3
 8002f7c:	08002ff3 	.word	0x08002ff3
 8002f80:	08002ff3 	.word	0x08002ff3
 8002f84:	08002ff3 	.word	0x08002ff3
 8002f88:	08002fa1 	.word	0x08002fa1
 8002f8c:	08002fb5 	.word	0x08002fb5
 8002f90:	4a79      	ldr	r2, [pc, #484]	; (8003178 <HAL_GPIO_Init+0x2b4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d013      	beq.n	8002fbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f96:	e02c      	b.n	8002ff2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	623b      	str	r3, [r7, #32]
          break;
 8002f9e:	e029      	b.n	8002ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	623b      	str	r3, [r7, #32]
          break;
 8002fa8:	e024      	b.n	8002ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	3308      	adds	r3, #8
 8002fb0:	623b      	str	r3, [r7, #32]
          break;
 8002fb2:	e01f      	b.n	8002ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	330c      	adds	r3, #12
 8002fba:	623b      	str	r3, [r7, #32]
          break;
 8002fbc:	e01a      	b.n	8002ff4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d102      	bne.n	8002fcc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fc6:	2304      	movs	r3, #4
 8002fc8:	623b      	str	r3, [r7, #32]
          break;
 8002fca:	e013      	b.n	8002ff4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d105      	bne.n	8002fe0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fd4:	2308      	movs	r3, #8
 8002fd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	611a      	str	r2, [r3, #16]
          break;
 8002fde:	e009      	b.n	8002ff4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fe0:	2308      	movs	r3, #8
 8002fe2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69fa      	ldr	r2, [r7, #28]
 8002fe8:	615a      	str	r2, [r3, #20]
          break;
 8002fea:	e003      	b.n	8002ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fec:	2300      	movs	r3, #0
 8002fee:	623b      	str	r3, [r7, #32]
          break;
 8002ff0:	e000      	b.n	8002ff4 <HAL_GPIO_Init+0x130>
          break;
 8002ff2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	2bff      	cmp	r3, #255	; 0xff
 8002ff8:	d801      	bhi.n	8002ffe <HAL_GPIO_Init+0x13a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	e001      	b.n	8003002 <HAL_GPIO_Init+0x13e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3304      	adds	r3, #4
 8003002:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	2bff      	cmp	r3, #255	; 0xff
 8003008:	d802      	bhi.n	8003010 <HAL_GPIO_Init+0x14c>
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	e002      	b.n	8003016 <HAL_GPIO_Init+0x152>
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	3b08      	subs	r3, #8
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	210f      	movs	r1, #15
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	fa01 f303 	lsl.w	r3, r1, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	401a      	ands	r2, r3
 8003028:	6a39      	ldr	r1, [r7, #32]
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	fa01 f303 	lsl.w	r3, r1, r3
 8003030:	431a      	orrs	r2, r3
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 80b1 	beq.w	80031a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003044:	4b4d      	ldr	r3, [pc, #308]	; (800317c <HAL_GPIO_Init+0x2b8>)
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	4a4c      	ldr	r2, [pc, #304]	; (800317c <HAL_GPIO_Init+0x2b8>)
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	6193      	str	r3, [r2, #24]
 8003050:	4b4a      	ldr	r3, [pc, #296]	; (800317c <HAL_GPIO_Init+0x2b8>)
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	60bb      	str	r3, [r7, #8]
 800305a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800305c:	4a48      	ldr	r2, [pc, #288]	; (8003180 <HAL_GPIO_Init+0x2bc>)
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	089b      	lsrs	r3, r3, #2
 8003062:	3302      	adds	r3, #2
 8003064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003068:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	220f      	movs	r2, #15
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4013      	ands	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a40      	ldr	r2, [pc, #256]	; (8003184 <HAL_GPIO_Init+0x2c0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d013      	beq.n	80030b0 <HAL_GPIO_Init+0x1ec>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a3f      	ldr	r2, [pc, #252]	; (8003188 <HAL_GPIO_Init+0x2c4>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d00d      	beq.n	80030ac <HAL_GPIO_Init+0x1e8>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a3e      	ldr	r2, [pc, #248]	; (800318c <HAL_GPIO_Init+0x2c8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d007      	beq.n	80030a8 <HAL_GPIO_Init+0x1e4>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a3d      	ldr	r2, [pc, #244]	; (8003190 <HAL_GPIO_Init+0x2cc>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d101      	bne.n	80030a4 <HAL_GPIO_Init+0x1e0>
 80030a0:	2303      	movs	r3, #3
 80030a2:	e006      	b.n	80030b2 <HAL_GPIO_Init+0x1ee>
 80030a4:	2304      	movs	r3, #4
 80030a6:	e004      	b.n	80030b2 <HAL_GPIO_Init+0x1ee>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e002      	b.n	80030b2 <HAL_GPIO_Init+0x1ee>
 80030ac:	2301      	movs	r3, #1
 80030ae:	e000      	b.n	80030b2 <HAL_GPIO_Init+0x1ee>
 80030b0:	2300      	movs	r3, #0
 80030b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b4:	f002 0203 	and.w	r2, r2, #3
 80030b8:	0092      	lsls	r2, r2, #2
 80030ba:	4093      	lsls	r3, r2
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030c2:	492f      	ldr	r1, [pc, #188]	; (8003180 <HAL_GPIO_Init+0x2bc>)
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	089b      	lsrs	r3, r3, #2
 80030c8:	3302      	adds	r3, #2
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d006      	beq.n	80030ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030dc:	4b2d      	ldr	r3, [pc, #180]	; (8003194 <HAL_GPIO_Init+0x2d0>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	492c      	ldr	r1, [pc, #176]	; (8003194 <HAL_GPIO_Init+0x2d0>)
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	600b      	str	r3, [r1, #0]
 80030e8:	e006      	b.n	80030f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030ea:	4b2a      	ldr	r3, [pc, #168]	; (8003194 <HAL_GPIO_Init+0x2d0>)
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	4928      	ldr	r1, [pc, #160]	; (8003194 <HAL_GPIO_Init+0x2d0>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d006      	beq.n	8003112 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003104:	4b23      	ldr	r3, [pc, #140]	; (8003194 <HAL_GPIO_Init+0x2d0>)
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	4922      	ldr	r1, [pc, #136]	; (8003194 <HAL_GPIO_Init+0x2d0>)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]
 8003110:	e006      	b.n	8003120 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003112:	4b20      	ldr	r3, [pc, #128]	; (8003194 <HAL_GPIO_Init+0x2d0>)
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	43db      	mvns	r3, r3
 800311a:	491e      	ldr	r1, [pc, #120]	; (8003194 <HAL_GPIO_Init+0x2d0>)
 800311c:	4013      	ands	r3, r2
 800311e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d006      	beq.n	800313a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800312c:	4b19      	ldr	r3, [pc, #100]	; (8003194 <HAL_GPIO_Init+0x2d0>)
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	4918      	ldr	r1, [pc, #96]	; (8003194 <HAL_GPIO_Init+0x2d0>)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	4313      	orrs	r3, r2
 8003136:	608b      	str	r3, [r1, #8]
 8003138:	e006      	b.n	8003148 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800313a:	4b16      	ldr	r3, [pc, #88]	; (8003194 <HAL_GPIO_Init+0x2d0>)
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	43db      	mvns	r3, r3
 8003142:	4914      	ldr	r1, [pc, #80]	; (8003194 <HAL_GPIO_Init+0x2d0>)
 8003144:	4013      	ands	r3, r2
 8003146:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d021      	beq.n	8003198 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003154:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <HAL_GPIO_Init+0x2d0>)
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	490e      	ldr	r1, [pc, #56]	; (8003194 <HAL_GPIO_Init+0x2d0>)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	60cb      	str	r3, [r1, #12]
 8003160:	e021      	b.n	80031a6 <HAL_GPIO_Init+0x2e2>
 8003162:	bf00      	nop
 8003164:	10320000 	.word	0x10320000
 8003168:	10310000 	.word	0x10310000
 800316c:	10220000 	.word	0x10220000
 8003170:	10210000 	.word	0x10210000
 8003174:	10120000 	.word	0x10120000
 8003178:	10110000 	.word	0x10110000
 800317c:	40021000 	.word	0x40021000
 8003180:	40010000 	.word	0x40010000
 8003184:	40010800 	.word	0x40010800
 8003188:	40010c00 	.word	0x40010c00
 800318c:	40011000 	.word	0x40011000
 8003190:	40011400 	.word	0x40011400
 8003194:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <HAL_GPIO_Init+0x304>)
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	43db      	mvns	r3, r3
 80031a0:	4909      	ldr	r1, [pc, #36]	; (80031c8 <HAL_GPIO_Init+0x304>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	3301      	adds	r3, #1
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	fa22 f303 	lsr.w	r3, r2, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f47f ae8e 	bne.w	8002ed8 <HAL_GPIO_Init+0x14>
  }
}
 80031bc:	bf00      	nop
 80031be:	bf00      	nop
 80031c0:	372c      	adds	r7, #44	; 0x2c
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	40010400 	.word	0x40010400

080031cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	807b      	strh	r3, [r7, #2]
 80031d8:	4613      	mov	r3, r2
 80031da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031dc:	787b      	ldrb	r3, [r7, #1]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031e2:	887a      	ldrh	r2, [r7, #2]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031e8:	e003      	b.n	80031f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031ea:	887b      	ldrh	r3, [r7, #2]
 80031ec:	041a      	lsls	r2, r3, #16
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	611a      	str	r2, [r3, #16]
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800320e:	887a      	ldrh	r2, [r7, #2]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4013      	ands	r3, r2
 8003214:	041a      	lsls	r2, r3, #16
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	43d9      	mvns	r1, r3
 800321a:	887b      	ldrh	r3, [r7, #2]
 800321c:	400b      	ands	r3, r1
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	611a      	str	r2, [r3, #16]
}
 8003224:	bf00      	nop
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr
	...

08003230 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e12b      	b.n	800349a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fe fb98 	bl	800198c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2224      	movs	r2, #36	; 0x24
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003282:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003292:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003294:	f000 fce4 	bl	8003c60 <HAL_RCC_GetPCLK1Freq>
 8003298:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4a81      	ldr	r2, [pc, #516]	; (80034a4 <HAL_I2C_Init+0x274>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d807      	bhi.n	80032b4 <HAL_I2C_Init+0x84>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4a80      	ldr	r2, [pc, #512]	; (80034a8 <HAL_I2C_Init+0x278>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	bf94      	ite	ls
 80032ac:	2301      	movls	r3, #1
 80032ae:	2300      	movhi	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	e006      	b.n	80032c2 <HAL_I2C_Init+0x92>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4a7d      	ldr	r2, [pc, #500]	; (80034ac <HAL_I2C_Init+0x27c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	bf94      	ite	ls
 80032bc:	2301      	movls	r3, #1
 80032be:	2300      	movhi	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e0e7      	b.n	800349a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4a78      	ldr	r2, [pc, #480]	; (80034b0 <HAL_I2C_Init+0x280>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	0c9b      	lsrs	r3, r3, #18
 80032d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4a6a      	ldr	r2, [pc, #424]	; (80034a4 <HAL_I2C_Init+0x274>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d802      	bhi.n	8003304 <HAL_I2C_Init+0xd4>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	3301      	adds	r3, #1
 8003302:	e009      	b.n	8003318 <HAL_I2C_Init+0xe8>
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800330a:	fb02 f303 	mul.w	r3, r2, r3
 800330e:	4a69      	ldr	r2, [pc, #420]	; (80034b4 <HAL_I2C_Init+0x284>)
 8003310:	fba2 2303 	umull	r2, r3, r2, r3
 8003314:	099b      	lsrs	r3, r3, #6
 8003316:	3301      	adds	r3, #1
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	430b      	orrs	r3, r1
 800331e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800332a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	495c      	ldr	r1, [pc, #368]	; (80034a4 <HAL_I2C_Init+0x274>)
 8003334:	428b      	cmp	r3, r1
 8003336:	d819      	bhi.n	800336c <HAL_I2C_Init+0x13c>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	1e59      	subs	r1, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	fbb1 f3f3 	udiv	r3, r1, r3
 8003346:	1c59      	adds	r1, r3, #1
 8003348:	f640 73fc 	movw	r3, #4092	; 0xffc
 800334c:	400b      	ands	r3, r1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_I2C_Init+0x138>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1e59      	subs	r1, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003360:	3301      	adds	r3, #1
 8003362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003366:	e051      	b.n	800340c <HAL_I2C_Init+0x1dc>
 8003368:	2304      	movs	r3, #4
 800336a:	e04f      	b.n	800340c <HAL_I2C_Init+0x1dc>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d111      	bne.n	8003398 <HAL_I2C_Init+0x168>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1e58      	subs	r0, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6859      	ldr	r1, [r3, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	440b      	add	r3, r1
 8003382:	fbb0 f3f3 	udiv	r3, r0, r3
 8003386:	3301      	adds	r3, #1
 8003388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338c:	2b00      	cmp	r3, #0
 800338e:	bf0c      	ite	eq
 8003390:	2301      	moveq	r3, #1
 8003392:	2300      	movne	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	e012      	b.n	80033be <HAL_I2C_Init+0x18e>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1e58      	subs	r0, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6859      	ldr	r1, [r3, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	0099      	lsls	r1, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ae:	3301      	adds	r3, #1
 80033b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf0c      	ite	eq
 80033b8:	2301      	moveq	r3, #1
 80033ba:	2300      	movne	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_Init+0x196>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e022      	b.n	800340c <HAL_I2C_Init+0x1dc>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10e      	bne.n	80033ec <HAL_I2C_Init+0x1bc>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1e58      	subs	r0, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6859      	ldr	r1, [r3, #4]
 80033d6:	460b      	mov	r3, r1
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	440b      	add	r3, r1
 80033dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e0:	3301      	adds	r3, #1
 80033e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ea:	e00f      	b.n	800340c <HAL_I2C_Init+0x1dc>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1e58      	subs	r0, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	0099      	lsls	r1, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003402:	3301      	adds	r3, #1
 8003404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003408:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	6809      	ldr	r1, [r1, #0]
 8003410:	4313      	orrs	r3, r2
 8003412:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69da      	ldr	r2, [r3, #28]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800343a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6911      	ldr	r1, [r2, #16]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68d2      	ldr	r2, [r2, #12]
 8003446:	4311      	orrs	r1, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6812      	ldr	r2, [r2, #0]
 800344c:	430b      	orrs	r3, r1
 800344e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	000186a0 	.word	0x000186a0
 80034a8:	001e847f 	.word	0x001e847f
 80034ac:	003d08ff 	.word	0x003d08ff
 80034b0:	431bde83 	.word	0x431bde83
 80034b4:	10624dd3 	.word	0x10624dd3

080034b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e272      	b.n	80039b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 8087 	beq.w	80035e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034d8:	4b92      	ldr	r3, [pc, #584]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 030c 	and.w	r3, r3, #12
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d00c      	beq.n	80034fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034e4:	4b8f      	ldr	r3, [pc, #572]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 030c 	and.w	r3, r3, #12
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d112      	bne.n	8003516 <HAL_RCC_OscConfig+0x5e>
 80034f0:	4b8c      	ldr	r3, [pc, #560]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034fc:	d10b      	bne.n	8003516 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fe:	4b89      	ldr	r3, [pc, #548]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d06c      	beq.n	80035e4 <HAL_RCC_OscConfig+0x12c>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d168      	bne.n	80035e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e24c      	b.n	80039b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351e:	d106      	bne.n	800352e <HAL_RCC_OscConfig+0x76>
 8003520:	4b80      	ldr	r3, [pc, #512]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a7f      	ldr	r2, [pc, #508]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	e02e      	b.n	800358c <HAL_RCC_OscConfig+0xd4>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10c      	bne.n	8003550 <HAL_RCC_OscConfig+0x98>
 8003536:	4b7b      	ldr	r3, [pc, #492]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a7a      	ldr	r2, [pc, #488]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 800353c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	4b78      	ldr	r3, [pc, #480]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a77      	ldr	r2, [pc, #476]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003548:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	e01d      	b.n	800358c <HAL_RCC_OscConfig+0xd4>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003558:	d10c      	bne.n	8003574 <HAL_RCC_OscConfig+0xbc>
 800355a:	4b72      	ldr	r3, [pc, #456]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a71      	ldr	r2, [pc, #452]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	4b6f      	ldr	r3, [pc, #444]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a6e      	ldr	r2, [pc, #440]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 800356c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	e00b      	b.n	800358c <HAL_RCC_OscConfig+0xd4>
 8003574:	4b6b      	ldr	r3, [pc, #428]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a6a      	ldr	r2, [pc, #424]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 800357a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	4b68      	ldr	r3, [pc, #416]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a67      	ldr	r2, [pc, #412]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800358a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d013      	beq.n	80035bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003594:	f7fe fca0 	bl	8001ed8 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800359c:	f7fe fc9c 	bl	8001ed8 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b64      	cmp	r3, #100	; 0x64
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e200      	b.n	80039b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	4b5d      	ldr	r3, [pc, #372]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0f0      	beq.n	800359c <HAL_RCC_OscConfig+0xe4>
 80035ba:	e014      	b.n	80035e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7fe fc8c 	bl	8001ed8 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c4:	f7fe fc88 	bl	8001ed8 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	; 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e1ec      	b.n	80039b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d6:	4b53      	ldr	r3, [pc, #332]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x10c>
 80035e2:	e000      	b.n	80035e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d063      	beq.n	80036ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035f2:	4b4c      	ldr	r3, [pc, #304]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00b      	beq.n	8003616 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035fe:	4b49      	ldr	r3, [pc, #292]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	2b08      	cmp	r3, #8
 8003608:	d11c      	bne.n	8003644 <HAL_RCC_OscConfig+0x18c>
 800360a:	4b46      	ldr	r3, [pc, #280]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d116      	bne.n	8003644 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003616:	4b43      	ldr	r3, [pc, #268]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <HAL_RCC_OscConfig+0x176>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d001      	beq.n	800362e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e1c0      	b.n	80039b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362e:	4b3d      	ldr	r3, [pc, #244]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	4939      	ldr	r1, [pc, #228]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003642:	e03a      	b.n	80036ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d020      	beq.n	800368e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800364c:	4b36      	ldr	r3, [pc, #216]	; (8003728 <HAL_RCC_OscConfig+0x270>)
 800364e:	2201      	movs	r2, #1
 8003650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003652:	f7fe fc41 	bl	8001ed8 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800365a:	f7fe fc3d 	bl	8001ed8 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e1a1      	b.n	80039b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366c:	4b2d      	ldr	r3, [pc, #180]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0f0      	beq.n	800365a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003678:	4b2a      	ldr	r3, [pc, #168]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4927      	ldr	r1, [pc, #156]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003688:	4313      	orrs	r3, r2
 800368a:	600b      	str	r3, [r1, #0]
 800368c:	e015      	b.n	80036ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800368e:	4b26      	ldr	r3, [pc, #152]	; (8003728 <HAL_RCC_OscConfig+0x270>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003694:	f7fe fc20 	bl	8001ed8 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800369c:	f7fe fc1c 	bl	8001ed8 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e180      	b.n	80039b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ae:	4b1d      	ldr	r3, [pc, #116]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d03a      	beq.n	800373c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d019      	beq.n	8003702 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ce:	4b17      	ldr	r3, [pc, #92]	; (800372c <HAL_RCC_OscConfig+0x274>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d4:	f7fe fc00 	bl	8001ed8 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036dc:	f7fe fbfc 	bl	8001ed8 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e160      	b.n	80039b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ee:	4b0d      	ldr	r3, [pc, #52]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036fa:	2001      	movs	r0, #1
 80036fc:	f000 fb08 	bl	8003d10 <RCC_Delay>
 8003700:	e01c      	b.n	800373c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003702:	4b0a      	ldr	r3, [pc, #40]	; (800372c <HAL_RCC_OscConfig+0x274>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003708:	f7fe fbe6 	bl	8001ed8 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370e:	e00f      	b.n	8003730 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003710:	f7fe fbe2 	bl	8001ed8 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d908      	bls.n	8003730 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e146      	b.n	80039b0 <HAL_RCC_OscConfig+0x4f8>
 8003722:	bf00      	nop
 8003724:	40021000 	.word	0x40021000
 8003728:	42420000 	.word	0x42420000
 800372c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003730:	4b92      	ldr	r3, [pc, #584]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e9      	bne.n	8003710 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 80a6 	beq.w	8003896 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800374a:	2300      	movs	r3, #0
 800374c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800374e:	4b8b      	ldr	r3, [pc, #556]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10d      	bne.n	8003776 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800375a:	4b88      	ldr	r3, [pc, #544]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	4a87      	ldr	r2, [pc, #540]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003764:	61d3      	str	r3, [r2, #28]
 8003766:	4b85      	ldr	r3, [pc, #532]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376e:	60bb      	str	r3, [r7, #8]
 8003770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003772:	2301      	movs	r3, #1
 8003774:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003776:	4b82      	ldr	r3, [pc, #520]	; (8003980 <HAL_RCC_OscConfig+0x4c8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377e:	2b00      	cmp	r3, #0
 8003780:	d118      	bne.n	80037b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003782:	4b7f      	ldr	r3, [pc, #508]	; (8003980 <HAL_RCC_OscConfig+0x4c8>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a7e      	ldr	r2, [pc, #504]	; (8003980 <HAL_RCC_OscConfig+0x4c8>)
 8003788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800378e:	f7fe fba3 	bl	8001ed8 <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003796:	f7fe fb9f 	bl	8001ed8 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b64      	cmp	r3, #100	; 0x64
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e103      	b.n	80039b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a8:	4b75      	ldr	r3, [pc, #468]	; (8003980 <HAL_RCC_OscConfig+0x4c8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0f0      	beq.n	8003796 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d106      	bne.n	80037ca <HAL_RCC_OscConfig+0x312>
 80037bc:	4b6f      	ldr	r3, [pc, #444]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	4a6e      	ldr	r2, [pc, #440]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	6213      	str	r3, [r2, #32]
 80037c8:	e02d      	b.n	8003826 <HAL_RCC_OscConfig+0x36e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10c      	bne.n	80037ec <HAL_RCC_OscConfig+0x334>
 80037d2:	4b6a      	ldr	r3, [pc, #424]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	4a69      	ldr	r2, [pc, #420]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 80037d8:	f023 0301 	bic.w	r3, r3, #1
 80037dc:	6213      	str	r3, [r2, #32]
 80037de:	4b67      	ldr	r3, [pc, #412]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	4a66      	ldr	r2, [pc, #408]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 80037e4:	f023 0304 	bic.w	r3, r3, #4
 80037e8:	6213      	str	r3, [r2, #32]
 80037ea:	e01c      	b.n	8003826 <HAL_RCC_OscConfig+0x36e>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	2b05      	cmp	r3, #5
 80037f2:	d10c      	bne.n	800380e <HAL_RCC_OscConfig+0x356>
 80037f4:	4b61      	ldr	r3, [pc, #388]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	4a60      	ldr	r2, [pc, #384]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 80037fa:	f043 0304 	orr.w	r3, r3, #4
 80037fe:	6213      	str	r3, [r2, #32]
 8003800:	4b5e      	ldr	r3, [pc, #376]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	4a5d      	ldr	r2, [pc, #372]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	6213      	str	r3, [r2, #32]
 800380c:	e00b      	b.n	8003826 <HAL_RCC_OscConfig+0x36e>
 800380e:	4b5b      	ldr	r3, [pc, #364]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	4a5a      	ldr	r2, [pc, #360]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003814:	f023 0301 	bic.w	r3, r3, #1
 8003818:	6213      	str	r3, [r2, #32]
 800381a:	4b58      	ldr	r3, [pc, #352]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	4a57      	ldr	r2, [pc, #348]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003820:	f023 0304 	bic.w	r3, r3, #4
 8003824:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d015      	beq.n	800385a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800382e:	f7fe fb53 	bl	8001ed8 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003834:	e00a      	b.n	800384c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003836:	f7fe fb4f 	bl	8001ed8 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	f241 3288 	movw	r2, #5000	; 0x1388
 8003844:	4293      	cmp	r3, r2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e0b1      	b.n	80039b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384c:	4b4b      	ldr	r3, [pc, #300]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0ee      	beq.n	8003836 <HAL_RCC_OscConfig+0x37e>
 8003858:	e014      	b.n	8003884 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385a:	f7fe fb3d 	bl	8001ed8 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003860:	e00a      	b.n	8003878 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003862:	f7fe fb39 	bl	8001ed8 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003870:	4293      	cmp	r3, r2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e09b      	b.n	80039b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003878:	4b40      	ldr	r3, [pc, #256]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1ee      	bne.n	8003862 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003884:	7dfb      	ldrb	r3, [r7, #23]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d105      	bne.n	8003896 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800388a:	4b3c      	ldr	r3, [pc, #240]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	4a3b      	ldr	r2, [pc, #236]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003894:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 8087 	beq.w	80039ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038a0:	4b36      	ldr	r3, [pc, #216]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 030c 	and.w	r3, r3, #12
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d061      	beq.n	8003970 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d146      	bne.n	8003942 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b4:	4b33      	ldr	r3, [pc, #204]	; (8003984 <HAL_RCC_OscConfig+0x4cc>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ba:	f7fe fb0d 	bl	8001ed8 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c2:	f7fe fb09 	bl	8001ed8 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e06d      	b.n	80039b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d4:	4b29      	ldr	r3, [pc, #164]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1f0      	bne.n	80038c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e8:	d108      	bne.n	80038fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038ea:	4b24      	ldr	r3, [pc, #144]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	4921      	ldr	r1, [pc, #132]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038fc:	4b1f      	ldr	r3, [pc, #124]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a19      	ldr	r1, [r3, #32]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	430b      	orrs	r3, r1
 800390e:	491b      	ldr	r1, [pc, #108]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003910:	4313      	orrs	r3, r2
 8003912:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003914:	4b1b      	ldr	r3, [pc, #108]	; (8003984 <HAL_RCC_OscConfig+0x4cc>)
 8003916:	2201      	movs	r2, #1
 8003918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391a:	f7fe fadd 	bl	8001ed8 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003922:	f7fe fad9 	bl	8001ed8 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e03d      	b.n	80039b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003934:	4b11      	ldr	r3, [pc, #68]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCC_OscConfig+0x46a>
 8003940:	e035      	b.n	80039ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003942:	4b10      	ldr	r3, [pc, #64]	; (8003984 <HAL_RCC_OscConfig+0x4cc>)
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003948:	f7fe fac6 	bl	8001ed8 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003950:	f7fe fac2 	bl	8001ed8 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e026      	b.n	80039b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003962:	4b06      	ldr	r3, [pc, #24]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0x498>
 800396e:	e01e      	b.n	80039ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d107      	bne.n	8003988 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e019      	b.n	80039b0 <HAL_RCC_OscConfig+0x4f8>
 800397c:	40021000 	.word	0x40021000
 8003980:	40007000 	.word	0x40007000
 8003984:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <HAL_RCC_OscConfig+0x500>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	429a      	cmp	r2, r3
 800399a:	d106      	bne.n	80039aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d001      	beq.n	80039ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e000      	b.n	80039b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40021000 	.word	0x40021000

080039bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0d0      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039d0:	4b6a      	ldr	r3, [pc, #424]	; (8003b7c <HAL_RCC_ClockConfig+0x1c0>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d910      	bls.n	8003a00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039de:	4b67      	ldr	r3, [pc, #412]	; (8003b7c <HAL_RCC_ClockConfig+0x1c0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f023 0207 	bic.w	r2, r3, #7
 80039e6:	4965      	ldr	r1, [pc, #404]	; (8003b7c <HAL_RCC_ClockConfig+0x1c0>)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ee:	4b63      	ldr	r3, [pc, #396]	; (8003b7c <HAL_RCC_ClockConfig+0x1c0>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d001      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0b8      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d020      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a18:	4b59      	ldr	r3, [pc, #356]	; (8003b80 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	4a58      	ldr	r2, [pc, #352]	; (8003b80 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0308 	and.w	r3, r3, #8
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a30:	4b53      	ldr	r3, [pc, #332]	; (8003b80 <HAL_RCC_ClockConfig+0x1c4>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	4a52      	ldr	r2, [pc, #328]	; (8003b80 <HAL_RCC_ClockConfig+0x1c4>)
 8003a36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a3c:	4b50      	ldr	r3, [pc, #320]	; (8003b80 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	494d      	ldr	r1, [pc, #308]	; (8003b80 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d040      	beq.n	8003adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d107      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a62:	4b47      	ldr	r3, [pc, #284]	; (8003b80 <HAL_RCC_ClockConfig+0x1c4>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d115      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e07f      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d107      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a7a:	4b41      	ldr	r3, [pc, #260]	; (8003b80 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d109      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e073      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8a:	4b3d      	ldr	r3, [pc, #244]	; (8003b80 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e06b      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a9a:	4b39      	ldr	r3, [pc, #228]	; (8003b80 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f023 0203 	bic.w	r2, r3, #3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	4936      	ldr	r1, [pc, #216]	; (8003b80 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aac:	f7fe fa14 	bl	8001ed8 <HAL_GetTick>
 8003ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab2:	e00a      	b.n	8003aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab4:	f7fe fa10 	bl	8001ed8 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e053      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aca:	4b2d      	ldr	r3, [pc, #180]	; (8003b80 <HAL_RCC_ClockConfig+0x1c4>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f003 020c 	and.w	r2, r3, #12
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d1eb      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003adc:	4b27      	ldr	r3, [pc, #156]	; (8003b7c <HAL_RCC_ClockConfig+0x1c0>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d210      	bcs.n	8003b0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aea:	4b24      	ldr	r3, [pc, #144]	; (8003b7c <HAL_RCC_ClockConfig+0x1c0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f023 0207 	bic.w	r2, r3, #7
 8003af2:	4922      	ldr	r1, [pc, #136]	; (8003b7c <HAL_RCC_ClockConfig+0x1c0>)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afa:	4b20      	ldr	r3, [pc, #128]	; (8003b7c <HAL_RCC_ClockConfig+0x1c0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e032      	b.n	8003b72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b18:	4b19      	ldr	r3, [pc, #100]	; (8003b80 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	4916      	ldr	r1, [pc, #88]	; (8003b80 <HAL_RCC_ClockConfig+0x1c4>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d009      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b36:	4b12      	ldr	r3, [pc, #72]	; (8003b80 <HAL_RCC_ClockConfig+0x1c4>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	490e      	ldr	r1, [pc, #56]	; (8003b80 <HAL_RCC_ClockConfig+0x1c4>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b4a:	f000 f821 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <HAL_RCC_ClockConfig+0x1c4>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	091b      	lsrs	r3, r3, #4
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	490a      	ldr	r1, [pc, #40]	; (8003b84 <HAL_RCC_ClockConfig+0x1c8>)
 8003b5c:	5ccb      	ldrb	r3, [r1, r3]
 8003b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b62:	4a09      	ldr	r2, [pc, #36]	; (8003b88 <HAL_RCC_ClockConfig+0x1cc>)
 8003b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b66:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <HAL_RCC_ClockConfig+0x1d0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fd ffee 	bl	8001b4c <HAL_InitTick>

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40022000 	.word	0x40022000
 8003b80:	40021000 	.word	0x40021000
 8003b84:	08009da0 	.word	0x08009da0
 8003b88:	20000008 	.word	0x20000008
 8003b8c:	2000000c 	.word	0x2000000c

08003b90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b90:	b490      	push	{r4, r7}
 8003b92:	b08a      	sub	sp, #40	; 0x28
 8003b94:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b96:	4b29      	ldr	r3, [pc, #164]	; (8003c3c <HAL_RCC_GetSysClockFreq+0xac>)
 8003b98:	1d3c      	adds	r4, r7, #4
 8003b9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ba0:	f240 2301 	movw	r3, #513	; 0x201
 8003ba4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61fb      	str	r3, [r7, #28]
 8003baa:	2300      	movs	r3, #0
 8003bac:	61bb      	str	r3, [r7, #24]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003bba:	4b21      	ldr	r3, [pc, #132]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d002      	beq.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x40>
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d003      	beq.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x46>
 8003bce:	e02b      	b.n	8003c28 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bd0:	4b1c      	ldr	r3, [pc, #112]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bd2:	623b      	str	r3, [r7, #32]
      break;
 8003bd4:	e02b      	b.n	8003c2e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	0c9b      	lsrs	r3, r3, #18
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	3328      	adds	r3, #40	; 0x28
 8003be0:	443b      	add	r3, r7
 8003be2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003be6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d012      	beq.n	8003c18 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bf2:	4b13      	ldr	r3, [pc, #76]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	0c5b      	lsrs	r3, r3, #17
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	3328      	adds	r3, #40	; 0x28
 8003bfe:	443b      	add	r3, r7
 8003c00:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c04:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	4a0e      	ldr	r2, [pc, #56]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c0a:	fb03 f202 	mul.w	r2, r3, r2
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
 8003c16:	e004      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	4a0b      	ldr	r2, [pc, #44]	; (8003c48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c1c:	fb02 f303 	mul.w	r3, r2, r3
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	623b      	str	r3, [r7, #32]
      break;
 8003c26:	e002      	b.n	8003c2e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c28:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c2a:	623b      	str	r3, [r7, #32]
      break;
 8003c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3728      	adds	r7, #40	; 0x28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc90      	pop	{r4, r7}
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	08009d78 	.word	0x08009d78
 8003c40:	40021000 	.word	0x40021000
 8003c44:	007a1200 	.word	0x007a1200
 8003c48:	003d0900 	.word	0x003d0900

08003c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c50:	4b02      	ldr	r3, [pc, #8]	; (8003c5c <HAL_RCC_GetHCLKFreq+0x10>)
 8003c52:	681b      	ldr	r3, [r3, #0]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr
 8003c5c:	20000008 	.word	0x20000008

08003c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c64:	f7ff fff2 	bl	8003c4c <HAL_RCC_GetHCLKFreq>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	0a1b      	lsrs	r3, r3, #8
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	4903      	ldr	r1, [pc, #12]	; (8003c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c76:	5ccb      	ldrb	r3, [r1, r3]
 8003c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40021000 	.word	0x40021000
 8003c84:	08009db0 	.word	0x08009db0

08003c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c8c:	f7ff ffde 	bl	8003c4c <HAL_RCC_GetHCLKFreq>
 8003c90:	4602      	mov	r2, r0
 8003c92:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	0adb      	lsrs	r3, r3, #11
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	4903      	ldr	r1, [pc, #12]	; (8003cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	08009db0 	.word	0x08009db0

08003cb0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	220f      	movs	r2, #15
 8003cbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cc0:	4b11      	ldr	r3, [pc, #68]	; (8003d08 <HAL_RCC_GetClockConfig+0x58>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 0203 	and.w	r2, r3, #3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ccc:	4b0e      	ldr	r3, [pc, #56]	; (8003d08 <HAL_RCC_GetClockConfig+0x58>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <HAL_RCC_GetClockConfig+0x58>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003ce4:	4b08      	ldr	r3, [pc, #32]	; (8003d08 <HAL_RCC_GetClockConfig+0x58>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	08db      	lsrs	r3, r3, #3
 8003cea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cf2:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <HAL_RCC_GetClockConfig+0x5c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0207 	and.w	r2, r3, #7
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	40022000 	.word	0x40022000

08003d10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d18:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <RCC_Delay+0x34>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <RCC_Delay+0x38>)
 8003d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d22:	0a5b      	lsrs	r3, r3, #9
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	fb02 f303 	mul.w	r3, r2, r3
 8003d2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d2c:	bf00      	nop
  }
  while (Delay --);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	1e5a      	subs	r2, r3, #1
 8003d32:	60fa      	str	r2, [r7, #12]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f9      	bne.n	8003d2c <RCC_Delay+0x1c>
}
 8003d38:	bf00      	nop
 8003d3a:	bf00      	nop
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr
 8003d44:	20000008 	.word	0x20000008
 8003d48:	10624dd3 	.word	0x10624dd3

08003d4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	613b      	str	r3, [r7, #16]
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d07d      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d6c:	4b4f      	ldr	r3, [pc, #316]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10d      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d78:	4b4c      	ldr	r3, [pc, #304]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	4a4b      	ldr	r2, [pc, #300]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d82:	61d3      	str	r3, [r2, #28]
 8003d84:	4b49      	ldr	r3, [pc, #292]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	60bb      	str	r3, [r7, #8]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d90:	2301      	movs	r3, #1
 8003d92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d94:	4b46      	ldr	r3, [pc, #280]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d118      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003da0:	4b43      	ldr	r3, [pc, #268]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a42      	ldr	r2, [pc, #264]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003daa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dac:	f7fe f894 	bl	8001ed8 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db2:	e008      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db4:	f7fe f890 	bl	8001ed8 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b64      	cmp	r3, #100	; 0x64
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e06d      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc6:	4b3a      	ldr	r3, [pc, #232]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dd2:	4b36      	ldr	r3, [pc, #216]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dda:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d02e      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d027      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003df0:	4b2e      	ldr	r3, [pc, #184]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dfa:	4b2e      	ldr	r3, [pc, #184]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e00:	4b2c      	ldr	r3, [pc, #176]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e06:	4a29      	ldr	r2, [pc, #164]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d014      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e16:	f7fe f85f 	bl	8001ed8 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e1c:	e00a      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1e:	f7fe f85b 	bl	8001ed8 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e036      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e34:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0ee      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e40:	4b1a      	ldr	r3, [pc, #104]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	4917      	ldr	r1, [pc, #92]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e52:	7dfb      	ldrb	r3, [r7, #23]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d105      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e58:	4b14      	ldr	r3, [pc, #80]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	4a13      	ldr	r2, [pc, #76]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d008      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e70:	4b0e      	ldr	r3, [pc, #56]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	490b      	ldr	r1, [pc, #44]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0310 	and.w	r3, r3, #16
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d008      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e8e:	4b07      	ldr	r3, [pc, #28]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	4904      	ldr	r1, [pc, #16]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	40007000 	.word	0x40007000
 8003eb4:	42420440 	.word	0x42420440

08003eb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003eb8:	b590      	push	{r4, r7, lr}
 8003eba:	b08d      	sub	sp, #52	; 0x34
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ec0:	4b58      	ldr	r3, [pc, #352]	; (8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003ec2:	f107 040c 	add.w	r4, r7, #12
 8003ec6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ec8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ecc:	f240 2301 	movw	r3, #513	; 0x201
 8003ed0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eda:	2300      	movs	r3, #0
 8003edc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61fb      	str	r3, [r7, #28]
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b10      	cmp	r3, #16
 8003eea:	d00a      	beq.n	8003f02 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b10      	cmp	r3, #16
 8003ef0:	f200 808e 	bhi.w	8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d049      	beq.n	8003f8e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d079      	beq.n	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003f00:	e086      	b.n	8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8003f02:	4b49      	ldr	r3, [pc, #292]	; (8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003f08:	4b47      	ldr	r3, [pc, #284]	; (8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d07f      	beq.n	8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	0c9b      	lsrs	r3, r3, #18
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	3330      	adds	r3, #48	; 0x30
 8003f1e:	443b      	add	r3, r7
 8003f20:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f24:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d017      	beq.n	8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f30:	4b3d      	ldr	r3, [pc, #244]	; (8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	0c5b      	lsrs	r3, r3, #17
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	3330      	adds	r3, #48	; 0x30
 8003f3c:	443b      	add	r3, r7
 8003f3e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f42:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00d      	beq.n	8003f6a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003f4e:	4a37      	ldr	r2, [pc, #220]	; (800402c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	fb02 f303 	mul.w	r3, r2, r3
 8003f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f5e:	e004      	b.n	8003f6a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	4a33      	ldr	r2, [pc, #204]	; (8004030 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003f64:	fb02 f303 	mul.w	r3, r2, r3
 8003f68:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003f6a:	4b2f      	ldr	r3, [pc, #188]	; (8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f76:	d102      	bne.n	8003f7e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003f7c:	e04a      	b.n	8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	4a2c      	ldr	r2, [pc, #176]	; (8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003f84:	fba2 2303 	umull	r2, r3, r2, r3
 8003f88:	085b      	lsrs	r3, r3, #1
 8003f8a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003f8c:	e042      	b.n	8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003f8e:	4b26      	ldr	r3, [pc, #152]	; (8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f9e:	d108      	bne.n	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fb0:	e01f      	b.n	8003ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fbc:	d109      	bne.n	8003fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003fbe:	4b1a      	ldr	r3, [pc, #104]	; (8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003fca:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fd0:	e00f      	b.n	8003ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fdc:	d11c      	bne.n	8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003fde:	4b12      	ldr	r3, [pc, #72]	; (8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d016      	beq.n	8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003fea:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003fee:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003ff0:	e012      	b.n	8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003ff2:	e011      	b.n	8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003ff4:	f7ff fe48 	bl	8003c88 <HAL_RCC_GetPCLK2Freq>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	0b9b      	lsrs	r3, r3, #14
 8004000:	f003 0303 	and.w	r3, r3, #3
 8004004:	3301      	adds	r3, #1
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	fbb2 f3f3 	udiv	r3, r2, r3
 800400c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800400e:	e004      	b.n	800401a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004010:	bf00      	nop
 8004012:	e002      	b.n	800401a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004014:	bf00      	nop
 8004016:	e000      	b.n	800401a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004018:	bf00      	nop
    }
  }
  return (frequency);
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800401c:	4618      	mov	r0, r3
 800401e:	3734      	adds	r7, #52	; 0x34
 8004020:	46bd      	mov	sp, r7
 8004022:	bd90      	pop	{r4, r7, pc}
 8004024:	08009d88 	.word	0x08009d88
 8004028:	40021000 	.word	0x40021000
 800402c:	007a1200 	.word	0x007a1200
 8004030:	003d0900 	.word	0x003d0900
 8004034:	aaaaaaab 	.word	0xaaaaaaab

08004038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e041      	b.n	80040ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f839 	bl	80040d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	4619      	mov	r1, r3
 8004076:	4610      	mov	r0, r2
 8004078:	f000 f9b4 	bl	80043e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr

080040e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d001      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e03a      	b.n	8004176 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a18      	ldr	r2, [pc, #96]	; (8004180 <HAL_TIM_Base_Start_IT+0x98>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00e      	beq.n	8004140 <HAL_TIM_Base_Start_IT+0x58>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412a:	d009      	beq.n	8004140 <HAL_TIM_Base_Start_IT+0x58>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a14      	ldr	r2, [pc, #80]	; (8004184 <HAL_TIM_Base_Start_IT+0x9c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d004      	beq.n	8004140 <HAL_TIM_Base_Start_IT+0x58>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a13      	ldr	r2, [pc, #76]	; (8004188 <HAL_TIM_Base_Start_IT+0xa0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d111      	bne.n	8004164 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b06      	cmp	r3, #6
 8004150:	d010      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 0201 	orr.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004162:	e007      	b.n	8004174 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr
 8004180:	40012c00 	.word	0x40012c00
 8004184:	40000400 	.word	0x40000400
 8004188:	40000800 	.word	0x40000800

0800418c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d122      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d11b      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f06f 0202 	mvn.w	r2, #2
 80041b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f8ed 	bl	80043ae <HAL_TIM_IC_CaptureCallback>
 80041d4:	e005      	b.n	80041e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f8e0 	bl	800439c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f8ef 	bl	80043c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f003 0304 	and.w	r3, r3, #4
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d122      	bne.n	800423c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b04      	cmp	r3, #4
 8004202:	d11b      	bne.n	800423c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0204 	mvn.w	r2, #4
 800420c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2202      	movs	r2, #2
 8004212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f8c3 	bl	80043ae <HAL_TIM_IC_CaptureCallback>
 8004228:	e005      	b.n	8004236 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f8b6 	bl	800439c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f8c5 	bl	80043c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b08      	cmp	r3, #8
 8004248:	d122      	bne.n	8004290 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b08      	cmp	r3, #8
 8004256:	d11b      	bne.n	8004290 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f06f 0208 	mvn.w	r2, #8
 8004260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2204      	movs	r2, #4
 8004266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f899 	bl	80043ae <HAL_TIM_IC_CaptureCallback>
 800427c:	e005      	b.n	800428a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f88c 	bl	800439c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f89b 	bl	80043c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0310 	and.w	r3, r3, #16
 800429a:	2b10      	cmp	r3, #16
 800429c:	d122      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 0310 	and.w	r3, r3, #16
 80042a8:	2b10      	cmp	r3, #16
 80042aa:	d11b      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f06f 0210 	mvn.w	r2, #16
 80042b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2208      	movs	r2, #8
 80042ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f86f 	bl	80043ae <HAL_TIM_IC_CaptureCallback>
 80042d0:	e005      	b.n	80042de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f862 	bl	800439c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f871 	bl	80043c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d10e      	bne.n	8004310 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d107      	bne.n	8004310 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f06f 0201 	mvn.w	r2, #1
 8004308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fd fa7c 	bl	8001808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431a:	2b80      	cmp	r3, #128	; 0x80
 800431c:	d10e      	bne.n	800433c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004328:	2b80      	cmp	r3, #128	; 0x80
 800432a:	d107      	bne.n	800433c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f8bf 	bl	80044ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004346:	2b40      	cmp	r3, #64	; 0x40
 8004348:	d10e      	bne.n	8004368 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004354:	2b40      	cmp	r3, #64	; 0x40
 8004356:	d107      	bne.n	8004368 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f835 	bl	80043d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b20      	cmp	r3, #32
 8004374:	d10e      	bne.n	8004394 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f003 0320 	and.w	r3, r3, #32
 8004380:	2b20      	cmp	r3, #32
 8004382:	d107      	bne.n	8004394 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0220 	mvn.w	r2, #32
 800438c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f88a 	bl	80044a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004394:	bf00      	nop
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr

080043ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr

080043d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr

080043e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a29      	ldr	r2, [pc, #164]	; (800449c <TIM_Base_SetConfig+0xb8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d00b      	beq.n	8004414 <TIM_Base_SetConfig+0x30>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004402:	d007      	beq.n	8004414 <TIM_Base_SetConfig+0x30>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a26      	ldr	r2, [pc, #152]	; (80044a0 <TIM_Base_SetConfig+0xbc>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d003      	beq.n	8004414 <TIM_Base_SetConfig+0x30>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a25      	ldr	r2, [pc, #148]	; (80044a4 <TIM_Base_SetConfig+0xc0>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d108      	bne.n	8004426 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a1c      	ldr	r2, [pc, #112]	; (800449c <TIM_Base_SetConfig+0xb8>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d00b      	beq.n	8004446 <TIM_Base_SetConfig+0x62>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004434:	d007      	beq.n	8004446 <TIM_Base_SetConfig+0x62>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a19      	ldr	r2, [pc, #100]	; (80044a0 <TIM_Base_SetConfig+0xbc>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d003      	beq.n	8004446 <TIM_Base_SetConfig+0x62>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a18      	ldr	r2, [pc, #96]	; (80044a4 <TIM_Base_SetConfig+0xc0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d108      	bne.n	8004458 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800444c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4313      	orrs	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a07      	ldr	r2, [pc, #28]	; (800449c <TIM_Base_SetConfig+0xb8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d103      	bne.n	800448c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	615a      	str	r2, [r3, #20]
}
 8004492:	bf00      	nop
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr
 800449c:	40012c00 	.word	0x40012c00
 80044a0:	40000400 	.word	0x40000400
 80044a4:	40000800 	.word	0x40000800

080044a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	4770      	bx	lr

080044ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr

080044cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e03f      	b.n	800455e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d106      	bne.n	80044f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7fd fa9a 	bl	8001a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2224      	movs	r2, #36	; 0x24
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800450e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 fc85 	bl	8004e20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	691a      	ldr	r2, [r3, #16]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004524:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	695a      	ldr	r2, [r3, #20]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004534:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004544:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b08a      	sub	sp, #40	; 0x28
 800456a:	af02      	add	r7, sp, #8
 800456c:	60f8      	str	r0, [r7, #12]
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	603b      	str	r3, [r7, #0]
 8004572:	4613      	mov	r3, r2
 8004574:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b20      	cmp	r3, #32
 8004584:	d17c      	bne.n	8004680 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <HAL_UART_Transmit+0x2c>
 800458c:	88fb      	ldrh	r3, [r7, #6]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e075      	b.n	8004682 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_UART_Transmit+0x3e>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e06e      	b.n	8004682 <HAL_UART_Transmit+0x11c>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2221      	movs	r2, #33	; 0x21
 80045b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ba:	f7fd fc8d 	bl	8001ed8 <HAL_GetTick>
 80045be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	88fa      	ldrh	r2, [r7, #6]
 80045c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	88fa      	ldrh	r2, [r7, #6]
 80045ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d4:	d108      	bne.n	80045e8 <HAL_UART_Transmit+0x82>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d104      	bne.n	80045e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80045de:	2300      	movs	r3, #0
 80045e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	61bb      	str	r3, [r7, #24]
 80045e6:	e003      	b.n	80045f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045ec:	2300      	movs	r3, #0
 80045ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80045f8:	e02a      	b.n	8004650 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2200      	movs	r2, #0
 8004602:	2180      	movs	r1, #128	; 0x80
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 fa38 	bl	8004a7a <UART_WaitOnFlagUntilTimeout>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e036      	b.n	8004682 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10b      	bne.n	8004632 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004628:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	3302      	adds	r3, #2
 800462e:	61bb      	str	r3, [r7, #24]
 8004630:	e007      	b.n	8004642 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	781a      	ldrb	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	3301      	adds	r3, #1
 8004640:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004654:	b29b      	uxth	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1cf      	bne.n	80045fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2200      	movs	r2, #0
 8004662:	2140      	movs	r1, #64	; 0x40
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 fa08 	bl	8004a7a <UART_WaitOnFlagUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e006      	b.n	8004682 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	e000      	b.n	8004682 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004680:	2302      	movs	r3, #2
  }
}
 8004682:	4618      	mov	r0, r3
 8004684:	3720      	adds	r7, #32
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b084      	sub	sp, #16
 800468e:	af00      	add	r7, sp, #0
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	4613      	mov	r3, r2
 8004696:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d11d      	bne.n	80046e0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_UART_Receive_IT+0x26>
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e016      	b.n	80046e2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_UART_Receive_IT+0x38>
 80046be:	2302      	movs	r3, #2
 80046c0:	e00f      	b.n	80046e2 <HAL_UART_Receive_IT+0x58>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80046d0:	88fb      	ldrh	r3, [r7, #6]
 80046d2:	461a      	mov	r2, r3
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 fa19 	bl	8004b0e <UART_Start_Receive_IT>
 80046dc:	4603      	mov	r3, r0
 80046de:	e000      	b.n	80046e2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80046e0:	2302      	movs	r3, #2
  }
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08a      	sub	sp, #40	; 0x28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800470c:	2300      	movs	r3, #0
 800470e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004710:	2300      	movs	r3, #0
 8004712:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10d      	bne.n	800473e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	f003 0320 	and.w	r3, r3, #32
 8004728:	2b00      	cmp	r3, #0
 800472a:	d008      	beq.n	800473e <HAL_UART_IRQHandler+0x52>
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fac9 	bl	8004cce <UART_Receive_IT>
      return;
 800473c:	e17b      	b.n	8004a36 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 80b1 	beq.w	80048a8 <HAL_UART_IRQHandler+0x1bc>
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d105      	bne.n	800475c <HAL_UART_IRQHandler+0x70>
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 80a6 	beq.w	80048a8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <HAL_UART_IRQHandler+0x90>
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476c:	2b00      	cmp	r3, #0
 800476e:	d005      	beq.n	800477c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	f043 0201 	orr.w	r2, r3, #1
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <HAL_UART_IRQHandler+0xb0>
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	f043 0202 	orr.w	r2, r3, #2
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <HAL_UART_IRQHandler+0xd0>
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d005      	beq.n	80047bc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	f043 0204 	orr.w	r2, r3, #4
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00f      	beq.n	80047e6 <HAL_UART_IRQHandler+0xfa>
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	f003 0320 	and.w	r3, r3, #32
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d104      	bne.n	80047da <HAL_UART_IRQHandler+0xee>
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	f043 0208 	orr.w	r2, r3, #8
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 811e 	beq.w	8004a2c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d007      	beq.n	800480a <HAL_UART_IRQHandler+0x11e>
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 fa62 	bl	8004cce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004814:	2b00      	cmp	r3, #0
 8004816:	bf14      	ite	ne
 8004818:	2301      	movne	r3, #1
 800481a:	2300      	moveq	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d102      	bne.n	8004832 <HAL_UART_IRQHandler+0x146>
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d031      	beq.n	8004896 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f9a4 	bl	8004b80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	d023      	beq.n	800488e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	695a      	ldr	r2, [r3, #20]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004854:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485a:	2b00      	cmp	r3, #0
 800485c:	d013      	beq.n	8004886 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004862:	4a76      	ldr	r2, [pc, #472]	; (8004a3c <HAL_UART_IRQHandler+0x350>)
 8004864:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486a:	4618      	mov	r0, r3
 800486c:	f7fe f980 	bl	8002b70 <HAL_DMA_Abort_IT>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d016      	beq.n	80048a4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004880:	4610      	mov	r0, r2
 8004882:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004884:	e00e      	b.n	80048a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f8e3 	bl	8004a52 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800488c:	e00a      	b.n	80048a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f8df 	bl	8004a52 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004894:	e006      	b.n	80048a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f8db 	bl	8004a52 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80048a2:	e0c3      	b.n	8004a2c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a4:	bf00      	nop
    return;
 80048a6:	e0c1      	b.n	8004a2c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	f040 80a1 	bne.w	80049f4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	f003 0310 	and.w	r3, r3, #16
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 809b 	beq.w	80049f4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 8095 	beq.w	80049f4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d04e      	beq.n	800498c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80048f8:	8a3b      	ldrh	r3, [r7, #16]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 8098 	beq.w	8004a30 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004904:	8a3a      	ldrh	r2, [r7, #16]
 8004906:	429a      	cmp	r2, r3
 8004908:	f080 8092 	bcs.w	8004a30 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	8a3a      	ldrh	r2, [r7, #16]
 8004910:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	2b20      	cmp	r3, #32
 800491a:	d02b      	beq.n	8004974 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800492a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695a      	ldr	r2, [r3, #20]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0201 	bic.w	r2, r2, #1
 800493a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695a      	ldr	r2, [r3, #20]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800494a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0210 	bic.w	r2, r2, #16
 8004968:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496e:	4618      	mov	r0, r3
 8004970:	f7fe f8c3 	bl	8002afa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800497c:	b29b      	uxth	r3, r3
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	b29b      	uxth	r3, r3
 8004982:	4619      	mov	r1, r3
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f86d 	bl	8004a64 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800498a:	e051      	b.n	8004a30 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004994:	b29b      	uxth	r3, r3
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800499e:	b29b      	uxth	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d047      	beq.n	8004a34 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80049a4:	8a7b      	ldrh	r3, [r7, #18]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d044      	beq.n	8004a34 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80049b8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	695a      	ldr	r2, [r3, #20]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0201 	bic.w	r2, r2, #1
 80049c8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0210 	bic.w	r2, r2, #16
 80049e6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049e8:	8a7b      	ldrh	r3, [r7, #18]
 80049ea:	4619      	mov	r1, r3
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f839 	bl	8004a64 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80049f2:	e01f      	b.n	8004a34 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d008      	beq.n	8004a10 <HAL_UART_IRQHandler+0x324>
 80049fe:	6a3b      	ldr	r3, [r7, #32]
 8004a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f8f9 	bl	8004c00 <UART_Transmit_IT>
    return;
 8004a0e:	e012      	b.n	8004a36 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00d      	beq.n	8004a36 <HAL_UART_IRQHandler+0x34a>
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d008      	beq.n	8004a36 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f93a 	bl	8004c9e <UART_EndTransmit_IT>
    return;
 8004a2a:	e004      	b.n	8004a36 <HAL_UART_IRQHandler+0x34a>
    return;
 8004a2c:	bf00      	nop
 8004a2e:	e002      	b.n	8004a36 <HAL_UART_IRQHandler+0x34a>
      return;
 8004a30:	bf00      	nop
 8004a32:	e000      	b.n	8004a36 <HAL_UART_IRQHandler+0x34a>
      return;
 8004a34:	bf00      	nop
  }
}
 8004a36:	3728      	adds	r7, #40	; 0x28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	08004bd9 	.word	0x08004bd9

08004a40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bc80      	pop	{r7}
 8004a50:	4770      	bx	lr

08004a52 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr

08004a64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bc80      	pop	{r7}
 8004a78:	4770      	bx	lr

08004a7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b084      	sub	sp, #16
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	60f8      	str	r0, [r7, #12]
 8004a82:	60b9      	str	r1, [r7, #8]
 8004a84:	603b      	str	r3, [r7, #0]
 8004a86:	4613      	mov	r3, r2
 8004a88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a8a:	e02c      	b.n	8004ae6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a92:	d028      	beq.n	8004ae6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d007      	beq.n	8004aaa <UART_WaitOnFlagUntilTimeout+0x30>
 8004a9a:	f7fd fa1d 	bl	8001ed8 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d21d      	bcs.n	8004ae6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ab8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695a      	ldr	r2, [r3, #20]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0201 	bic.w	r2, r2, #1
 8004ac8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e00f      	b.n	8004b06 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	4013      	ands	r3, r2
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	bf0c      	ite	eq
 8004af6:	2301      	moveq	r3, #1
 8004af8:	2300      	movne	r3, #0
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	461a      	mov	r2, r3
 8004afe:	79fb      	ldrb	r3, [r7, #7]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d0c3      	beq.n	8004a8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b085      	sub	sp, #20
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	60f8      	str	r0, [r7, #12]
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	88fa      	ldrh	r2, [r7, #6]
 8004b26:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	88fa      	ldrh	r2, [r7, #6]
 8004b2c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2222      	movs	r2, #34	; 0x22
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b52:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695a      	ldr	r2, [r3, #20]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0201 	orr.w	r2, r2, #1
 8004b62:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0220 	orr.w	r2, r2, #32
 8004b72:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bc80      	pop	{r7}
 8004b7e:	4770      	bx	lr

08004b80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b96:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695a      	ldr	r2, [r3, #20]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0201 	bic.w	r2, r2, #1
 8004ba6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d107      	bne.n	8004bc0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0210 	bic.w	r2, r2, #16
 8004bbe:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bc80      	pop	{r7}
 8004bd6:	4770      	bx	lr

08004bd8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f7ff ff2d 	bl	8004a52 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bf8:	bf00      	nop
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b21      	cmp	r3, #33	; 0x21
 8004c12:	d13e      	bne.n	8004c92 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c1c:	d114      	bne.n	8004c48 <UART_Transmit_IT+0x48>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d110      	bne.n	8004c48 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	881b      	ldrh	r3, [r3, #0]
 8004c30:	461a      	mov	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c3a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	1c9a      	adds	r2, r3, #2
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	621a      	str	r2, [r3, #32]
 8004c46:	e008      	b.n	8004c5a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	1c59      	adds	r1, r3, #1
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6211      	str	r1, [r2, #32]
 8004c52:	781a      	ldrb	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	4619      	mov	r1, r3
 8004c68:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10f      	bne.n	8004c8e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68da      	ldr	r2, [r3, #12]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68da      	ldr	r2, [r3, #12]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	e000      	b.n	8004c94 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c92:	2302      	movs	r3, #2
  }
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bc80      	pop	{r7}
 8004c9c:	4770      	bx	lr

08004c9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b082      	sub	sp, #8
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff febe 	bl	8004a40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b086      	sub	sp, #24
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b22      	cmp	r3, #34	; 0x22
 8004ce0:	f040 8099 	bne.w	8004e16 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cec:	d117      	bne.n	8004d1e <UART_Receive_IT+0x50>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d113      	bne.n	8004d1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfe:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d16:	1c9a      	adds	r2, r3, #2
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d1c:	e026      	b.n	8004d6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d22:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004d24:	2300      	movs	r3, #0
 8004d26:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d30:	d007      	beq.n	8004d42 <UART_Receive_IT+0x74>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10a      	bne.n	8004d50 <UART_Receive_IT+0x82>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d106      	bne.n	8004d50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	701a      	strb	r2, [r3, #0]
 8004d4e:	e008      	b.n	8004d62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	4619      	mov	r1, r3
 8004d7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d148      	bne.n	8004e12 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0220 	bic.w	r2, r2, #32
 8004d8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695a      	ldr	r2, [r3, #20]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0201 	bic.w	r2, r2, #1
 8004dae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d123      	bne.n	8004e08 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0210 	bic.w	r2, r2, #16
 8004dd4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0310 	and.w	r3, r3, #16
 8004de0:	2b10      	cmp	r3, #16
 8004de2:	d10a      	bne.n	8004dfa <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004de4:	2300      	movs	r3, #0
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004dfe:	4619      	mov	r1, r3
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff fe2f 	bl	8004a64 <HAL_UARTEx_RxEventCallback>
 8004e06:	e002      	b.n	8004e0e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7fc fb25 	bl	8001458 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	e002      	b.n	8004e18 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	e000      	b.n	8004e18 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004e16:	2302      	movs	r3, #2
  }
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3718      	adds	r7, #24
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e5a:	f023 030c 	bic.w	r3, r3, #12
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6812      	ldr	r2, [r2, #0]
 8004e62:	68b9      	ldr	r1, [r7, #8]
 8004e64:	430b      	orrs	r3, r1
 8004e66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699a      	ldr	r2, [r3, #24]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a2c      	ldr	r2, [pc, #176]	; (8004f34 <UART_SetConfig+0x114>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d103      	bne.n	8004e90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e88:	f7fe fefe 	bl	8003c88 <HAL_RCC_GetPCLK2Freq>
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	e002      	b.n	8004e96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e90:	f7fe fee6 	bl	8003c60 <HAL_RCC_GetPCLK1Freq>
 8004e94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	009a      	lsls	r2, r3, #2
 8004ea0:	441a      	add	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eac:	4a22      	ldr	r2, [pc, #136]	; (8004f38 <UART_SetConfig+0x118>)
 8004eae:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	0119      	lsls	r1, r3, #4
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	009a      	lsls	r2, r3, #2
 8004ec0:	441a      	add	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ecc:	4b1a      	ldr	r3, [pc, #104]	; (8004f38 <UART_SetConfig+0x118>)
 8004ece:	fba3 0302 	umull	r0, r3, r3, r2
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	2064      	movs	r0, #100	; 0x64
 8004ed6:	fb00 f303 	mul.w	r3, r0, r3
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	3332      	adds	r3, #50	; 0x32
 8004ee0:	4a15      	ldr	r2, [pc, #84]	; (8004f38 <UART_SetConfig+0x118>)
 8004ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee6:	095b      	lsrs	r3, r3, #5
 8004ee8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eec:	4419      	add	r1, r3
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009a      	lsls	r2, r3, #2
 8004ef8:	441a      	add	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f04:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <UART_SetConfig+0x118>)
 8004f06:	fba3 0302 	umull	r0, r3, r3, r2
 8004f0a:	095b      	lsrs	r3, r3, #5
 8004f0c:	2064      	movs	r0, #100	; 0x64
 8004f0e:	fb00 f303 	mul.w	r3, r0, r3
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	3332      	adds	r3, #50	; 0x32
 8004f18:	4a07      	ldr	r2, [pc, #28]	; (8004f38 <UART_SetConfig+0x118>)
 8004f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1e:	095b      	lsrs	r3, r3, #5
 8004f20:	f003 020f 	and.w	r2, r3, #15
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	440a      	add	r2, r1
 8004f2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f2c:	bf00      	nop
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	40013800 	.word	0x40013800
 8004f38:	51eb851f 	.word	0x51eb851f

08004f3c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	4603      	mov	r3, r0
 8004f44:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f4e:	2b84      	cmp	r3, #132	; 0x84
 8004f50:	d005      	beq.n	8004f5e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f52:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4413      	add	r3, r2
 8004f5a:	3303      	adds	r3, #3
 8004f5c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bc80      	pop	{r7}
 8004f68:	4770      	bx	lr

08004f6a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f6e:	f000 fdb3 	bl	8005ad8 <vTaskStartScheduler>
  
  return osOK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f7a:	b089      	sub	sp, #36	; 0x24
 8004f7c:	af04      	add	r7, sp, #16
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d020      	beq.n	8004fcc <osThreadCreate+0x54>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d01c      	beq.n	8004fcc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685c      	ldr	r4, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681d      	ldr	r5, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691e      	ldr	r6, [r3, #16]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff ffc9 	bl	8004f3c <makeFreeRtosPriority>
 8004faa:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fb4:	9202      	str	r2, [sp, #8]
 8004fb6:	9301      	str	r3, [sp, #4]
 8004fb8:	9100      	str	r1, [sp, #0]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	4632      	mov	r2, r6
 8004fbe:	4629      	mov	r1, r5
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	f000 fbb3 	bl	800572c <xTaskCreateStatic>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	e01c      	b.n	8005006 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685c      	ldr	r4, [r3, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fd8:	b29e      	uxth	r6, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7ff ffab 	bl	8004f3c <makeFreeRtosPriority>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	f107 030c 	add.w	r3, r7, #12
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	9200      	str	r2, [sp, #0]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	4632      	mov	r2, r6
 8004ff4:	4629      	mov	r1, r5
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	f000 fbf4 	bl	80057e4 <xTaskCreate>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d001      	beq.n	8005006 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005002:	2300      	movs	r3, #0
 8005004:	e000      	b.n	8005008 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005006:	68fb      	ldr	r3, [r7, #12]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005010 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <osDelay+0x16>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	e000      	b.n	8005028 <osDelay+0x18>
 8005026:	2301      	movs	r3, #1
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fd21 	bl	8005a70 <vTaskDelay>
  
  return osOK;
 800502e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f103 0208 	add.w	r2, r3, #8
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005050:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f103 0208 	add.w	r2, r3, #8
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f103 0208 	add.w	r2, r3, #8
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	bc80      	pop	{r7}
 8005074:	4770      	bx	lr

08005076 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	bc80      	pop	{r7}
 800508c:	4770      	bx	lr

0800508e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800508e:	b480      	push	{r7}
 8005090:	b085      	sub	sp, #20
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
 8005096:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	601a      	str	r2, [r3, #0]
}
 80050ca:	bf00      	nop
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bc80      	pop	{r7}
 80050d2:	4770      	bx	lr

080050d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050ea:	d103      	bne.n	80050f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	e00c      	b.n	800510e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3308      	adds	r3, #8
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	e002      	b.n	8005102 <vListInsert+0x2e>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	429a      	cmp	r2, r3
 800510c:	d2f6      	bcs.n	80050fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	601a      	str	r2, [r3, #0]
}
 800513a:	bf00      	nop
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	bc80      	pop	{r7}
 8005142:	4770      	bx	lr

08005144 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6892      	ldr	r2, [r2, #8]
 800515a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6852      	ldr	r2, [r2, #4]
 8005164:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	429a      	cmp	r2, r3
 800516e:	d103      	bne.n	8005178 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689a      	ldr	r2, [r3, #8]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	1e5a      	subs	r2, r3, #1
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	bc80      	pop	{r7}
 8005194:	4770      	bx	lr
	...

08005198 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10a      	bne.n	80051c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051be:	bf00      	nop
 80051c0:	e7fe      	b.n	80051c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80051c2:	f001 faa3 	bl	800670c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ce:	68f9      	ldr	r1, [r7, #12]
 80051d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051d2:	fb01 f303 	mul.w	r3, r1, r3
 80051d6:	441a      	add	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f2:	3b01      	subs	r3, #1
 80051f4:	68f9      	ldr	r1, [r7, #12]
 80051f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051f8:	fb01 f303 	mul.w	r3, r1, r3
 80051fc:	441a      	add	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	22ff      	movs	r2, #255	; 0xff
 8005206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	22ff      	movs	r2, #255	; 0xff
 800520e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d114      	bne.n	8005242 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d01a      	beq.n	8005256 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	3310      	adds	r3, #16
 8005224:	4618      	mov	r0, r3
 8005226:	f000 feaf 	bl	8005f88 <xTaskRemoveFromEventList>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d012      	beq.n	8005256 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005230:	4b0c      	ldr	r3, [pc, #48]	; (8005264 <xQueueGenericReset+0xcc>)
 8005232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	e009      	b.n	8005256 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3310      	adds	r3, #16
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff fef6 	bl	8005038 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	3324      	adds	r3, #36	; 0x24
 8005250:	4618      	mov	r0, r3
 8005252:	f7ff fef1 	bl	8005038 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005256:	f001 fa89 	bl	800676c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800525a:	2301      	movs	r3, #1
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	e000ed04 	.word	0xe000ed04

08005268 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08a      	sub	sp, #40	; 0x28
 800526c:	af02      	add	r7, sp, #8
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	4613      	mov	r3, r2
 8005274:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10a      	bne.n	8005292 <xQueueGenericCreate+0x2a>
	__asm volatile
 800527c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	613b      	str	r3, [r7, #16]
}
 800528e:	bf00      	nop
 8005290:	e7fe      	b.n	8005290 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d102      	bne.n	800529e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005298:	2300      	movs	r3, #0
 800529a:	61fb      	str	r3, [r7, #28]
 800529c:	e004      	b.n	80052a8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	fb02 f303 	mul.w	r3, r2, r3
 80052a6:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	3348      	adds	r3, #72	; 0x48
 80052ac:	4618      	mov	r0, r3
 80052ae:	f001 faef 	bl	8006890 <pvPortMalloc>
 80052b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00f      	beq.n	80052da <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	3348      	adds	r3, #72	; 0x48
 80052be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052c8:	79fa      	ldrb	r2, [r7, #7]
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	4613      	mov	r3, r2
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	68b9      	ldr	r1, [r7, #8]
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 f805 	bl	80052e4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80052da:	69bb      	ldr	r3, [r7, #24]
	}
 80052dc:	4618      	mov	r0, r3
 80052de:	3720      	adds	r7, #32
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d103      	bne.n	8005300 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	e002      	b.n	8005306 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005312:	2101      	movs	r1, #1
 8005314:	69b8      	ldr	r0, [r7, #24]
 8005316:	f7ff ff3f 	bl	8005198 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800531a:	bf00      	nop
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005322:	b580      	push	{r7, lr}
 8005324:	b082      	sub	sp, #8
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00e      	beq.n	800534e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005342:	2300      	movs	r3, #0
 8005344:	2200      	movs	r2, #0
 8005346:	2100      	movs	r1, #0
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f81d 	bl	8005388 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800534e:	bf00      	nop
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005356:	b580      	push	{r7, lr}
 8005358:	b086      	sub	sp, #24
 800535a:	af00      	add	r7, sp, #0
 800535c:	4603      	mov	r3, r0
 800535e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005360:	2301      	movs	r3, #1
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	2300      	movs	r3, #0
 8005366:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005368:	79fb      	ldrb	r3, [r7, #7]
 800536a:	461a      	mov	r2, r3
 800536c:	6939      	ldr	r1, [r7, #16]
 800536e:	6978      	ldr	r0, [r7, #20]
 8005370:	f7ff ff7a 	bl	8005268 <xQueueGenericCreate>
 8005374:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f7ff ffd3 	bl	8005322 <prvInitialiseMutex>

		return pxNewQueue;
 800537c:	68fb      	ldr	r3, [r7, #12]
	}
 800537e:	4618      	mov	r0, r3
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
	...

08005388 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08e      	sub	sp, #56	; 0x38
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
 8005394:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005396:	2300      	movs	r3, #0
 8005398:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10a      	bne.n	80053ba <xQueueGenericSend+0x32>
	__asm volatile
 80053a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053b6:	bf00      	nop
 80053b8:	e7fe      	b.n	80053b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d103      	bne.n	80053c8 <xQueueGenericSend+0x40>
 80053c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <xQueueGenericSend+0x44>
 80053c8:	2301      	movs	r3, #1
 80053ca:	e000      	b.n	80053ce <xQueueGenericSend+0x46>
 80053cc:	2300      	movs	r3, #0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10a      	bne.n	80053e8 <xQueueGenericSend+0x60>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053e4:	bf00      	nop
 80053e6:	e7fe      	b.n	80053e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d103      	bne.n	80053f6 <xQueueGenericSend+0x6e>
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d101      	bne.n	80053fa <xQueueGenericSend+0x72>
 80053f6:	2301      	movs	r3, #1
 80053f8:	e000      	b.n	80053fc <xQueueGenericSend+0x74>
 80053fa:	2300      	movs	r3, #0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10a      	bne.n	8005416 <xQueueGenericSend+0x8e>
	__asm volatile
 8005400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	623b      	str	r3, [r7, #32]
}
 8005412:	bf00      	nop
 8005414:	e7fe      	b.n	8005414 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005416:	f000 ff7b 	bl	8006310 <xTaskGetSchedulerState>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d102      	bne.n	8005426 <xQueueGenericSend+0x9e>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <xQueueGenericSend+0xa2>
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <xQueueGenericSend+0xa4>
 800542a:	2300      	movs	r3, #0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10a      	bne.n	8005446 <xQueueGenericSend+0xbe>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	61fb      	str	r3, [r7, #28]
}
 8005442:	bf00      	nop
 8005444:	e7fe      	b.n	8005444 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005446:	f001 f961 	bl	800670c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005452:	429a      	cmp	r2, r3
 8005454:	d302      	bcc.n	800545c <xQueueGenericSend+0xd4>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b02      	cmp	r3, #2
 800545a:	d129      	bne.n	80054b0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	68b9      	ldr	r1, [r7, #8]
 8005460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005462:	f000 f88f 	bl	8005584 <prvCopyDataToQueue>
 8005466:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	2b00      	cmp	r3, #0
 800546e:	d010      	beq.n	8005492 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005472:	3324      	adds	r3, #36	; 0x24
 8005474:	4618      	mov	r0, r3
 8005476:	f000 fd87 	bl	8005f88 <xTaskRemoveFromEventList>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d013      	beq.n	80054a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005480:	4b3f      	ldr	r3, [pc, #252]	; (8005580 <xQueueGenericSend+0x1f8>)
 8005482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	e00a      	b.n	80054a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005494:	2b00      	cmp	r3, #0
 8005496:	d007      	beq.n	80054a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005498:	4b39      	ldr	r3, [pc, #228]	; (8005580 <xQueueGenericSend+0x1f8>)
 800549a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80054a8:	f001 f960 	bl	800676c <vPortExitCritical>
				return pdPASS;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e063      	b.n	8005578 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d103      	bne.n	80054be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054b6:	f001 f959 	bl	800676c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	e05c      	b.n	8005578 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d106      	bne.n	80054d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054c4:	f107 0314 	add.w	r3, r7, #20
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 fdbf 	bl	800604c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054ce:	2301      	movs	r3, #1
 80054d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054d2:	f001 f94b 	bl	800676c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054d6:	f000 fb69 	bl	8005bac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054da:	f001 f917 	bl	800670c <vPortEnterCritical>
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054e4:	b25b      	sxtb	r3, r3
 80054e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054ea:	d103      	bne.n	80054f4 <xQueueGenericSend+0x16c>
 80054ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054fa:	b25b      	sxtb	r3, r3
 80054fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005500:	d103      	bne.n	800550a <xQueueGenericSend+0x182>
 8005502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800550a:	f001 f92f 	bl	800676c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800550e:	1d3a      	adds	r2, r7, #4
 8005510:	f107 0314 	add.w	r3, r7, #20
 8005514:	4611      	mov	r1, r2
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fdae 	bl	8006078 <xTaskCheckForTimeOut>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d124      	bne.n	800556c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005522:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005524:	f000 f8ea 	bl	80056fc <prvIsQueueFull>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d018      	beq.n	8005560 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800552e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005530:	3310      	adds	r3, #16
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	4611      	mov	r1, r2
 8005536:	4618      	mov	r0, r3
 8005538:	f000 fd02 	bl	8005f40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800553c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800553e:	f000 f88b 	bl	8005658 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005542:	f000 fb41 	bl	8005bc8 <xTaskResumeAll>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	f47f af7c 	bne.w	8005446 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800554e:	4b0c      	ldr	r3, [pc, #48]	; (8005580 <xQueueGenericSend+0x1f8>)
 8005550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	e772      	b.n	8005446 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005562:	f000 f879 	bl	8005658 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005566:	f000 fb2f 	bl	8005bc8 <xTaskResumeAll>
 800556a:	e76c      	b.n	8005446 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800556c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800556e:	f000 f873 	bl	8005658 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005572:	f000 fb29 	bl	8005bc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005576:	2300      	movs	r3, #0
		}
	}
}
 8005578:	4618      	mov	r0, r3
 800557a:	3738      	adds	r7, #56	; 0x38
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	e000ed04 	.word	0xe000ed04

08005584 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005590:	2300      	movs	r3, #0
 8005592:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005598:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10d      	bne.n	80055be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d14d      	bne.n	8005646 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fecc 	bl	800634c <xTaskPriorityDisinherit>
 80055b4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	605a      	str	r2, [r3, #4]
 80055bc:	e043      	b.n	8005646 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d119      	bne.n	80055f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6898      	ldr	r0, [r3, #8]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055cc:	461a      	mov	r2, r3
 80055ce:	68b9      	ldr	r1, [r7, #8]
 80055d0:	f001 fc59 	bl	8006e86 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	689a      	ldr	r2, [r3, #8]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055dc:	441a      	add	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	689a      	ldr	r2, [r3, #8]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d32b      	bcc.n	8005646 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	609a      	str	r2, [r3, #8]
 80055f6:	e026      	b.n	8005646 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	68d8      	ldr	r0, [r3, #12]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005600:	461a      	mov	r2, r3
 8005602:	68b9      	ldr	r1, [r7, #8]
 8005604:	f001 fc3f 	bl	8006e86 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005610:	425b      	negs	r3, r3
 8005612:	441a      	add	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	429a      	cmp	r2, r3
 8005622:	d207      	bcs.n	8005634 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562c:	425b      	negs	r3, r3
 800562e:	441a      	add	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b02      	cmp	r3, #2
 8005638:	d105      	bne.n	8005646 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	3b01      	subs	r3, #1
 8005644:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800564e:	697b      	ldr	r3, [r7, #20]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005660:	f001 f854 	bl	800670c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800566a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800566c:	e011      	b.n	8005692 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	2b00      	cmp	r3, #0
 8005674:	d012      	beq.n	800569c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3324      	adds	r3, #36	; 0x24
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fc84 	bl	8005f88 <xTaskRemoveFromEventList>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005686:	f000 fd59 	bl	800613c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800568a:	7bfb      	ldrb	r3, [r7, #15]
 800568c:	3b01      	subs	r3, #1
 800568e:	b2db      	uxtb	r3, r3
 8005690:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005696:	2b00      	cmp	r3, #0
 8005698:	dce9      	bgt.n	800566e <prvUnlockQueue+0x16>
 800569a:	e000      	b.n	800569e <prvUnlockQueue+0x46>
					break;
 800569c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	22ff      	movs	r2, #255	; 0xff
 80056a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80056a6:	f001 f861 	bl	800676c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80056aa:	f001 f82f 	bl	800670c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056b6:	e011      	b.n	80056dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d012      	beq.n	80056e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	3310      	adds	r3, #16
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 fc5f 	bl	8005f88 <xTaskRemoveFromEventList>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80056d0:	f000 fd34 	bl	800613c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80056d4:	7bbb      	ldrb	r3, [r7, #14]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	dce9      	bgt.n	80056b8 <prvUnlockQueue+0x60>
 80056e4:	e000      	b.n	80056e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80056e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	22ff      	movs	r2, #255	; 0xff
 80056ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80056f0:	f001 f83c 	bl	800676c <vPortExitCritical>
}
 80056f4:	bf00      	nop
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005704:	f001 f802 	bl	800670c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005710:	429a      	cmp	r2, r3
 8005712:	d102      	bne.n	800571a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005714:	2301      	movs	r3, #1
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	e001      	b.n	800571e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800571a:	2300      	movs	r3, #0
 800571c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800571e:	f001 f825 	bl	800676c <vPortExitCritical>

	return xReturn;
 8005722:	68fb      	ldr	r3, [r7, #12]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800572c:	b580      	push	{r7, lr}
 800572e:	b08e      	sub	sp, #56	; 0x38
 8005730:	af04      	add	r7, sp, #16
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
 8005738:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800573a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	623b      	str	r3, [r7, #32]
}
 8005752:	bf00      	nop
 8005754:	e7fe      	b.n	8005754 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10a      	bne.n	8005772 <xTaskCreateStatic+0x46>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	61fb      	str	r3, [r7, #28]
}
 800576e:	bf00      	nop
 8005770:	e7fe      	b.n	8005770 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005772:	23b4      	movs	r3, #180	; 0xb4
 8005774:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	2bb4      	cmp	r3, #180	; 0xb4
 800577a:	d00a      	beq.n	8005792 <xTaskCreateStatic+0x66>
	__asm volatile
 800577c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	61bb      	str	r3, [r7, #24]
}
 800578e:	bf00      	nop
 8005790:	e7fe      	b.n	8005790 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01e      	beq.n	80057d6 <xTaskCreateStatic+0xaa>
 8005798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579a:	2b00      	cmp	r3, #0
 800579c:	d01b      	beq.n	80057d6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800579e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057b0:	2300      	movs	r3, #0
 80057b2:	9303      	str	r3, [sp, #12]
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	9302      	str	r3, [sp, #8]
 80057b8:	f107 0314 	add.w	r3, r7, #20
 80057bc:	9301      	str	r3, [sp, #4]
 80057be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	68b9      	ldr	r1, [r7, #8]
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 f851 	bl	8005870 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057d0:	f000 f8e4 	bl	800599c <prvAddNewTaskToReadyList>
 80057d4:	e001      	b.n	80057da <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057da:	697b      	ldr	r3, [r7, #20]
	}
 80057dc:	4618      	mov	r0, r3
 80057de:	3728      	adds	r7, #40	; 0x28
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08c      	sub	sp, #48	; 0x30
 80057e8:	af04      	add	r7, sp, #16
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	603b      	str	r3, [r7, #0]
 80057f0:	4613      	mov	r3, r2
 80057f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057f4:	88fb      	ldrh	r3, [r7, #6]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4618      	mov	r0, r3
 80057fa:	f001 f849 	bl	8006890 <pvPortMalloc>
 80057fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00e      	beq.n	8005824 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005806:	20b4      	movs	r0, #180	; 0xb4
 8005808:	f001 f842 	bl	8006890 <pvPortMalloc>
 800580c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	631a      	str	r2, [r3, #48]	; 0x30
 800581a:	e005      	b.n	8005828 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800581c:	6978      	ldr	r0, [r7, #20]
 800581e:	f001 f8fb 	bl	8006a18 <vPortFree>
 8005822:	e001      	b.n	8005828 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005824:	2300      	movs	r3, #0
 8005826:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d017      	beq.n	800585e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005836:	88fa      	ldrh	r2, [r7, #6]
 8005838:	2300      	movs	r3, #0
 800583a:	9303      	str	r3, [sp, #12]
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	9302      	str	r3, [sp, #8]
 8005840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005842:	9301      	str	r3, [sp, #4]
 8005844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	68b9      	ldr	r1, [r7, #8]
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 f80f 	bl	8005870 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005852:	69f8      	ldr	r0, [r7, #28]
 8005854:	f000 f8a2 	bl	800599c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005858:	2301      	movs	r3, #1
 800585a:	61bb      	str	r3, [r7, #24]
 800585c:	e002      	b.n	8005864 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800585e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005862:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005864:	69bb      	ldr	r3, [r7, #24]
	}
 8005866:	4618      	mov	r0, r3
 8005868:	3720      	adds	r7, #32
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
	...

08005870 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b088      	sub	sp, #32
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005888:	3b01      	subs	r3, #1
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	f023 0307 	bic.w	r3, r3, #7
 8005896:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	f003 0307 	and.w	r3, r3, #7
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00a      	beq.n	80058b8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80058a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	617b      	str	r3, [r7, #20]
}
 80058b4:	bf00      	nop
 80058b6:	e7fe      	b.n	80058b6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058b8:	2300      	movs	r3, #0
 80058ba:	61fb      	str	r3, [r7, #28]
 80058bc:	e012      	b.n	80058e4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	4413      	add	r3, r2
 80058c4:	7819      	ldrb	r1, [r3, #0]
 80058c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	4413      	add	r3, r2
 80058cc:	3334      	adds	r3, #52	; 0x34
 80058ce:	460a      	mov	r2, r1
 80058d0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	4413      	add	r3, r2
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d006      	beq.n	80058ec <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	3301      	adds	r3, #1
 80058e2:	61fb      	str	r3, [r7, #28]
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	2b0f      	cmp	r3, #15
 80058e8:	d9e9      	bls.n	80058be <prvInitialiseNewTask+0x4e>
 80058ea:	e000      	b.n	80058ee <prvInitialiseNewTask+0x7e>
		{
			break;
 80058ec:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f8:	2b06      	cmp	r3, #6
 80058fa:	d901      	bls.n	8005900 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058fc:	2306      	movs	r3, #6
 80058fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005904:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800590a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800590c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590e:	2200      	movs	r2, #0
 8005910:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005914:	3304      	adds	r3, #4
 8005916:	4618      	mov	r0, r3
 8005918:	f7ff fbad 	bl	8005076 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800591c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591e:	3318      	adds	r3, #24
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff fba8 	bl	8005076 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800592a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800592c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592e:	f1c3 0207 	rsb	r2, r3, #7
 8005932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005934:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800593a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	2200      	movs	r2, #0
 8005940:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005946:	2200      	movs	r2, #0
 8005948:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594e:	334c      	adds	r3, #76	; 0x4c
 8005950:	2260      	movs	r2, #96	; 0x60
 8005952:	2100      	movs	r1, #0
 8005954:	4618      	mov	r0, r3
 8005956:	f001 faa4 	bl	8006ea2 <memset>
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	4a0c      	ldr	r2, [pc, #48]	; (8005990 <prvInitialiseNewTask+0x120>)
 800595e:	651a      	str	r2, [r3, #80]	; 0x50
 8005960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005962:	4a0c      	ldr	r2, [pc, #48]	; (8005994 <prvInitialiseNewTask+0x124>)
 8005964:	655a      	str	r2, [r3, #84]	; 0x54
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	4a0b      	ldr	r2, [pc, #44]	; (8005998 <prvInitialiseNewTask+0x128>)
 800596a:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	68f9      	ldr	r1, [r7, #12]
 8005970:	69b8      	ldr	r0, [r7, #24]
 8005972:	f000 fdd7 	bl	8006524 <pxPortInitialiseStack>
 8005976:	4602      	mov	r2, r0
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800597c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597e:	2b00      	cmp	r3, #0
 8005980:	d002      	beq.n	8005988 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005986:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005988:	bf00      	nop
 800598a:	3720      	adds	r7, #32
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	08009dd8 	.word	0x08009dd8
 8005994:	08009df8 	.word	0x08009df8
 8005998:	08009db8 	.word	0x08009db8

0800599c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059a4:	f000 feb2 	bl	800670c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059a8:	4b2a      	ldr	r3, [pc, #168]	; (8005a54 <prvAddNewTaskToReadyList+0xb8>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3301      	adds	r3, #1
 80059ae:	4a29      	ldr	r2, [pc, #164]	; (8005a54 <prvAddNewTaskToReadyList+0xb8>)
 80059b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059b2:	4b29      	ldr	r3, [pc, #164]	; (8005a58 <prvAddNewTaskToReadyList+0xbc>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d109      	bne.n	80059ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059ba:	4a27      	ldr	r2, [pc, #156]	; (8005a58 <prvAddNewTaskToReadyList+0xbc>)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059c0:	4b24      	ldr	r3, [pc, #144]	; (8005a54 <prvAddNewTaskToReadyList+0xb8>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d110      	bne.n	80059ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059c8:	f000 fbdc 	bl	8006184 <prvInitialiseTaskLists>
 80059cc:	e00d      	b.n	80059ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059ce:	4b23      	ldr	r3, [pc, #140]	; (8005a5c <prvAddNewTaskToReadyList+0xc0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d109      	bne.n	80059ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059d6:	4b20      	ldr	r3, [pc, #128]	; (8005a58 <prvAddNewTaskToReadyList+0xbc>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d802      	bhi.n	80059ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80059e4:	4a1c      	ldr	r2, [pc, #112]	; (8005a58 <prvAddNewTaskToReadyList+0xbc>)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80059ea:	4b1d      	ldr	r3, [pc, #116]	; (8005a60 <prvAddNewTaskToReadyList+0xc4>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3301      	adds	r3, #1
 80059f0:	4a1b      	ldr	r2, [pc, #108]	; (8005a60 <prvAddNewTaskToReadyList+0xc4>)
 80059f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f8:	2201      	movs	r2, #1
 80059fa:	409a      	lsls	r2, r3
 80059fc:	4b19      	ldr	r3, [pc, #100]	; (8005a64 <prvAddNewTaskToReadyList+0xc8>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	4a18      	ldr	r2, [pc, #96]	; (8005a64 <prvAddNewTaskToReadyList+0xc8>)
 8005a04:	6013      	str	r3, [r2, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4a15      	ldr	r2, [pc, #84]	; (8005a68 <prvAddNewTaskToReadyList+0xcc>)
 8005a14:	441a      	add	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	3304      	adds	r3, #4
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	f7ff fb36 	bl	800508e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a22:	f000 fea3 	bl	800676c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a26:	4b0d      	ldr	r3, [pc, #52]	; (8005a5c <prvAddNewTaskToReadyList+0xc0>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00e      	beq.n	8005a4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a2e:	4b0a      	ldr	r3, [pc, #40]	; (8005a58 <prvAddNewTaskToReadyList+0xbc>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d207      	bcs.n	8005a4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a3c:	4b0b      	ldr	r3, [pc, #44]	; (8005a6c <prvAddNewTaskToReadyList+0xd0>)
 8005a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	f3bf 8f4f 	dsb	sy
 8005a48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a4c:	bf00      	nop
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	2000079c 	.word	0x2000079c
 8005a58:	2000069c 	.word	0x2000069c
 8005a5c:	200007a8 	.word	0x200007a8
 8005a60:	200007b8 	.word	0x200007b8
 8005a64:	200007a4 	.word	0x200007a4
 8005a68:	200006a0 	.word	0x200006a0
 8005a6c:	e000ed04 	.word	0xe000ed04

08005a70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d017      	beq.n	8005ab2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a82:	4b13      	ldr	r3, [pc, #76]	; (8005ad0 <vTaskDelay+0x60>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <vTaskDelay+0x30>
	__asm volatile
 8005a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8e:	f383 8811 	msr	BASEPRI, r3
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	60bb      	str	r3, [r7, #8]
}
 8005a9c:	bf00      	nop
 8005a9e:	e7fe      	b.n	8005a9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005aa0:	f000 f884 	bl	8005bac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fcd6 	bl	8006458 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005aac:	f000 f88c 	bl	8005bc8 <xTaskResumeAll>
 8005ab0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d107      	bne.n	8005ac8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005ab8:	4b06      	ldr	r3, [pc, #24]	; (8005ad4 <vTaskDelay+0x64>)
 8005aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ac8:	bf00      	nop
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	200007c4 	.word	0x200007c4
 8005ad4:	e000ed04 	.word	0xe000ed04

08005ad8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08a      	sub	sp, #40	; 0x28
 8005adc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ae6:	463a      	mov	r2, r7
 8005ae8:	1d39      	adds	r1, r7, #4
 8005aea:	f107 0308 	add.w	r3, r7, #8
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fb f9ac 	bl	8000e4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005af4:	6839      	ldr	r1, [r7, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	9202      	str	r2, [sp, #8]
 8005afc:	9301      	str	r3, [sp, #4]
 8005afe:	2300      	movs	r3, #0
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	2300      	movs	r3, #0
 8005b04:	460a      	mov	r2, r1
 8005b06:	4921      	ldr	r1, [pc, #132]	; (8005b8c <vTaskStartScheduler+0xb4>)
 8005b08:	4821      	ldr	r0, [pc, #132]	; (8005b90 <vTaskStartScheduler+0xb8>)
 8005b0a:	f7ff fe0f 	bl	800572c <xTaskCreateStatic>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	4a20      	ldr	r2, [pc, #128]	; (8005b94 <vTaskStartScheduler+0xbc>)
 8005b12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b14:	4b1f      	ldr	r3, [pc, #124]	; (8005b94 <vTaskStartScheduler+0xbc>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	617b      	str	r3, [r7, #20]
 8005b20:	e001      	b.n	8005b26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b22:	2300      	movs	r3, #0
 8005b24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d11b      	bne.n	8005b64 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	613b      	str	r3, [r7, #16]
}
 8005b3e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b40:	4b15      	ldr	r3, [pc, #84]	; (8005b98 <vTaskStartScheduler+0xc0>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	334c      	adds	r3, #76	; 0x4c
 8005b46:	4a15      	ldr	r2, [pc, #84]	; (8005b9c <vTaskStartScheduler+0xc4>)
 8005b48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b4a:	4b15      	ldr	r3, [pc, #84]	; (8005ba0 <vTaskStartScheduler+0xc8>)
 8005b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b52:	4b14      	ldr	r3, [pc, #80]	; (8005ba4 <vTaskStartScheduler+0xcc>)
 8005b54:	2201      	movs	r2, #1
 8005b56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005b58:	4b13      	ldr	r3, [pc, #76]	; (8005ba8 <vTaskStartScheduler+0xd0>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b5e:	f000 fd63 	bl	8006628 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b62:	e00e      	b.n	8005b82 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b6a:	d10a      	bne.n	8005b82 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	60fb      	str	r3, [r7, #12]
}
 8005b7e:	bf00      	nop
 8005b80:	e7fe      	b.n	8005b80 <vTaskStartScheduler+0xa8>
}
 8005b82:	bf00      	nop
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	08009d98 	.word	0x08009d98
 8005b90:	08006155 	.word	0x08006155
 8005b94:	200007c0 	.word	0x200007c0
 8005b98:	2000069c 	.word	0x2000069c
 8005b9c:	20000018 	.word	0x20000018
 8005ba0:	200007bc 	.word	0x200007bc
 8005ba4:	200007a8 	.word	0x200007a8
 8005ba8:	200007a0 	.word	0x200007a0

08005bac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005bb0:	4b04      	ldr	r3, [pc, #16]	; (8005bc4 <vTaskSuspendAll+0x18>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	4a03      	ldr	r2, [pc, #12]	; (8005bc4 <vTaskSuspendAll+0x18>)
 8005bb8:	6013      	str	r3, [r2, #0]
}
 8005bba:	bf00      	nop
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bc80      	pop	{r7}
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	200007c4 	.word	0x200007c4

08005bc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005bd6:	4b41      	ldr	r3, [pc, #260]	; (8005cdc <xTaskResumeAll+0x114>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10a      	bne.n	8005bf4 <xTaskResumeAll+0x2c>
	__asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	603b      	str	r3, [r7, #0]
}
 8005bf0:	bf00      	nop
 8005bf2:	e7fe      	b.n	8005bf2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005bf4:	f000 fd8a 	bl	800670c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005bf8:	4b38      	ldr	r3, [pc, #224]	; (8005cdc <xTaskResumeAll+0x114>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	4a37      	ldr	r2, [pc, #220]	; (8005cdc <xTaskResumeAll+0x114>)
 8005c00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c02:	4b36      	ldr	r3, [pc, #216]	; (8005cdc <xTaskResumeAll+0x114>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d161      	bne.n	8005cce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c0a:	4b35      	ldr	r3, [pc, #212]	; (8005ce0 <xTaskResumeAll+0x118>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d05d      	beq.n	8005cce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c12:	e02e      	b.n	8005c72 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005c14:	4b33      	ldr	r3, [pc, #204]	; (8005ce4 <xTaskResumeAll+0x11c>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	3318      	adds	r3, #24
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7ff fa8f 	bl	8005144 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	3304      	adds	r3, #4
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7ff fa8a 	bl	8005144 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c34:	2201      	movs	r2, #1
 8005c36:	409a      	lsls	r2, r3
 8005c38:	4b2b      	ldr	r3, [pc, #172]	; (8005ce8 <xTaskResumeAll+0x120>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	4a2a      	ldr	r2, [pc, #168]	; (8005ce8 <xTaskResumeAll+0x120>)
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c46:	4613      	mov	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4a27      	ldr	r2, [pc, #156]	; (8005cec <xTaskResumeAll+0x124>)
 8005c50:	441a      	add	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	3304      	adds	r3, #4
 8005c56:	4619      	mov	r1, r3
 8005c58:	4610      	mov	r0, r2
 8005c5a:	f7ff fa18 	bl	800508e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c62:	4b23      	ldr	r3, [pc, #140]	; (8005cf0 <xTaskResumeAll+0x128>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d302      	bcc.n	8005c72 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005c6c:	4b21      	ldr	r3, [pc, #132]	; (8005cf4 <xTaskResumeAll+0x12c>)
 8005c6e:	2201      	movs	r2, #1
 8005c70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c72:	4b1c      	ldr	r3, [pc, #112]	; (8005ce4 <xTaskResumeAll+0x11c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1cc      	bne.n	8005c14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c80:	f000 fb22 	bl	80062c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005c84:	4b1c      	ldr	r3, [pc, #112]	; (8005cf8 <xTaskResumeAll+0x130>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d010      	beq.n	8005cb2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c90:	f000 f836 	bl	8005d00 <xTaskIncrementTick>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d002      	beq.n	8005ca0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005c9a:	4b16      	ldr	r3, [pc, #88]	; (8005cf4 <xTaskResumeAll+0x12c>)
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1f1      	bne.n	8005c90 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005cac:	4b12      	ldr	r3, [pc, #72]	; (8005cf8 <xTaskResumeAll+0x130>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005cb2:	4b10      	ldr	r3, [pc, #64]	; (8005cf4 <xTaskResumeAll+0x12c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d009      	beq.n	8005cce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005cbe:	4b0f      	ldr	r3, [pc, #60]	; (8005cfc <xTaskResumeAll+0x134>)
 8005cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cce:	f000 fd4d 	bl	800676c <vPortExitCritical>

	return xAlreadyYielded;
 8005cd2:	68bb      	ldr	r3, [r7, #8]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	200007c4 	.word	0x200007c4
 8005ce0:	2000079c 	.word	0x2000079c
 8005ce4:	2000075c 	.word	0x2000075c
 8005ce8:	200007a4 	.word	0x200007a4
 8005cec:	200006a0 	.word	0x200006a0
 8005cf0:	2000069c 	.word	0x2000069c
 8005cf4:	200007b0 	.word	0x200007b0
 8005cf8:	200007ac 	.word	0x200007ac
 8005cfc:	e000ed04 	.word	0xe000ed04

08005d00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d06:	2300      	movs	r3, #0
 8005d08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d0a:	4b51      	ldr	r3, [pc, #324]	; (8005e50 <xTaskIncrementTick+0x150>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f040 808d 	bne.w	8005e2e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d14:	4b4f      	ldr	r3, [pc, #316]	; (8005e54 <xTaskIncrementTick+0x154>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d1c:	4a4d      	ldr	r2, [pc, #308]	; (8005e54 <xTaskIncrementTick+0x154>)
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d120      	bne.n	8005d6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d28:	4b4b      	ldr	r3, [pc, #300]	; (8005e58 <xTaskIncrementTick+0x158>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00a      	beq.n	8005d48 <xTaskIncrementTick+0x48>
	__asm volatile
 8005d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	603b      	str	r3, [r7, #0]
}
 8005d44:	bf00      	nop
 8005d46:	e7fe      	b.n	8005d46 <xTaskIncrementTick+0x46>
 8005d48:	4b43      	ldr	r3, [pc, #268]	; (8005e58 <xTaskIncrementTick+0x158>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	4b43      	ldr	r3, [pc, #268]	; (8005e5c <xTaskIncrementTick+0x15c>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a41      	ldr	r2, [pc, #260]	; (8005e58 <xTaskIncrementTick+0x158>)
 8005d54:	6013      	str	r3, [r2, #0]
 8005d56:	4a41      	ldr	r2, [pc, #260]	; (8005e5c <xTaskIncrementTick+0x15c>)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6013      	str	r3, [r2, #0]
 8005d5c:	4b40      	ldr	r3, [pc, #256]	; (8005e60 <xTaskIncrementTick+0x160>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3301      	adds	r3, #1
 8005d62:	4a3f      	ldr	r2, [pc, #252]	; (8005e60 <xTaskIncrementTick+0x160>)
 8005d64:	6013      	str	r3, [r2, #0]
 8005d66:	f000 faaf 	bl	80062c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d6a:	4b3e      	ldr	r3, [pc, #248]	; (8005e64 <xTaskIncrementTick+0x164>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d34d      	bcc.n	8005e10 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d74:	4b38      	ldr	r3, [pc, #224]	; (8005e58 <xTaskIncrementTick+0x158>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <xTaskIncrementTick+0x82>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e000      	b.n	8005d84 <xTaskIncrementTick+0x84>
 8005d82:	2300      	movs	r3, #0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d004      	beq.n	8005d92 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d88:	4b36      	ldr	r3, [pc, #216]	; (8005e64 <xTaskIncrementTick+0x164>)
 8005d8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d8e:	601a      	str	r2, [r3, #0]
					break;
 8005d90:	e03e      	b.n	8005e10 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005d92:	4b31      	ldr	r3, [pc, #196]	; (8005e58 <xTaskIncrementTick+0x158>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d203      	bcs.n	8005db2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005daa:	4a2e      	ldr	r2, [pc, #184]	; (8005e64 <xTaskIncrementTick+0x164>)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6013      	str	r3, [r2, #0]
						break;
 8005db0:	e02e      	b.n	8005e10 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	3304      	adds	r3, #4
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff f9c4 	bl	8005144 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d004      	beq.n	8005dce <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	3318      	adds	r3, #24
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff f9bb 	bl	8005144 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	409a      	lsls	r2, r3
 8005dd6:	4b24      	ldr	r3, [pc, #144]	; (8005e68 <xTaskIncrementTick+0x168>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	4a22      	ldr	r2, [pc, #136]	; (8005e68 <xTaskIncrementTick+0x168>)
 8005dde:	6013      	str	r3, [r2, #0]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de4:	4613      	mov	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4a1f      	ldr	r2, [pc, #124]	; (8005e6c <xTaskIncrementTick+0x16c>)
 8005dee:	441a      	add	r2, r3
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	3304      	adds	r3, #4
 8005df4:	4619      	mov	r1, r3
 8005df6:	4610      	mov	r0, r2
 8005df8:	f7ff f949 	bl	800508e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e00:	4b1b      	ldr	r3, [pc, #108]	; (8005e70 <xTaskIncrementTick+0x170>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d3b4      	bcc.n	8005d74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e0e:	e7b1      	b.n	8005d74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e10:	4b17      	ldr	r3, [pc, #92]	; (8005e70 <xTaskIncrementTick+0x170>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e16:	4915      	ldr	r1, [pc, #84]	; (8005e6c <xTaskIncrementTick+0x16c>)
 8005e18:	4613      	mov	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	440b      	add	r3, r1
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d907      	bls.n	8005e38 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	617b      	str	r3, [r7, #20]
 8005e2c:	e004      	b.n	8005e38 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005e2e:	4b11      	ldr	r3, [pc, #68]	; (8005e74 <xTaskIncrementTick+0x174>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3301      	adds	r3, #1
 8005e34:	4a0f      	ldr	r2, [pc, #60]	; (8005e74 <xTaskIncrementTick+0x174>)
 8005e36:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005e38:	4b0f      	ldr	r3, [pc, #60]	; (8005e78 <xTaskIncrementTick+0x178>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005e40:	2301      	movs	r3, #1
 8005e42:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005e44:	697b      	ldr	r3, [r7, #20]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	200007c4 	.word	0x200007c4
 8005e54:	200007a0 	.word	0x200007a0
 8005e58:	20000754 	.word	0x20000754
 8005e5c:	20000758 	.word	0x20000758
 8005e60:	200007b4 	.word	0x200007b4
 8005e64:	200007bc 	.word	0x200007bc
 8005e68:	200007a4 	.word	0x200007a4
 8005e6c:	200006a0 	.word	0x200006a0
 8005e70:	2000069c 	.word	0x2000069c
 8005e74:	200007ac 	.word	0x200007ac
 8005e78:	200007b0 	.word	0x200007b0

08005e7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e82:	4b29      	ldr	r3, [pc, #164]	; (8005f28 <vTaskSwitchContext+0xac>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e8a:	4b28      	ldr	r3, [pc, #160]	; (8005f2c <vTaskSwitchContext+0xb0>)
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e90:	e044      	b.n	8005f1c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005e92:	4b26      	ldr	r3, [pc, #152]	; (8005f2c <vTaskSwitchContext+0xb0>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005e98:	4b25      	ldr	r3, [pc, #148]	; (8005f30 <vTaskSwitchContext+0xb4>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	fab3 f383 	clz	r3, r3
 8005ea4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005ea6:	7afb      	ldrb	r3, [r7, #11]
 8005ea8:	f1c3 031f 	rsb	r3, r3, #31
 8005eac:	617b      	str	r3, [r7, #20]
 8005eae:	4921      	ldr	r1, [pc, #132]	; (8005f34 <vTaskSwitchContext+0xb8>)
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	440b      	add	r3, r1
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10a      	bne.n	8005ed8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	607b      	str	r3, [r7, #4]
}
 8005ed4:	bf00      	nop
 8005ed6:	e7fe      	b.n	8005ed6 <vTaskSwitchContext+0x5a>
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	4613      	mov	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4a14      	ldr	r2, [pc, #80]	; (8005f34 <vTaskSwitchContext+0xb8>)
 8005ee4:	4413      	add	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	605a      	str	r2, [r3, #4]
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	3308      	adds	r3, #8
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d104      	bne.n	8005f08 <vTaskSwitchContext+0x8c>
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	605a      	str	r2, [r3, #4]
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	4a0a      	ldr	r2, [pc, #40]	; (8005f38 <vTaskSwitchContext+0xbc>)
 8005f10:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f12:	4b09      	ldr	r3, [pc, #36]	; (8005f38 <vTaskSwitchContext+0xbc>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	334c      	adds	r3, #76	; 0x4c
 8005f18:	4a08      	ldr	r2, [pc, #32]	; (8005f3c <vTaskSwitchContext+0xc0>)
 8005f1a:	6013      	str	r3, [r2, #0]
}
 8005f1c:	bf00      	nop
 8005f1e:	371c      	adds	r7, #28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bc80      	pop	{r7}
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	200007c4 	.word	0x200007c4
 8005f2c:	200007b0 	.word	0x200007b0
 8005f30:	200007a4 	.word	0x200007a4
 8005f34:	200006a0 	.word	0x200006a0
 8005f38:	2000069c 	.word	0x2000069c
 8005f3c:	20000018 	.word	0x20000018

08005f40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10a      	bne.n	8005f66 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	60fb      	str	r3, [r7, #12]
}
 8005f62:	bf00      	nop
 8005f64:	e7fe      	b.n	8005f64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f66:	4b07      	ldr	r3, [pc, #28]	; (8005f84 <vTaskPlaceOnEventList+0x44>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3318      	adds	r3, #24
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7ff f8b0 	bl	80050d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f74:	2101      	movs	r1, #1
 8005f76:	6838      	ldr	r0, [r7, #0]
 8005f78:	f000 fa6e 	bl	8006458 <prvAddCurrentTaskToDelayedList>
}
 8005f7c:	bf00      	nop
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	2000069c 	.word	0x2000069c

08005f88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10a      	bne.n	8005fb4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	60fb      	str	r3, [r7, #12]
}
 8005fb0:	bf00      	nop
 8005fb2:	e7fe      	b.n	8005fb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	3318      	adds	r3, #24
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7ff f8c3 	bl	8005144 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fbe:	4b1d      	ldr	r3, [pc, #116]	; (8006034 <xTaskRemoveFromEventList+0xac>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d11c      	bne.n	8006000 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	3304      	adds	r3, #4
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7ff f8ba 	bl	8005144 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	409a      	lsls	r2, r3
 8005fd8:	4b17      	ldr	r3, [pc, #92]	; (8006038 <xTaskRemoveFromEventList+0xb0>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	4a16      	ldr	r2, [pc, #88]	; (8006038 <xTaskRemoveFromEventList+0xb0>)
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4a13      	ldr	r2, [pc, #76]	; (800603c <xTaskRemoveFromEventList+0xb4>)
 8005ff0:	441a      	add	r2, r3
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	f7ff f848 	bl	800508e <vListInsertEnd>
 8005ffe:	e005      	b.n	800600c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	3318      	adds	r3, #24
 8006004:	4619      	mov	r1, r3
 8006006:	480e      	ldr	r0, [pc, #56]	; (8006040 <xTaskRemoveFromEventList+0xb8>)
 8006008:	f7ff f841 	bl	800508e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006010:	4b0c      	ldr	r3, [pc, #48]	; (8006044 <xTaskRemoveFromEventList+0xbc>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006016:	429a      	cmp	r2, r3
 8006018:	d905      	bls.n	8006026 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800601a:	2301      	movs	r3, #1
 800601c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800601e:	4b0a      	ldr	r3, [pc, #40]	; (8006048 <xTaskRemoveFromEventList+0xc0>)
 8006020:	2201      	movs	r2, #1
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	e001      	b.n	800602a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006026:	2300      	movs	r3, #0
 8006028:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800602a:	697b      	ldr	r3, [r7, #20]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	200007c4 	.word	0x200007c4
 8006038:	200007a4 	.word	0x200007a4
 800603c:	200006a0 	.word	0x200006a0
 8006040:	2000075c 	.word	0x2000075c
 8006044:	2000069c 	.word	0x2000069c
 8006048:	200007b0 	.word	0x200007b0

0800604c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006054:	4b06      	ldr	r3, [pc, #24]	; (8006070 <vTaskInternalSetTimeOutState+0x24>)
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800605c:	4b05      	ldr	r3, [pc, #20]	; (8006074 <vTaskInternalSetTimeOutState+0x28>)
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	605a      	str	r2, [r3, #4]
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	bc80      	pop	{r7}
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	200007b4 	.word	0x200007b4
 8006074:	200007a0 	.word	0x200007a0

08006078 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b088      	sub	sp, #32
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10a      	bne.n	800609e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608c:	f383 8811 	msr	BASEPRI, r3
 8006090:	f3bf 8f6f 	isb	sy
 8006094:	f3bf 8f4f 	dsb	sy
 8006098:	613b      	str	r3, [r7, #16]
}
 800609a:	bf00      	nop
 800609c:	e7fe      	b.n	800609c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10a      	bne.n	80060ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80060a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a8:	f383 8811 	msr	BASEPRI, r3
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	60fb      	str	r3, [r7, #12]
}
 80060b6:	bf00      	nop
 80060b8:	e7fe      	b.n	80060b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80060ba:	f000 fb27 	bl	800670c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80060be:	4b1d      	ldr	r3, [pc, #116]	; (8006134 <xTaskCheckForTimeOut+0xbc>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060d6:	d102      	bne.n	80060de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80060d8:	2300      	movs	r3, #0
 80060da:	61fb      	str	r3, [r7, #28]
 80060dc:	e023      	b.n	8006126 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	4b15      	ldr	r3, [pc, #84]	; (8006138 <xTaskCheckForTimeOut+0xc0>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d007      	beq.n	80060fa <xTaskCheckForTimeOut+0x82>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d302      	bcc.n	80060fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80060f4:	2301      	movs	r3, #1
 80060f6:	61fb      	str	r3, [r7, #28]
 80060f8:	e015      	b.n	8006126 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	429a      	cmp	r2, r3
 8006102:	d20b      	bcs.n	800611c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	1ad2      	subs	r2, r2, r3
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7ff ff9b 	bl	800604c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006116:	2300      	movs	r3, #0
 8006118:	61fb      	str	r3, [r7, #28]
 800611a:	e004      	b.n	8006126 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006122:	2301      	movs	r3, #1
 8006124:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006126:	f000 fb21 	bl	800676c <vPortExitCritical>

	return xReturn;
 800612a:	69fb      	ldr	r3, [r7, #28]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3720      	adds	r7, #32
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	200007a0 	.word	0x200007a0
 8006138:	200007b4 	.word	0x200007b4

0800613c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006140:	4b03      	ldr	r3, [pc, #12]	; (8006150 <vTaskMissedYield+0x14>)
 8006142:	2201      	movs	r2, #1
 8006144:	601a      	str	r2, [r3, #0]
}
 8006146:	bf00      	nop
 8006148:	46bd      	mov	sp, r7
 800614a:	bc80      	pop	{r7}
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	200007b0 	.word	0x200007b0

08006154 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800615c:	f000 f852 	bl	8006204 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006160:	4b06      	ldr	r3, [pc, #24]	; (800617c <prvIdleTask+0x28>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d9f9      	bls.n	800615c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006168:	4b05      	ldr	r3, [pc, #20]	; (8006180 <prvIdleTask+0x2c>)
 800616a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006178:	e7f0      	b.n	800615c <prvIdleTask+0x8>
 800617a:	bf00      	nop
 800617c:	200006a0 	.word	0x200006a0
 8006180:	e000ed04 	.word	0xe000ed04

08006184 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800618a:	2300      	movs	r3, #0
 800618c:	607b      	str	r3, [r7, #4]
 800618e:	e00c      	b.n	80061aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	4613      	mov	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4a12      	ldr	r2, [pc, #72]	; (80061e4 <prvInitialiseTaskLists+0x60>)
 800619c:	4413      	add	r3, r2
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe ff4a 	bl	8005038 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3301      	adds	r3, #1
 80061a8:	607b      	str	r3, [r7, #4]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b06      	cmp	r3, #6
 80061ae:	d9ef      	bls.n	8006190 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061b0:	480d      	ldr	r0, [pc, #52]	; (80061e8 <prvInitialiseTaskLists+0x64>)
 80061b2:	f7fe ff41 	bl	8005038 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061b6:	480d      	ldr	r0, [pc, #52]	; (80061ec <prvInitialiseTaskLists+0x68>)
 80061b8:	f7fe ff3e 	bl	8005038 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061bc:	480c      	ldr	r0, [pc, #48]	; (80061f0 <prvInitialiseTaskLists+0x6c>)
 80061be:	f7fe ff3b 	bl	8005038 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061c2:	480c      	ldr	r0, [pc, #48]	; (80061f4 <prvInitialiseTaskLists+0x70>)
 80061c4:	f7fe ff38 	bl	8005038 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061c8:	480b      	ldr	r0, [pc, #44]	; (80061f8 <prvInitialiseTaskLists+0x74>)
 80061ca:	f7fe ff35 	bl	8005038 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061ce:	4b0b      	ldr	r3, [pc, #44]	; (80061fc <prvInitialiseTaskLists+0x78>)
 80061d0:	4a05      	ldr	r2, [pc, #20]	; (80061e8 <prvInitialiseTaskLists+0x64>)
 80061d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061d4:	4b0a      	ldr	r3, [pc, #40]	; (8006200 <prvInitialiseTaskLists+0x7c>)
 80061d6:	4a05      	ldr	r2, [pc, #20]	; (80061ec <prvInitialiseTaskLists+0x68>)
 80061d8:	601a      	str	r2, [r3, #0]
}
 80061da:	bf00      	nop
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	200006a0 	.word	0x200006a0
 80061e8:	2000072c 	.word	0x2000072c
 80061ec:	20000740 	.word	0x20000740
 80061f0:	2000075c 	.word	0x2000075c
 80061f4:	20000770 	.word	0x20000770
 80061f8:	20000788 	.word	0x20000788
 80061fc:	20000754 	.word	0x20000754
 8006200:	20000758 	.word	0x20000758

08006204 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800620a:	e019      	b.n	8006240 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800620c:	f000 fa7e 	bl	800670c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006210:	4b10      	ldr	r3, [pc, #64]	; (8006254 <prvCheckTasksWaitingTermination+0x50>)
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	3304      	adds	r3, #4
 800621c:	4618      	mov	r0, r3
 800621e:	f7fe ff91 	bl	8005144 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006222:	4b0d      	ldr	r3, [pc, #52]	; (8006258 <prvCheckTasksWaitingTermination+0x54>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	3b01      	subs	r3, #1
 8006228:	4a0b      	ldr	r2, [pc, #44]	; (8006258 <prvCheckTasksWaitingTermination+0x54>)
 800622a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800622c:	4b0b      	ldr	r3, [pc, #44]	; (800625c <prvCheckTasksWaitingTermination+0x58>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3b01      	subs	r3, #1
 8006232:	4a0a      	ldr	r2, [pc, #40]	; (800625c <prvCheckTasksWaitingTermination+0x58>)
 8006234:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006236:	f000 fa99 	bl	800676c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f810 	bl	8006260 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006240:	4b06      	ldr	r3, [pc, #24]	; (800625c <prvCheckTasksWaitingTermination+0x58>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1e1      	bne.n	800620c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006248:	bf00      	nop
 800624a:	bf00      	nop
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	20000770 	.word	0x20000770
 8006258:	2000079c 	.word	0x2000079c
 800625c:	20000784 	.word	0x20000784

08006260 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	334c      	adds	r3, #76	; 0x4c
 800626c:	4618      	mov	r0, r3
 800626e:	f001 fbb1 	bl	80079d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006278:	2b00      	cmp	r3, #0
 800627a:	d108      	bne.n	800628e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006280:	4618      	mov	r0, r3
 8006282:	f000 fbc9 	bl	8006a18 <vPortFree>
				vPortFree( pxTCB );
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fbc6 	bl	8006a18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800628c:	e018      	b.n	80062c0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006294:	2b01      	cmp	r3, #1
 8006296:	d103      	bne.n	80062a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fbbd 	bl	8006a18 <vPortFree>
	}
 800629e:	e00f      	b.n	80062c0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d00a      	beq.n	80062c0 <prvDeleteTCB+0x60>
	__asm volatile
 80062aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	60fb      	str	r3, [r7, #12]
}
 80062bc:	bf00      	nop
 80062be:	e7fe      	b.n	80062be <prvDeleteTCB+0x5e>
	}
 80062c0:	bf00      	nop
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062ce:	4b0e      	ldr	r3, [pc, #56]	; (8006308 <prvResetNextTaskUnblockTime+0x40>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <prvResetNextTaskUnblockTime+0x14>
 80062d8:	2301      	movs	r3, #1
 80062da:	e000      	b.n	80062de <prvResetNextTaskUnblockTime+0x16>
 80062dc:	2300      	movs	r3, #0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d004      	beq.n	80062ec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80062e2:	4b0a      	ldr	r3, [pc, #40]	; (800630c <prvResetNextTaskUnblockTime+0x44>)
 80062e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062e8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80062ea:	e008      	b.n	80062fe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80062ec:	4b06      	ldr	r3, [pc, #24]	; (8006308 <prvResetNextTaskUnblockTime+0x40>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	4a04      	ldr	r2, [pc, #16]	; (800630c <prvResetNextTaskUnblockTime+0x44>)
 80062fc:	6013      	str	r3, [r2, #0]
}
 80062fe:	bf00      	nop
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	bc80      	pop	{r7}
 8006306:	4770      	bx	lr
 8006308:	20000754 	.word	0x20000754
 800630c:	200007bc 	.word	0x200007bc

08006310 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006316:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <xTaskGetSchedulerState+0x34>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d102      	bne.n	8006324 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800631e:	2301      	movs	r3, #1
 8006320:	607b      	str	r3, [r7, #4]
 8006322:	e008      	b.n	8006336 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006324:	4b08      	ldr	r3, [pc, #32]	; (8006348 <xTaskGetSchedulerState+0x38>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d102      	bne.n	8006332 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800632c:	2302      	movs	r3, #2
 800632e:	607b      	str	r3, [r7, #4]
 8006330:	e001      	b.n	8006336 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006332:	2300      	movs	r3, #0
 8006334:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006336:	687b      	ldr	r3, [r7, #4]
	}
 8006338:	4618      	mov	r0, r3
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	bc80      	pop	{r7}
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	200007a8 	.word	0x200007a8
 8006348:	200007c4 	.word	0x200007c4

0800634c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006358:	2300      	movs	r3, #0
 800635a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d06e      	beq.n	8006440 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006362:	4b3a      	ldr	r3, [pc, #232]	; (800644c <xTaskPriorityDisinherit+0x100>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	429a      	cmp	r2, r3
 800636a:	d00a      	beq.n	8006382 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	60fb      	str	r3, [r7, #12]
}
 800637e:	bf00      	nop
 8006380:	e7fe      	b.n	8006380 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10a      	bne.n	80063a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	60bb      	str	r3, [r7, #8]
}
 800639c:	bf00      	nop
 800639e:	e7fe      	b.n	800639e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a4:	1e5a      	subs	r2, r3, #1
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d044      	beq.n	8006440 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d140      	bne.n	8006440 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	3304      	adds	r3, #4
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fe febe 	bl	8005144 <uxListRemove>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d115      	bne.n	80063fa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d2:	491f      	ldr	r1, [pc, #124]	; (8006450 <xTaskPriorityDisinherit+0x104>)
 80063d4:	4613      	mov	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	440b      	add	r3, r1
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10a      	bne.n	80063fa <xTaskPriorityDisinherit+0xae>
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e8:	2201      	movs	r2, #1
 80063ea:	fa02 f303 	lsl.w	r3, r2, r3
 80063ee:	43da      	mvns	r2, r3
 80063f0:	4b18      	ldr	r3, [pc, #96]	; (8006454 <xTaskPriorityDisinherit+0x108>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4013      	ands	r3, r2
 80063f6:	4a17      	ldr	r2, [pc, #92]	; (8006454 <xTaskPriorityDisinherit+0x108>)
 80063f8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006406:	f1c3 0207 	rsb	r2, r3, #7
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006412:	2201      	movs	r2, #1
 8006414:	409a      	lsls	r2, r3
 8006416:	4b0f      	ldr	r3, [pc, #60]	; (8006454 <xTaskPriorityDisinherit+0x108>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4313      	orrs	r3, r2
 800641c:	4a0d      	ldr	r2, [pc, #52]	; (8006454 <xTaskPriorityDisinherit+0x108>)
 800641e:	6013      	str	r3, [r2, #0]
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006424:	4613      	mov	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4a08      	ldr	r2, [pc, #32]	; (8006450 <xTaskPriorityDisinherit+0x104>)
 800642e:	441a      	add	r2, r3
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	3304      	adds	r3, #4
 8006434:	4619      	mov	r1, r3
 8006436:	4610      	mov	r0, r2
 8006438:	f7fe fe29 	bl	800508e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800643c:	2301      	movs	r3, #1
 800643e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006440:	697b      	ldr	r3, [r7, #20]
	}
 8006442:	4618      	mov	r0, r3
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	2000069c 	.word	0x2000069c
 8006450:	200006a0 	.word	0x200006a0
 8006454:	200007a4 	.word	0x200007a4

08006458 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006462:	4b29      	ldr	r3, [pc, #164]	; (8006508 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006468:	4b28      	ldr	r3, [pc, #160]	; (800650c <prvAddCurrentTaskToDelayedList+0xb4>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3304      	adds	r3, #4
 800646e:	4618      	mov	r0, r3
 8006470:	f7fe fe68 	bl	8005144 <uxListRemove>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10b      	bne.n	8006492 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800647a:	4b24      	ldr	r3, [pc, #144]	; (800650c <prvAddCurrentTaskToDelayedList+0xb4>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006480:	2201      	movs	r2, #1
 8006482:	fa02 f303 	lsl.w	r3, r2, r3
 8006486:	43da      	mvns	r2, r3
 8006488:	4b21      	ldr	r3, [pc, #132]	; (8006510 <prvAddCurrentTaskToDelayedList+0xb8>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4013      	ands	r3, r2
 800648e:	4a20      	ldr	r2, [pc, #128]	; (8006510 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006490:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006498:	d10a      	bne.n	80064b0 <prvAddCurrentTaskToDelayedList+0x58>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d007      	beq.n	80064b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064a0:	4b1a      	ldr	r3, [pc, #104]	; (800650c <prvAddCurrentTaskToDelayedList+0xb4>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3304      	adds	r3, #4
 80064a6:	4619      	mov	r1, r3
 80064a8:	481a      	ldr	r0, [pc, #104]	; (8006514 <prvAddCurrentTaskToDelayedList+0xbc>)
 80064aa:	f7fe fdf0 	bl	800508e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80064ae:	e026      	b.n	80064fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4413      	add	r3, r2
 80064b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80064b8:	4b14      	ldr	r3, [pc, #80]	; (800650c <prvAddCurrentTaskToDelayedList+0xb4>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d209      	bcs.n	80064dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064c8:	4b13      	ldr	r3, [pc, #76]	; (8006518 <prvAddCurrentTaskToDelayedList+0xc0>)
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	4b0f      	ldr	r3, [pc, #60]	; (800650c <prvAddCurrentTaskToDelayedList+0xb4>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3304      	adds	r3, #4
 80064d2:	4619      	mov	r1, r3
 80064d4:	4610      	mov	r0, r2
 80064d6:	f7fe fdfd 	bl	80050d4 <vListInsert>
}
 80064da:	e010      	b.n	80064fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064dc:	4b0f      	ldr	r3, [pc, #60]	; (800651c <prvAddCurrentTaskToDelayedList+0xc4>)
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	4b0a      	ldr	r3, [pc, #40]	; (800650c <prvAddCurrentTaskToDelayedList+0xb4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3304      	adds	r3, #4
 80064e6:	4619      	mov	r1, r3
 80064e8:	4610      	mov	r0, r2
 80064ea:	f7fe fdf3 	bl	80050d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80064ee:	4b0c      	ldr	r3, [pc, #48]	; (8006520 <prvAddCurrentTaskToDelayedList+0xc8>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d202      	bcs.n	80064fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80064f8:	4a09      	ldr	r2, [pc, #36]	; (8006520 <prvAddCurrentTaskToDelayedList+0xc8>)
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	6013      	str	r3, [r2, #0]
}
 80064fe:	bf00      	nop
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	200007a0 	.word	0x200007a0
 800650c:	2000069c 	.word	0x2000069c
 8006510:	200007a4 	.word	0x200007a4
 8006514:	20000788 	.word	0x20000788
 8006518:	20000758 	.word	0x20000758
 800651c:	20000754 	.word	0x20000754
 8006520:	200007bc 	.word	0x200007bc

08006524 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	3b04      	subs	r3, #4
 8006534:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800653c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3b04      	subs	r3, #4
 8006542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f023 0201 	bic.w	r2, r3, #1
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	3b04      	subs	r3, #4
 8006552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006554:	4a08      	ldr	r2, [pc, #32]	; (8006578 <pxPortInitialiseStack+0x54>)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	3b14      	subs	r3, #20
 800655e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	3b20      	subs	r3, #32
 800656a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800656c:	68fb      	ldr	r3, [r7, #12]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	bc80      	pop	{r7}
 8006576:	4770      	bx	lr
 8006578:	0800657d 	.word	0x0800657d

0800657c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006582:	2300      	movs	r3, #0
 8006584:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006586:	4b12      	ldr	r3, [pc, #72]	; (80065d0 <prvTaskExitError+0x54>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800658e:	d00a      	beq.n	80065a6 <prvTaskExitError+0x2a>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	60fb      	str	r3, [r7, #12]
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <prvTaskExitError+0x28>
	__asm volatile
 80065a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	60bb      	str	r3, [r7, #8]
}
 80065b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80065ba:	bf00      	nop
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d0fc      	beq.n	80065bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065c2:	bf00      	nop
 80065c4:	bf00      	nop
 80065c6:	3714      	adds	r7, #20
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bc80      	pop	{r7}
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	20000014 	.word	0x20000014
	...

080065e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80065e0:	4b07      	ldr	r3, [pc, #28]	; (8006600 <pxCurrentTCBConst2>)
 80065e2:	6819      	ldr	r1, [r3, #0]
 80065e4:	6808      	ldr	r0, [r1, #0]
 80065e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80065ea:	f380 8809 	msr	PSP, r0
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f04f 0000 	mov.w	r0, #0
 80065f6:	f380 8811 	msr	BASEPRI, r0
 80065fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80065fe:	4770      	bx	lr

08006600 <pxCurrentTCBConst2>:
 8006600:	2000069c 	.word	0x2000069c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006604:	bf00      	nop
 8006606:	bf00      	nop

08006608 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006608:	4806      	ldr	r0, [pc, #24]	; (8006624 <prvPortStartFirstTask+0x1c>)
 800660a:	6800      	ldr	r0, [r0, #0]
 800660c:	6800      	ldr	r0, [r0, #0]
 800660e:	f380 8808 	msr	MSP, r0
 8006612:	b662      	cpsie	i
 8006614:	b661      	cpsie	f
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	df00      	svc	0
 8006620:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006622:	bf00      	nop
 8006624:	e000ed08 	.word	0xe000ed08

08006628 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800662e:	4b32      	ldr	r3, [pc, #200]	; (80066f8 <xPortStartScheduler+0xd0>)
 8006630:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	b2db      	uxtb	r3, r3
 8006638:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	22ff      	movs	r2, #255	; 0xff
 800663e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	b2db      	uxtb	r3, r3
 8006646:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006648:	78fb      	ldrb	r3, [r7, #3]
 800664a:	b2db      	uxtb	r3, r3
 800664c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006650:	b2da      	uxtb	r2, r3
 8006652:	4b2a      	ldr	r3, [pc, #168]	; (80066fc <xPortStartScheduler+0xd4>)
 8006654:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006656:	4b2a      	ldr	r3, [pc, #168]	; (8006700 <xPortStartScheduler+0xd8>)
 8006658:	2207      	movs	r2, #7
 800665a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800665c:	e009      	b.n	8006672 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800665e:	4b28      	ldr	r3, [pc, #160]	; (8006700 <xPortStartScheduler+0xd8>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3b01      	subs	r3, #1
 8006664:	4a26      	ldr	r2, [pc, #152]	; (8006700 <xPortStartScheduler+0xd8>)
 8006666:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006668:	78fb      	ldrb	r3, [r7, #3]
 800666a:	b2db      	uxtb	r3, r3
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	b2db      	uxtb	r3, r3
 8006670:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006672:	78fb      	ldrb	r3, [r7, #3]
 8006674:	b2db      	uxtb	r3, r3
 8006676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800667a:	2b80      	cmp	r3, #128	; 0x80
 800667c:	d0ef      	beq.n	800665e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800667e:	4b20      	ldr	r3, [pc, #128]	; (8006700 <xPortStartScheduler+0xd8>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f1c3 0307 	rsb	r3, r3, #7
 8006686:	2b04      	cmp	r3, #4
 8006688:	d00a      	beq.n	80066a0 <xPortStartScheduler+0x78>
	__asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	60bb      	str	r3, [r7, #8]
}
 800669c:	bf00      	nop
 800669e:	e7fe      	b.n	800669e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066a0:	4b17      	ldr	r3, [pc, #92]	; (8006700 <xPortStartScheduler+0xd8>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	021b      	lsls	r3, r3, #8
 80066a6:	4a16      	ldr	r2, [pc, #88]	; (8006700 <xPortStartScheduler+0xd8>)
 80066a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066aa:	4b15      	ldr	r3, [pc, #84]	; (8006700 <xPortStartScheduler+0xd8>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066b2:	4a13      	ldr	r2, [pc, #76]	; (8006700 <xPortStartScheduler+0xd8>)
 80066b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066be:	4b11      	ldr	r3, [pc, #68]	; (8006704 <xPortStartScheduler+0xdc>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a10      	ldr	r2, [pc, #64]	; (8006704 <xPortStartScheduler+0xdc>)
 80066c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066ca:	4b0e      	ldr	r3, [pc, #56]	; (8006704 <xPortStartScheduler+0xdc>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a0d      	ldr	r2, [pc, #52]	; (8006704 <xPortStartScheduler+0xdc>)
 80066d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80066d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80066d6:	f000 f8b9 	bl	800684c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80066da:	4b0b      	ldr	r3, [pc, #44]	; (8006708 <xPortStartScheduler+0xe0>)
 80066dc:	2200      	movs	r2, #0
 80066de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80066e0:	f7ff ff92 	bl	8006608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80066e4:	f7ff fbca 	bl	8005e7c <vTaskSwitchContext>
	prvTaskExitError();
 80066e8:	f7ff ff48 	bl	800657c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	e000e400 	.word	0xe000e400
 80066fc:	200007c8 	.word	0x200007c8
 8006700:	200007cc 	.word	0x200007cc
 8006704:	e000ed20 	.word	0xe000ed20
 8006708:	20000014 	.word	0x20000014

0800670c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
	__asm volatile
 8006712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	607b      	str	r3, [r7, #4]
}
 8006724:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006726:	4b0f      	ldr	r3, [pc, #60]	; (8006764 <vPortEnterCritical+0x58>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	3301      	adds	r3, #1
 800672c:	4a0d      	ldr	r2, [pc, #52]	; (8006764 <vPortEnterCritical+0x58>)
 800672e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006730:	4b0c      	ldr	r3, [pc, #48]	; (8006764 <vPortEnterCritical+0x58>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d10f      	bne.n	8006758 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006738:	4b0b      	ldr	r3, [pc, #44]	; (8006768 <vPortEnterCritical+0x5c>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00a      	beq.n	8006758 <vPortEnterCritical+0x4c>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	603b      	str	r3, [r7, #0]
}
 8006754:	bf00      	nop
 8006756:	e7fe      	b.n	8006756 <vPortEnterCritical+0x4a>
	}
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	bc80      	pop	{r7}
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	20000014 	.word	0x20000014
 8006768:	e000ed04 	.word	0xe000ed04

0800676c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006772:	4b11      	ldr	r3, [pc, #68]	; (80067b8 <vPortExitCritical+0x4c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10a      	bne.n	8006790 <vPortExitCritical+0x24>
	__asm volatile
 800677a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677e:	f383 8811 	msr	BASEPRI, r3
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	f3bf 8f4f 	dsb	sy
 800678a:	607b      	str	r3, [r7, #4]
}
 800678c:	bf00      	nop
 800678e:	e7fe      	b.n	800678e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006790:	4b09      	ldr	r3, [pc, #36]	; (80067b8 <vPortExitCritical+0x4c>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3b01      	subs	r3, #1
 8006796:	4a08      	ldr	r2, [pc, #32]	; (80067b8 <vPortExitCritical+0x4c>)
 8006798:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800679a:	4b07      	ldr	r3, [pc, #28]	; (80067b8 <vPortExitCritical+0x4c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d105      	bne.n	80067ae <vPortExitCritical+0x42>
 80067a2:	2300      	movs	r3, #0
 80067a4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80067ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80067ae:	bf00      	nop
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bc80      	pop	{r7}
 80067b6:	4770      	bx	lr
 80067b8:	20000014 	.word	0x20000014
 80067bc:	00000000 	.word	0x00000000

080067c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80067c0:	f3ef 8009 	mrs	r0, PSP
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	4b0d      	ldr	r3, [pc, #52]	; (8006800 <pxCurrentTCBConst>)
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80067d0:	6010      	str	r0, [r2, #0]
 80067d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80067d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80067da:	f380 8811 	msr	BASEPRI, r0
 80067de:	f7ff fb4d 	bl	8005e7c <vTaskSwitchContext>
 80067e2:	f04f 0000 	mov.w	r0, #0
 80067e6:	f380 8811 	msr	BASEPRI, r0
 80067ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80067ee:	6819      	ldr	r1, [r3, #0]
 80067f0:	6808      	ldr	r0, [r1, #0]
 80067f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80067f6:	f380 8809 	msr	PSP, r0
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	4770      	bx	lr

08006800 <pxCurrentTCBConst>:
 8006800:	2000069c 	.word	0x2000069c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006804:	bf00      	nop
 8006806:	bf00      	nop

08006808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	607b      	str	r3, [r7, #4]
}
 8006820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006822:	f7ff fa6d 	bl	8005d00 <xTaskIncrementTick>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800682c:	4b06      	ldr	r3, [pc, #24]	; (8006848 <SysTick_Handler+0x40>)
 800682e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	2300      	movs	r3, #0
 8006836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	f383 8811 	msr	BASEPRI, r3
}
 800683e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006840:	bf00      	nop
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	e000ed04 	.word	0xe000ed04

0800684c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800684c:	b480      	push	{r7}
 800684e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006850:	4b0a      	ldr	r3, [pc, #40]	; (800687c <vPortSetupTimerInterrupt+0x30>)
 8006852:	2200      	movs	r2, #0
 8006854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006856:	4b0a      	ldr	r3, [pc, #40]	; (8006880 <vPortSetupTimerInterrupt+0x34>)
 8006858:	2200      	movs	r2, #0
 800685a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800685c:	4b09      	ldr	r3, [pc, #36]	; (8006884 <vPortSetupTimerInterrupt+0x38>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a09      	ldr	r2, [pc, #36]	; (8006888 <vPortSetupTimerInterrupt+0x3c>)
 8006862:	fba2 2303 	umull	r2, r3, r2, r3
 8006866:	099b      	lsrs	r3, r3, #6
 8006868:	4a08      	ldr	r2, [pc, #32]	; (800688c <vPortSetupTimerInterrupt+0x40>)
 800686a:	3b01      	subs	r3, #1
 800686c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800686e:	4b03      	ldr	r3, [pc, #12]	; (800687c <vPortSetupTimerInterrupt+0x30>)
 8006870:	2207      	movs	r2, #7
 8006872:	601a      	str	r2, [r3, #0]
}
 8006874:	bf00      	nop
 8006876:	46bd      	mov	sp, r7
 8006878:	bc80      	pop	{r7}
 800687a:	4770      	bx	lr
 800687c:	e000e010 	.word	0xe000e010
 8006880:	e000e018 	.word	0xe000e018
 8006884:	20000008 	.word	0x20000008
 8006888:	10624dd3 	.word	0x10624dd3
 800688c:	e000e014 	.word	0xe000e014

08006890 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b08a      	sub	sp, #40	; 0x28
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006898:	2300      	movs	r3, #0
 800689a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800689c:	f7ff f986 	bl	8005bac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80068a0:	4b58      	ldr	r3, [pc, #352]	; (8006a04 <pvPortMalloc+0x174>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80068a8:	f000 f910 	bl	8006acc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80068ac:	4b56      	ldr	r3, [pc, #344]	; (8006a08 <pvPortMalloc+0x178>)
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4013      	ands	r3, r2
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f040 808e 	bne.w	80069d6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d01d      	beq.n	80068fc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80068c0:	2208      	movs	r2, #8
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4413      	add	r3, r2
 80068c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f003 0307 	and.w	r3, r3, #7
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d014      	beq.n	80068fc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f023 0307 	bic.w	r3, r3, #7
 80068d8:	3308      	adds	r3, #8
 80068da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f003 0307 	and.w	r3, r3, #7
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00a      	beq.n	80068fc <pvPortMalloc+0x6c>
	__asm volatile
 80068e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ea:	f383 8811 	msr	BASEPRI, r3
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	617b      	str	r3, [r7, #20]
}
 80068f8:	bf00      	nop
 80068fa:	e7fe      	b.n	80068fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d069      	beq.n	80069d6 <pvPortMalloc+0x146>
 8006902:	4b42      	ldr	r3, [pc, #264]	; (8006a0c <pvPortMalloc+0x17c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	429a      	cmp	r2, r3
 800690a:	d864      	bhi.n	80069d6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800690c:	4b40      	ldr	r3, [pc, #256]	; (8006a10 <pvPortMalloc+0x180>)
 800690e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006910:	4b3f      	ldr	r3, [pc, #252]	; (8006a10 <pvPortMalloc+0x180>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006916:	e004      	b.n	8006922 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	429a      	cmp	r2, r3
 800692a:	d903      	bls.n	8006934 <pvPortMalloc+0xa4>
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1f1      	bne.n	8006918 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006934:	4b33      	ldr	r3, [pc, #204]	; (8006a04 <pvPortMalloc+0x174>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800693a:	429a      	cmp	r2, r3
 800693c:	d04b      	beq.n	80069d6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2208      	movs	r2, #8
 8006944:	4413      	add	r3, r2
 8006946:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	1ad2      	subs	r2, r2, r3
 8006958:	2308      	movs	r3, #8
 800695a:	005b      	lsls	r3, r3, #1
 800695c:	429a      	cmp	r2, r3
 800695e:	d91f      	bls.n	80069a0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4413      	add	r3, r2
 8006966:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	f003 0307 	and.w	r3, r3, #7
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <pvPortMalloc+0xf8>
	__asm volatile
 8006972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	613b      	str	r3, [r7, #16]
}
 8006984:	bf00      	nop
 8006986:	e7fe      	b.n	8006986 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	1ad2      	subs	r2, r2, r3
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800699a:	69b8      	ldr	r0, [r7, #24]
 800699c:	f000 f8f8 	bl	8006b90 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80069a0:	4b1a      	ldr	r3, [pc, #104]	; (8006a0c <pvPortMalloc+0x17c>)
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	4a18      	ldr	r2, [pc, #96]	; (8006a0c <pvPortMalloc+0x17c>)
 80069ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80069ae:	4b17      	ldr	r3, [pc, #92]	; (8006a0c <pvPortMalloc+0x17c>)
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	4b18      	ldr	r3, [pc, #96]	; (8006a14 <pvPortMalloc+0x184>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d203      	bcs.n	80069c2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80069ba:	4b14      	ldr	r3, [pc, #80]	; (8006a0c <pvPortMalloc+0x17c>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a15      	ldr	r2, [pc, #84]	; (8006a14 <pvPortMalloc+0x184>)
 80069c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	4b10      	ldr	r3, [pc, #64]	; (8006a08 <pvPortMalloc+0x178>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	431a      	orrs	r2, r3
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80069d6:	f7ff f8f7 	bl	8005bc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	f003 0307 	and.w	r3, r3, #7
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00a      	beq.n	80069fa <pvPortMalloc+0x16a>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	60fb      	str	r3, [r7, #12]
}
 80069f6:	bf00      	nop
 80069f8:	e7fe      	b.n	80069f8 <pvPortMalloc+0x168>
	return pvReturn;
 80069fa:	69fb      	ldr	r3, [r7, #28]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3728      	adds	r7, #40	; 0x28
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	200013d8 	.word	0x200013d8
 8006a08:	200013e4 	.word	0x200013e4
 8006a0c:	200013dc 	.word	0x200013dc
 8006a10:	200013d0 	.word	0x200013d0
 8006a14:	200013e0 	.word	0x200013e0

08006a18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d048      	beq.n	8006abc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a2a:	2308      	movs	r3, #8
 8006a2c:	425b      	negs	r3, r3
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	4413      	add	r3, r2
 8006a32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	4b21      	ldr	r3, [pc, #132]	; (8006ac4 <vPortFree+0xac>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4013      	ands	r3, r2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10a      	bne.n	8006a5c <vPortFree+0x44>
	__asm volatile
 8006a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4a:	f383 8811 	msr	BASEPRI, r3
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	60fb      	str	r3, [r7, #12]
}
 8006a58:	bf00      	nop
 8006a5a:	e7fe      	b.n	8006a5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00a      	beq.n	8006a7a <vPortFree+0x62>
	__asm volatile
 8006a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	60bb      	str	r3, [r7, #8]
}
 8006a76:	bf00      	nop
 8006a78:	e7fe      	b.n	8006a78 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	4b11      	ldr	r3, [pc, #68]	; (8006ac4 <vPortFree+0xac>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4013      	ands	r3, r2
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d019      	beq.n	8006abc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d115      	bne.n	8006abc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	4b0b      	ldr	r3, [pc, #44]	; (8006ac4 <vPortFree+0xac>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	43db      	mvns	r3, r3
 8006a9a:	401a      	ands	r2, r3
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006aa0:	f7ff f884 	bl	8005bac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	4b07      	ldr	r3, [pc, #28]	; (8006ac8 <vPortFree+0xb0>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4413      	add	r3, r2
 8006aae:	4a06      	ldr	r2, [pc, #24]	; (8006ac8 <vPortFree+0xb0>)
 8006ab0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ab2:	6938      	ldr	r0, [r7, #16]
 8006ab4:	f000 f86c 	bl	8006b90 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006ab8:	f7ff f886 	bl	8005bc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006abc:	bf00      	nop
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	200013e4 	.word	0x200013e4
 8006ac8:	200013dc 	.word	0x200013dc

08006acc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ad2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006ad6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ad8:	4b27      	ldr	r3, [pc, #156]	; (8006b78 <prvHeapInit+0xac>)
 8006ada:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f003 0307 	and.w	r3, r3, #7
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00c      	beq.n	8006b00 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	3307      	adds	r3, #7
 8006aea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f023 0307 	bic.w	r3, r3, #7
 8006af2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	4a1f      	ldr	r2, [pc, #124]	; (8006b78 <prvHeapInit+0xac>)
 8006afc:	4413      	add	r3, r2
 8006afe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b04:	4a1d      	ldr	r2, [pc, #116]	; (8006b7c <prvHeapInit+0xb0>)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b0a:	4b1c      	ldr	r3, [pc, #112]	; (8006b7c <prvHeapInit+0xb0>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	4413      	add	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b18:	2208      	movs	r2, #8
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	1a9b      	subs	r3, r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 0307 	bic.w	r3, r3, #7
 8006b26:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	4a15      	ldr	r2, [pc, #84]	; (8006b80 <prvHeapInit+0xb4>)
 8006b2c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b2e:	4b14      	ldr	r3, [pc, #80]	; (8006b80 <prvHeapInit+0xb4>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2200      	movs	r2, #0
 8006b34:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b36:	4b12      	ldr	r3, [pc, #72]	; (8006b80 <prvHeapInit+0xb4>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	1ad2      	subs	r2, r2, r3
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b4c:	4b0c      	ldr	r3, [pc, #48]	; (8006b80 <prvHeapInit+0xb4>)
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	4a0a      	ldr	r2, [pc, #40]	; (8006b84 <prvHeapInit+0xb8>)
 8006b5a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	4a09      	ldr	r2, [pc, #36]	; (8006b88 <prvHeapInit+0xbc>)
 8006b62:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b64:	4b09      	ldr	r3, [pc, #36]	; (8006b8c <prvHeapInit+0xc0>)
 8006b66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b6a:	601a      	str	r2, [r3, #0]
}
 8006b6c:	bf00      	nop
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bc80      	pop	{r7}
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	200007d0 	.word	0x200007d0
 8006b7c:	200013d0 	.word	0x200013d0
 8006b80:	200013d8 	.word	0x200013d8
 8006b84:	200013e0 	.word	0x200013e0
 8006b88:	200013dc 	.word	0x200013dc
 8006b8c:	200013e4 	.word	0x200013e4

08006b90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b98:	4b27      	ldr	r3, [pc, #156]	; (8006c38 <prvInsertBlockIntoFreeList+0xa8>)
 8006b9a:	60fb      	str	r3, [r7, #12]
 8006b9c:	e002      	b.n	8006ba4 <prvInsertBlockIntoFreeList+0x14>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	60fb      	str	r3, [r7, #12]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d8f7      	bhi.n	8006b9e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	4413      	add	r3, r2
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d108      	bne.n	8006bd2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	441a      	add	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	441a      	add	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d118      	bne.n	8006c18 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	4b14      	ldr	r3, [pc, #80]	; (8006c3c <prvInsertBlockIntoFreeList+0xac>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d00d      	beq.n	8006c0e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	441a      	add	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	601a      	str	r2, [r3, #0]
 8006c0c:	e008      	b.n	8006c20 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c0e:	4b0b      	ldr	r3, [pc, #44]	; (8006c3c <prvInsertBlockIntoFreeList+0xac>)
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	601a      	str	r2, [r3, #0]
 8006c16:	e003      	b.n	8006c20 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d002      	beq.n	8006c2e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c2e:	bf00      	nop
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bc80      	pop	{r7}
 8006c36:	4770      	bx	lr
 8006c38:	200013d0 	.word	0x200013d0
 8006c3c:	200013d8 	.word	0x200013d8

08006c40 <__errno>:
 8006c40:	4b01      	ldr	r3, [pc, #4]	; (8006c48 <__errno+0x8>)
 8006c42:	6818      	ldr	r0, [r3, #0]
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	20000018 	.word	0x20000018

08006c4c <std>:
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	b510      	push	{r4, lr}
 8006c50:	4604      	mov	r4, r0
 8006c52:	e9c0 3300 	strd	r3, r3, [r0]
 8006c56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c5a:	6083      	str	r3, [r0, #8]
 8006c5c:	8181      	strh	r1, [r0, #12]
 8006c5e:	6643      	str	r3, [r0, #100]	; 0x64
 8006c60:	81c2      	strh	r2, [r0, #14]
 8006c62:	6183      	str	r3, [r0, #24]
 8006c64:	4619      	mov	r1, r3
 8006c66:	2208      	movs	r2, #8
 8006c68:	305c      	adds	r0, #92	; 0x5c
 8006c6a:	f000 f91a 	bl	8006ea2 <memset>
 8006c6e:	4b05      	ldr	r3, [pc, #20]	; (8006c84 <std+0x38>)
 8006c70:	6224      	str	r4, [r4, #32]
 8006c72:	6263      	str	r3, [r4, #36]	; 0x24
 8006c74:	4b04      	ldr	r3, [pc, #16]	; (8006c88 <std+0x3c>)
 8006c76:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c78:	4b04      	ldr	r3, [pc, #16]	; (8006c8c <std+0x40>)
 8006c7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c7c:	4b04      	ldr	r3, [pc, #16]	; (8006c90 <std+0x44>)
 8006c7e:	6323      	str	r3, [r4, #48]	; 0x30
 8006c80:	bd10      	pop	{r4, pc}
 8006c82:	bf00      	nop
 8006c84:	08007aed 	.word	0x08007aed
 8006c88:	08007b0f 	.word	0x08007b0f
 8006c8c:	08007b47 	.word	0x08007b47
 8006c90:	08007b6b 	.word	0x08007b6b

08006c94 <_cleanup_r>:
 8006c94:	4901      	ldr	r1, [pc, #4]	; (8006c9c <_cleanup_r+0x8>)
 8006c96:	f000 b8af 	b.w	8006df8 <_fwalk_reent>
 8006c9a:	bf00      	nop
 8006c9c:	08008b31 	.word	0x08008b31

08006ca0 <__sfmoreglue>:
 8006ca0:	2268      	movs	r2, #104	; 0x68
 8006ca2:	b570      	push	{r4, r5, r6, lr}
 8006ca4:	1e4d      	subs	r5, r1, #1
 8006ca6:	4355      	muls	r5, r2
 8006ca8:	460e      	mov	r6, r1
 8006caa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cae:	f000 f921 	bl	8006ef4 <_malloc_r>
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	b140      	cbz	r0, 8006cc8 <__sfmoreglue+0x28>
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	e9c0 1600 	strd	r1, r6, [r0]
 8006cbc:	300c      	adds	r0, #12
 8006cbe:	60a0      	str	r0, [r4, #8]
 8006cc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006cc4:	f000 f8ed 	bl	8006ea2 <memset>
 8006cc8:	4620      	mov	r0, r4
 8006cca:	bd70      	pop	{r4, r5, r6, pc}

08006ccc <__sfp_lock_acquire>:
 8006ccc:	4801      	ldr	r0, [pc, #4]	; (8006cd4 <__sfp_lock_acquire+0x8>)
 8006cce:	f000 b8d8 	b.w	8006e82 <__retarget_lock_acquire_recursive>
 8006cd2:	bf00      	nop
 8006cd4:	200013e9 	.word	0x200013e9

08006cd8 <__sfp_lock_release>:
 8006cd8:	4801      	ldr	r0, [pc, #4]	; (8006ce0 <__sfp_lock_release+0x8>)
 8006cda:	f000 b8d3 	b.w	8006e84 <__retarget_lock_release_recursive>
 8006cde:	bf00      	nop
 8006ce0:	200013e9 	.word	0x200013e9

08006ce4 <__sinit_lock_acquire>:
 8006ce4:	4801      	ldr	r0, [pc, #4]	; (8006cec <__sinit_lock_acquire+0x8>)
 8006ce6:	f000 b8cc 	b.w	8006e82 <__retarget_lock_acquire_recursive>
 8006cea:	bf00      	nop
 8006cec:	200013ea 	.word	0x200013ea

08006cf0 <__sinit_lock_release>:
 8006cf0:	4801      	ldr	r0, [pc, #4]	; (8006cf8 <__sinit_lock_release+0x8>)
 8006cf2:	f000 b8c7 	b.w	8006e84 <__retarget_lock_release_recursive>
 8006cf6:	bf00      	nop
 8006cf8:	200013ea 	.word	0x200013ea

08006cfc <__sinit>:
 8006cfc:	b510      	push	{r4, lr}
 8006cfe:	4604      	mov	r4, r0
 8006d00:	f7ff fff0 	bl	8006ce4 <__sinit_lock_acquire>
 8006d04:	69a3      	ldr	r3, [r4, #24]
 8006d06:	b11b      	cbz	r3, 8006d10 <__sinit+0x14>
 8006d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d0c:	f7ff bff0 	b.w	8006cf0 <__sinit_lock_release>
 8006d10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d14:	6523      	str	r3, [r4, #80]	; 0x50
 8006d16:	4b13      	ldr	r3, [pc, #76]	; (8006d64 <__sinit+0x68>)
 8006d18:	4a13      	ldr	r2, [pc, #76]	; (8006d68 <__sinit+0x6c>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d1e:	42a3      	cmp	r3, r4
 8006d20:	bf08      	it	eq
 8006d22:	2301      	moveq	r3, #1
 8006d24:	4620      	mov	r0, r4
 8006d26:	bf08      	it	eq
 8006d28:	61a3      	streq	r3, [r4, #24]
 8006d2a:	f000 f81f 	bl	8006d6c <__sfp>
 8006d2e:	6060      	str	r0, [r4, #4]
 8006d30:	4620      	mov	r0, r4
 8006d32:	f000 f81b 	bl	8006d6c <__sfp>
 8006d36:	60a0      	str	r0, [r4, #8]
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f000 f817 	bl	8006d6c <__sfp>
 8006d3e:	2200      	movs	r2, #0
 8006d40:	2104      	movs	r1, #4
 8006d42:	60e0      	str	r0, [r4, #12]
 8006d44:	6860      	ldr	r0, [r4, #4]
 8006d46:	f7ff ff81 	bl	8006c4c <std>
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	2109      	movs	r1, #9
 8006d4e:	68a0      	ldr	r0, [r4, #8]
 8006d50:	f7ff ff7c 	bl	8006c4c <std>
 8006d54:	2202      	movs	r2, #2
 8006d56:	2112      	movs	r1, #18
 8006d58:	68e0      	ldr	r0, [r4, #12]
 8006d5a:	f7ff ff77 	bl	8006c4c <std>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	61a3      	str	r3, [r4, #24]
 8006d62:	e7d1      	b.n	8006d08 <__sinit+0xc>
 8006d64:	08009e18 	.word	0x08009e18
 8006d68:	08006c95 	.word	0x08006c95

08006d6c <__sfp>:
 8006d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6e:	4607      	mov	r7, r0
 8006d70:	f7ff ffac 	bl	8006ccc <__sfp_lock_acquire>
 8006d74:	4b1e      	ldr	r3, [pc, #120]	; (8006df0 <__sfp+0x84>)
 8006d76:	681e      	ldr	r6, [r3, #0]
 8006d78:	69b3      	ldr	r3, [r6, #24]
 8006d7a:	b913      	cbnz	r3, 8006d82 <__sfp+0x16>
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	f7ff ffbd 	bl	8006cfc <__sinit>
 8006d82:	3648      	adds	r6, #72	; 0x48
 8006d84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	d503      	bpl.n	8006d94 <__sfp+0x28>
 8006d8c:	6833      	ldr	r3, [r6, #0]
 8006d8e:	b30b      	cbz	r3, 8006dd4 <__sfp+0x68>
 8006d90:	6836      	ldr	r6, [r6, #0]
 8006d92:	e7f7      	b.n	8006d84 <__sfp+0x18>
 8006d94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d98:	b9d5      	cbnz	r5, 8006dd0 <__sfp+0x64>
 8006d9a:	4b16      	ldr	r3, [pc, #88]	; (8006df4 <__sfp+0x88>)
 8006d9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006da0:	60e3      	str	r3, [r4, #12]
 8006da2:	6665      	str	r5, [r4, #100]	; 0x64
 8006da4:	f000 f86c 	bl	8006e80 <__retarget_lock_init_recursive>
 8006da8:	f7ff ff96 	bl	8006cd8 <__sfp_lock_release>
 8006dac:	2208      	movs	r2, #8
 8006dae:	4629      	mov	r1, r5
 8006db0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006db4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006db8:	6025      	str	r5, [r4, #0]
 8006dba:	61a5      	str	r5, [r4, #24]
 8006dbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006dc0:	f000 f86f 	bl	8006ea2 <memset>
 8006dc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006dc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006dcc:	4620      	mov	r0, r4
 8006dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dd0:	3468      	adds	r4, #104	; 0x68
 8006dd2:	e7d9      	b.n	8006d88 <__sfp+0x1c>
 8006dd4:	2104      	movs	r1, #4
 8006dd6:	4638      	mov	r0, r7
 8006dd8:	f7ff ff62 	bl	8006ca0 <__sfmoreglue>
 8006ddc:	4604      	mov	r4, r0
 8006dde:	6030      	str	r0, [r6, #0]
 8006de0:	2800      	cmp	r0, #0
 8006de2:	d1d5      	bne.n	8006d90 <__sfp+0x24>
 8006de4:	f7ff ff78 	bl	8006cd8 <__sfp_lock_release>
 8006de8:	230c      	movs	r3, #12
 8006dea:	603b      	str	r3, [r7, #0]
 8006dec:	e7ee      	b.n	8006dcc <__sfp+0x60>
 8006dee:	bf00      	nop
 8006df0:	08009e18 	.word	0x08009e18
 8006df4:	ffff0001 	.word	0xffff0001

08006df8 <_fwalk_reent>:
 8006df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dfc:	4606      	mov	r6, r0
 8006dfe:	4688      	mov	r8, r1
 8006e00:	2700      	movs	r7, #0
 8006e02:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e0a:	f1b9 0901 	subs.w	r9, r9, #1
 8006e0e:	d505      	bpl.n	8006e1c <_fwalk_reent+0x24>
 8006e10:	6824      	ldr	r4, [r4, #0]
 8006e12:	2c00      	cmp	r4, #0
 8006e14:	d1f7      	bne.n	8006e06 <_fwalk_reent+0xe>
 8006e16:	4638      	mov	r0, r7
 8006e18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e1c:	89ab      	ldrh	r3, [r5, #12]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d907      	bls.n	8006e32 <_fwalk_reent+0x3a>
 8006e22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e26:	3301      	adds	r3, #1
 8006e28:	d003      	beq.n	8006e32 <_fwalk_reent+0x3a>
 8006e2a:	4629      	mov	r1, r5
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	47c0      	blx	r8
 8006e30:	4307      	orrs	r7, r0
 8006e32:	3568      	adds	r5, #104	; 0x68
 8006e34:	e7e9      	b.n	8006e0a <_fwalk_reent+0x12>
	...

08006e38 <__libc_init_array>:
 8006e38:	b570      	push	{r4, r5, r6, lr}
 8006e3a:	2600      	movs	r6, #0
 8006e3c:	4d0c      	ldr	r5, [pc, #48]	; (8006e70 <__libc_init_array+0x38>)
 8006e3e:	4c0d      	ldr	r4, [pc, #52]	; (8006e74 <__libc_init_array+0x3c>)
 8006e40:	1b64      	subs	r4, r4, r5
 8006e42:	10a4      	asrs	r4, r4, #2
 8006e44:	42a6      	cmp	r6, r4
 8006e46:	d109      	bne.n	8006e5c <__libc_init_array+0x24>
 8006e48:	f002 fefe 	bl	8009c48 <_init>
 8006e4c:	2600      	movs	r6, #0
 8006e4e:	4d0a      	ldr	r5, [pc, #40]	; (8006e78 <__libc_init_array+0x40>)
 8006e50:	4c0a      	ldr	r4, [pc, #40]	; (8006e7c <__libc_init_array+0x44>)
 8006e52:	1b64      	subs	r4, r4, r5
 8006e54:	10a4      	asrs	r4, r4, #2
 8006e56:	42a6      	cmp	r6, r4
 8006e58:	d105      	bne.n	8006e66 <__libc_init_array+0x2e>
 8006e5a:	bd70      	pop	{r4, r5, r6, pc}
 8006e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e60:	4798      	blx	r3
 8006e62:	3601      	adds	r6, #1
 8006e64:	e7ee      	b.n	8006e44 <__libc_init_array+0xc>
 8006e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e6a:	4798      	blx	r3
 8006e6c:	3601      	adds	r6, #1
 8006e6e:	e7f2      	b.n	8006e56 <__libc_init_array+0x1e>
 8006e70:	0800a194 	.word	0x0800a194
 8006e74:	0800a194 	.word	0x0800a194
 8006e78:	0800a194 	.word	0x0800a194
 8006e7c:	0800a198 	.word	0x0800a198

08006e80 <__retarget_lock_init_recursive>:
 8006e80:	4770      	bx	lr

08006e82 <__retarget_lock_acquire_recursive>:
 8006e82:	4770      	bx	lr

08006e84 <__retarget_lock_release_recursive>:
 8006e84:	4770      	bx	lr

08006e86 <memcpy>:
 8006e86:	440a      	add	r2, r1
 8006e88:	4291      	cmp	r1, r2
 8006e8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006e8e:	d100      	bne.n	8006e92 <memcpy+0xc>
 8006e90:	4770      	bx	lr
 8006e92:	b510      	push	{r4, lr}
 8006e94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e98:	4291      	cmp	r1, r2
 8006e9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e9e:	d1f9      	bne.n	8006e94 <memcpy+0xe>
 8006ea0:	bd10      	pop	{r4, pc}

08006ea2 <memset>:
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	4402      	add	r2, r0
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d100      	bne.n	8006eac <memset+0xa>
 8006eaa:	4770      	bx	lr
 8006eac:	f803 1b01 	strb.w	r1, [r3], #1
 8006eb0:	e7f9      	b.n	8006ea6 <memset+0x4>
	...

08006eb4 <sbrk_aligned>:
 8006eb4:	b570      	push	{r4, r5, r6, lr}
 8006eb6:	4e0e      	ldr	r6, [pc, #56]	; (8006ef0 <sbrk_aligned+0x3c>)
 8006eb8:	460c      	mov	r4, r1
 8006eba:	6831      	ldr	r1, [r6, #0]
 8006ebc:	4605      	mov	r5, r0
 8006ebe:	b911      	cbnz	r1, 8006ec6 <sbrk_aligned+0x12>
 8006ec0:	f000 fde4 	bl	8007a8c <_sbrk_r>
 8006ec4:	6030      	str	r0, [r6, #0]
 8006ec6:	4621      	mov	r1, r4
 8006ec8:	4628      	mov	r0, r5
 8006eca:	f000 fddf 	bl	8007a8c <_sbrk_r>
 8006ece:	1c43      	adds	r3, r0, #1
 8006ed0:	d00a      	beq.n	8006ee8 <sbrk_aligned+0x34>
 8006ed2:	1cc4      	adds	r4, r0, #3
 8006ed4:	f024 0403 	bic.w	r4, r4, #3
 8006ed8:	42a0      	cmp	r0, r4
 8006eda:	d007      	beq.n	8006eec <sbrk_aligned+0x38>
 8006edc:	1a21      	subs	r1, r4, r0
 8006ede:	4628      	mov	r0, r5
 8006ee0:	f000 fdd4 	bl	8007a8c <_sbrk_r>
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	d101      	bne.n	8006eec <sbrk_aligned+0x38>
 8006ee8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006eec:	4620      	mov	r0, r4
 8006eee:	bd70      	pop	{r4, r5, r6, pc}
 8006ef0:	200013f0 	.word	0x200013f0

08006ef4 <_malloc_r>:
 8006ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef8:	1ccd      	adds	r5, r1, #3
 8006efa:	f025 0503 	bic.w	r5, r5, #3
 8006efe:	3508      	adds	r5, #8
 8006f00:	2d0c      	cmp	r5, #12
 8006f02:	bf38      	it	cc
 8006f04:	250c      	movcc	r5, #12
 8006f06:	2d00      	cmp	r5, #0
 8006f08:	4607      	mov	r7, r0
 8006f0a:	db01      	blt.n	8006f10 <_malloc_r+0x1c>
 8006f0c:	42a9      	cmp	r1, r5
 8006f0e:	d905      	bls.n	8006f1c <_malloc_r+0x28>
 8006f10:	230c      	movs	r3, #12
 8006f12:	2600      	movs	r6, #0
 8006f14:	603b      	str	r3, [r7, #0]
 8006f16:	4630      	mov	r0, r6
 8006f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f1c:	4e2e      	ldr	r6, [pc, #184]	; (8006fd8 <_malloc_r+0xe4>)
 8006f1e:	f001 fed5 	bl	8008ccc <__malloc_lock>
 8006f22:	6833      	ldr	r3, [r6, #0]
 8006f24:	461c      	mov	r4, r3
 8006f26:	bb34      	cbnz	r4, 8006f76 <_malloc_r+0x82>
 8006f28:	4629      	mov	r1, r5
 8006f2a:	4638      	mov	r0, r7
 8006f2c:	f7ff ffc2 	bl	8006eb4 <sbrk_aligned>
 8006f30:	1c43      	adds	r3, r0, #1
 8006f32:	4604      	mov	r4, r0
 8006f34:	d14d      	bne.n	8006fd2 <_malloc_r+0xde>
 8006f36:	6834      	ldr	r4, [r6, #0]
 8006f38:	4626      	mov	r6, r4
 8006f3a:	2e00      	cmp	r6, #0
 8006f3c:	d140      	bne.n	8006fc0 <_malloc_r+0xcc>
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	4631      	mov	r1, r6
 8006f42:	4638      	mov	r0, r7
 8006f44:	eb04 0803 	add.w	r8, r4, r3
 8006f48:	f000 fda0 	bl	8007a8c <_sbrk_r>
 8006f4c:	4580      	cmp	r8, r0
 8006f4e:	d13a      	bne.n	8006fc6 <_malloc_r+0xd2>
 8006f50:	6821      	ldr	r1, [r4, #0]
 8006f52:	3503      	adds	r5, #3
 8006f54:	1a6d      	subs	r5, r5, r1
 8006f56:	f025 0503 	bic.w	r5, r5, #3
 8006f5a:	3508      	adds	r5, #8
 8006f5c:	2d0c      	cmp	r5, #12
 8006f5e:	bf38      	it	cc
 8006f60:	250c      	movcc	r5, #12
 8006f62:	4638      	mov	r0, r7
 8006f64:	4629      	mov	r1, r5
 8006f66:	f7ff ffa5 	bl	8006eb4 <sbrk_aligned>
 8006f6a:	3001      	adds	r0, #1
 8006f6c:	d02b      	beq.n	8006fc6 <_malloc_r+0xd2>
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	442b      	add	r3, r5
 8006f72:	6023      	str	r3, [r4, #0]
 8006f74:	e00e      	b.n	8006f94 <_malloc_r+0xa0>
 8006f76:	6822      	ldr	r2, [r4, #0]
 8006f78:	1b52      	subs	r2, r2, r5
 8006f7a:	d41e      	bmi.n	8006fba <_malloc_r+0xc6>
 8006f7c:	2a0b      	cmp	r2, #11
 8006f7e:	d916      	bls.n	8006fae <_malloc_r+0xba>
 8006f80:	1961      	adds	r1, r4, r5
 8006f82:	42a3      	cmp	r3, r4
 8006f84:	6025      	str	r5, [r4, #0]
 8006f86:	bf18      	it	ne
 8006f88:	6059      	strne	r1, [r3, #4]
 8006f8a:	6863      	ldr	r3, [r4, #4]
 8006f8c:	bf08      	it	eq
 8006f8e:	6031      	streq	r1, [r6, #0]
 8006f90:	5162      	str	r2, [r4, r5]
 8006f92:	604b      	str	r3, [r1, #4]
 8006f94:	4638      	mov	r0, r7
 8006f96:	f104 060b 	add.w	r6, r4, #11
 8006f9a:	f001 fe9d 	bl	8008cd8 <__malloc_unlock>
 8006f9e:	f026 0607 	bic.w	r6, r6, #7
 8006fa2:	1d23      	adds	r3, r4, #4
 8006fa4:	1af2      	subs	r2, r6, r3
 8006fa6:	d0b6      	beq.n	8006f16 <_malloc_r+0x22>
 8006fa8:	1b9b      	subs	r3, r3, r6
 8006faa:	50a3      	str	r3, [r4, r2]
 8006fac:	e7b3      	b.n	8006f16 <_malloc_r+0x22>
 8006fae:	6862      	ldr	r2, [r4, #4]
 8006fb0:	42a3      	cmp	r3, r4
 8006fb2:	bf0c      	ite	eq
 8006fb4:	6032      	streq	r2, [r6, #0]
 8006fb6:	605a      	strne	r2, [r3, #4]
 8006fb8:	e7ec      	b.n	8006f94 <_malloc_r+0xa0>
 8006fba:	4623      	mov	r3, r4
 8006fbc:	6864      	ldr	r4, [r4, #4]
 8006fbe:	e7b2      	b.n	8006f26 <_malloc_r+0x32>
 8006fc0:	4634      	mov	r4, r6
 8006fc2:	6876      	ldr	r6, [r6, #4]
 8006fc4:	e7b9      	b.n	8006f3a <_malloc_r+0x46>
 8006fc6:	230c      	movs	r3, #12
 8006fc8:	4638      	mov	r0, r7
 8006fca:	603b      	str	r3, [r7, #0]
 8006fcc:	f001 fe84 	bl	8008cd8 <__malloc_unlock>
 8006fd0:	e7a1      	b.n	8006f16 <_malloc_r+0x22>
 8006fd2:	6025      	str	r5, [r4, #0]
 8006fd4:	e7de      	b.n	8006f94 <_malloc_r+0xa0>
 8006fd6:	bf00      	nop
 8006fd8:	200013ec 	.word	0x200013ec

08006fdc <__cvt>:
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe2:	461f      	mov	r7, r3
 8006fe4:	bfbb      	ittet	lt
 8006fe6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006fea:	461f      	movlt	r7, r3
 8006fec:	2300      	movge	r3, #0
 8006fee:	232d      	movlt	r3, #45	; 0x2d
 8006ff0:	b088      	sub	sp, #32
 8006ff2:	4614      	mov	r4, r2
 8006ff4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ff6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006ff8:	7013      	strb	r3, [r2, #0]
 8006ffa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ffc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007000:	f023 0820 	bic.w	r8, r3, #32
 8007004:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007008:	d005      	beq.n	8007016 <__cvt+0x3a>
 800700a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800700e:	d100      	bne.n	8007012 <__cvt+0x36>
 8007010:	3501      	adds	r5, #1
 8007012:	2302      	movs	r3, #2
 8007014:	e000      	b.n	8007018 <__cvt+0x3c>
 8007016:	2303      	movs	r3, #3
 8007018:	aa07      	add	r2, sp, #28
 800701a:	9204      	str	r2, [sp, #16]
 800701c:	aa06      	add	r2, sp, #24
 800701e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007022:	e9cd 3500 	strd	r3, r5, [sp]
 8007026:	4622      	mov	r2, r4
 8007028:	463b      	mov	r3, r7
 800702a:	f000 ff11 	bl	8007e50 <_dtoa_r>
 800702e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007032:	4606      	mov	r6, r0
 8007034:	d102      	bne.n	800703c <__cvt+0x60>
 8007036:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007038:	07db      	lsls	r3, r3, #31
 800703a:	d522      	bpl.n	8007082 <__cvt+0xa6>
 800703c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007040:	eb06 0905 	add.w	r9, r6, r5
 8007044:	d110      	bne.n	8007068 <__cvt+0x8c>
 8007046:	7833      	ldrb	r3, [r6, #0]
 8007048:	2b30      	cmp	r3, #48	; 0x30
 800704a:	d10a      	bne.n	8007062 <__cvt+0x86>
 800704c:	2200      	movs	r2, #0
 800704e:	2300      	movs	r3, #0
 8007050:	4620      	mov	r0, r4
 8007052:	4639      	mov	r1, r7
 8007054:	f7f9 fd5c 	bl	8000b10 <__aeabi_dcmpeq>
 8007058:	b918      	cbnz	r0, 8007062 <__cvt+0x86>
 800705a:	f1c5 0501 	rsb	r5, r5, #1
 800705e:	f8ca 5000 	str.w	r5, [sl]
 8007062:	f8da 3000 	ldr.w	r3, [sl]
 8007066:	4499      	add	r9, r3
 8007068:	2200      	movs	r2, #0
 800706a:	2300      	movs	r3, #0
 800706c:	4620      	mov	r0, r4
 800706e:	4639      	mov	r1, r7
 8007070:	f7f9 fd4e 	bl	8000b10 <__aeabi_dcmpeq>
 8007074:	b108      	cbz	r0, 800707a <__cvt+0x9e>
 8007076:	f8cd 901c 	str.w	r9, [sp, #28]
 800707a:	2230      	movs	r2, #48	; 0x30
 800707c:	9b07      	ldr	r3, [sp, #28]
 800707e:	454b      	cmp	r3, r9
 8007080:	d307      	bcc.n	8007092 <__cvt+0xb6>
 8007082:	4630      	mov	r0, r6
 8007084:	9b07      	ldr	r3, [sp, #28]
 8007086:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007088:	1b9b      	subs	r3, r3, r6
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	b008      	add	sp, #32
 800708e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007092:	1c59      	adds	r1, r3, #1
 8007094:	9107      	str	r1, [sp, #28]
 8007096:	701a      	strb	r2, [r3, #0]
 8007098:	e7f0      	b.n	800707c <__cvt+0xa0>

0800709a <__exponent>:
 800709a:	4603      	mov	r3, r0
 800709c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800709e:	2900      	cmp	r1, #0
 80070a0:	f803 2b02 	strb.w	r2, [r3], #2
 80070a4:	bfb6      	itet	lt
 80070a6:	222d      	movlt	r2, #45	; 0x2d
 80070a8:	222b      	movge	r2, #43	; 0x2b
 80070aa:	4249      	neglt	r1, r1
 80070ac:	2909      	cmp	r1, #9
 80070ae:	7042      	strb	r2, [r0, #1]
 80070b0:	dd2b      	ble.n	800710a <__exponent+0x70>
 80070b2:	f10d 0407 	add.w	r4, sp, #7
 80070b6:	46a4      	mov	ip, r4
 80070b8:	270a      	movs	r7, #10
 80070ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80070be:	460a      	mov	r2, r1
 80070c0:	46a6      	mov	lr, r4
 80070c2:	fb07 1516 	mls	r5, r7, r6, r1
 80070c6:	2a63      	cmp	r2, #99	; 0x63
 80070c8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80070cc:	4631      	mov	r1, r6
 80070ce:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80070d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80070d6:	dcf0      	bgt.n	80070ba <__exponent+0x20>
 80070d8:	3130      	adds	r1, #48	; 0x30
 80070da:	f1ae 0502 	sub.w	r5, lr, #2
 80070de:	f804 1c01 	strb.w	r1, [r4, #-1]
 80070e2:	4629      	mov	r1, r5
 80070e4:	1c44      	adds	r4, r0, #1
 80070e6:	4561      	cmp	r1, ip
 80070e8:	d30a      	bcc.n	8007100 <__exponent+0x66>
 80070ea:	f10d 0209 	add.w	r2, sp, #9
 80070ee:	eba2 020e 	sub.w	r2, r2, lr
 80070f2:	4565      	cmp	r5, ip
 80070f4:	bf88      	it	hi
 80070f6:	2200      	movhi	r2, #0
 80070f8:	4413      	add	r3, r2
 80070fa:	1a18      	subs	r0, r3, r0
 80070fc:	b003      	add	sp, #12
 80070fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007100:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007104:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007108:	e7ed      	b.n	80070e6 <__exponent+0x4c>
 800710a:	2330      	movs	r3, #48	; 0x30
 800710c:	3130      	adds	r1, #48	; 0x30
 800710e:	7083      	strb	r3, [r0, #2]
 8007110:	70c1      	strb	r1, [r0, #3]
 8007112:	1d03      	adds	r3, r0, #4
 8007114:	e7f1      	b.n	80070fa <__exponent+0x60>
	...

08007118 <_printf_float>:
 8007118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711c:	b091      	sub	sp, #68	; 0x44
 800711e:	460c      	mov	r4, r1
 8007120:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007124:	4616      	mov	r6, r2
 8007126:	461f      	mov	r7, r3
 8007128:	4605      	mov	r5, r0
 800712a:	f001 fd3d 	bl	8008ba8 <_localeconv_r>
 800712e:	6803      	ldr	r3, [r0, #0]
 8007130:	4618      	mov	r0, r3
 8007132:	9309      	str	r3, [sp, #36]	; 0x24
 8007134:	f7f9 f80c 	bl	8000150 <strlen>
 8007138:	2300      	movs	r3, #0
 800713a:	930e      	str	r3, [sp, #56]	; 0x38
 800713c:	f8d8 3000 	ldr.w	r3, [r8]
 8007140:	900a      	str	r0, [sp, #40]	; 0x28
 8007142:	3307      	adds	r3, #7
 8007144:	f023 0307 	bic.w	r3, r3, #7
 8007148:	f103 0208 	add.w	r2, r3, #8
 800714c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007150:	f8d4 b000 	ldr.w	fp, [r4]
 8007154:	f8c8 2000 	str.w	r2, [r8]
 8007158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007160:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007164:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007168:	930b      	str	r3, [sp, #44]	; 0x2c
 800716a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800716e:	4640      	mov	r0, r8
 8007170:	4b9c      	ldr	r3, [pc, #624]	; (80073e4 <_printf_float+0x2cc>)
 8007172:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007174:	f7f9 fcfe 	bl	8000b74 <__aeabi_dcmpun>
 8007178:	bb70      	cbnz	r0, 80071d8 <_printf_float+0xc0>
 800717a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800717e:	4640      	mov	r0, r8
 8007180:	4b98      	ldr	r3, [pc, #608]	; (80073e4 <_printf_float+0x2cc>)
 8007182:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007184:	f7f9 fcd8 	bl	8000b38 <__aeabi_dcmple>
 8007188:	bb30      	cbnz	r0, 80071d8 <_printf_float+0xc0>
 800718a:	2200      	movs	r2, #0
 800718c:	2300      	movs	r3, #0
 800718e:	4640      	mov	r0, r8
 8007190:	4651      	mov	r1, sl
 8007192:	f7f9 fcc7 	bl	8000b24 <__aeabi_dcmplt>
 8007196:	b110      	cbz	r0, 800719e <_printf_float+0x86>
 8007198:	232d      	movs	r3, #45	; 0x2d
 800719a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800719e:	4b92      	ldr	r3, [pc, #584]	; (80073e8 <_printf_float+0x2d0>)
 80071a0:	4892      	ldr	r0, [pc, #584]	; (80073ec <_printf_float+0x2d4>)
 80071a2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80071a6:	bf94      	ite	ls
 80071a8:	4698      	movls	r8, r3
 80071aa:	4680      	movhi	r8, r0
 80071ac:	2303      	movs	r3, #3
 80071ae:	f04f 0a00 	mov.w	sl, #0
 80071b2:	6123      	str	r3, [r4, #16]
 80071b4:	f02b 0304 	bic.w	r3, fp, #4
 80071b8:	6023      	str	r3, [r4, #0]
 80071ba:	4633      	mov	r3, r6
 80071bc:	4621      	mov	r1, r4
 80071be:	4628      	mov	r0, r5
 80071c0:	9700      	str	r7, [sp, #0]
 80071c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80071c4:	f000 f9d4 	bl	8007570 <_printf_common>
 80071c8:	3001      	adds	r0, #1
 80071ca:	f040 8090 	bne.w	80072ee <_printf_float+0x1d6>
 80071ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071d2:	b011      	add	sp, #68	; 0x44
 80071d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d8:	4642      	mov	r2, r8
 80071da:	4653      	mov	r3, sl
 80071dc:	4640      	mov	r0, r8
 80071de:	4651      	mov	r1, sl
 80071e0:	f7f9 fcc8 	bl	8000b74 <__aeabi_dcmpun>
 80071e4:	b148      	cbz	r0, 80071fa <_printf_float+0xe2>
 80071e6:	f1ba 0f00 	cmp.w	sl, #0
 80071ea:	bfb8      	it	lt
 80071ec:	232d      	movlt	r3, #45	; 0x2d
 80071ee:	4880      	ldr	r0, [pc, #512]	; (80073f0 <_printf_float+0x2d8>)
 80071f0:	bfb8      	it	lt
 80071f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80071f6:	4b7f      	ldr	r3, [pc, #508]	; (80073f4 <_printf_float+0x2dc>)
 80071f8:	e7d3      	b.n	80071a2 <_printf_float+0x8a>
 80071fa:	6863      	ldr	r3, [r4, #4]
 80071fc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	d142      	bne.n	800728a <_printf_float+0x172>
 8007204:	2306      	movs	r3, #6
 8007206:	6063      	str	r3, [r4, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	9206      	str	r2, [sp, #24]
 800720c:	aa0e      	add	r2, sp, #56	; 0x38
 800720e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007212:	aa0d      	add	r2, sp, #52	; 0x34
 8007214:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007218:	9203      	str	r2, [sp, #12]
 800721a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800721e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007222:	6023      	str	r3, [r4, #0]
 8007224:	6863      	ldr	r3, [r4, #4]
 8007226:	4642      	mov	r2, r8
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	4628      	mov	r0, r5
 800722c:	4653      	mov	r3, sl
 800722e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007230:	f7ff fed4 	bl	8006fdc <__cvt>
 8007234:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007236:	4680      	mov	r8, r0
 8007238:	2947      	cmp	r1, #71	; 0x47
 800723a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800723c:	d108      	bne.n	8007250 <_printf_float+0x138>
 800723e:	1cc8      	adds	r0, r1, #3
 8007240:	db02      	blt.n	8007248 <_printf_float+0x130>
 8007242:	6863      	ldr	r3, [r4, #4]
 8007244:	4299      	cmp	r1, r3
 8007246:	dd40      	ble.n	80072ca <_printf_float+0x1b2>
 8007248:	f1a9 0902 	sub.w	r9, r9, #2
 800724c:	fa5f f989 	uxtb.w	r9, r9
 8007250:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007254:	d81f      	bhi.n	8007296 <_printf_float+0x17e>
 8007256:	464a      	mov	r2, r9
 8007258:	3901      	subs	r1, #1
 800725a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800725e:	910d      	str	r1, [sp, #52]	; 0x34
 8007260:	f7ff ff1b 	bl	800709a <__exponent>
 8007264:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007266:	4682      	mov	sl, r0
 8007268:	1813      	adds	r3, r2, r0
 800726a:	2a01      	cmp	r2, #1
 800726c:	6123      	str	r3, [r4, #16]
 800726e:	dc02      	bgt.n	8007276 <_printf_float+0x15e>
 8007270:	6822      	ldr	r2, [r4, #0]
 8007272:	07d2      	lsls	r2, r2, #31
 8007274:	d501      	bpl.n	800727a <_printf_float+0x162>
 8007276:	3301      	adds	r3, #1
 8007278:	6123      	str	r3, [r4, #16]
 800727a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800727e:	2b00      	cmp	r3, #0
 8007280:	d09b      	beq.n	80071ba <_printf_float+0xa2>
 8007282:	232d      	movs	r3, #45	; 0x2d
 8007284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007288:	e797      	b.n	80071ba <_printf_float+0xa2>
 800728a:	2947      	cmp	r1, #71	; 0x47
 800728c:	d1bc      	bne.n	8007208 <_printf_float+0xf0>
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1ba      	bne.n	8007208 <_printf_float+0xf0>
 8007292:	2301      	movs	r3, #1
 8007294:	e7b7      	b.n	8007206 <_printf_float+0xee>
 8007296:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800729a:	d118      	bne.n	80072ce <_printf_float+0x1b6>
 800729c:	2900      	cmp	r1, #0
 800729e:	6863      	ldr	r3, [r4, #4]
 80072a0:	dd0b      	ble.n	80072ba <_printf_float+0x1a2>
 80072a2:	6121      	str	r1, [r4, #16]
 80072a4:	b913      	cbnz	r3, 80072ac <_printf_float+0x194>
 80072a6:	6822      	ldr	r2, [r4, #0]
 80072a8:	07d0      	lsls	r0, r2, #31
 80072aa:	d502      	bpl.n	80072b2 <_printf_float+0x19a>
 80072ac:	3301      	adds	r3, #1
 80072ae:	440b      	add	r3, r1
 80072b0:	6123      	str	r3, [r4, #16]
 80072b2:	f04f 0a00 	mov.w	sl, #0
 80072b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80072b8:	e7df      	b.n	800727a <_printf_float+0x162>
 80072ba:	b913      	cbnz	r3, 80072c2 <_printf_float+0x1aa>
 80072bc:	6822      	ldr	r2, [r4, #0]
 80072be:	07d2      	lsls	r2, r2, #31
 80072c0:	d501      	bpl.n	80072c6 <_printf_float+0x1ae>
 80072c2:	3302      	adds	r3, #2
 80072c4:	e7f4      	b.n	80072b0 <_printf_float+0x198>
 80072c6:	2301      	movs	r3, #1
 80072c8:	e7f2      	b.n	80072b0 <_printf_float+0x198>
 80072ca:	f04f 0967 	mov.w	r9, #103	; 0x67
 80072ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072d0:	4299      	cmp	r1, r3
 80072d2:	db05      	blt.n	80072e0 <_printf_float+0x1c8>
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	6121      	str	r1, [r4, #16]
 80072d8:	07d8      	lsls	r0, r3, #31
 80072da:	d5ea      	bpl.n	80072b2 <_printf_float+0x19a>
 80072dc:	1c4b      	adds	r3, r1, #1
 80072de:	e7e7      	b.n	80072b0 <_printf_float+0x198>
 80072e0:	2900      	cmp	r1, #0
 80072e2:	bfcc      	ite	gt
 80072e4:	2201      	movgt	r2, #1
 80072e6:	f1c1 0202 	rsble	r2, r1, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	e7e0      	b.n	80072b0 <_printf_float+0x198>
 80072ee:	6823      	ldr	r3, [r4, #0]
 80072f0:	055a      	lsls	r2, r3, #21
 80072f2:	d407      	bmi.n	8007304 <_printf_float+0x1ec>
 80072f4:	6923      	ldr	r3, [r4, #16]
 80072f6:	4642      	mov	r2, r8
 80072f8:	4631      	mov	r1, r6
 80072fa:	4628      	mov	r0, r5
 80072fc:	47b8      	blx	r7
 80072fe:	3001      	adds	r0, #1
 8007300:	d12b      	bne.n	800735a <_printf_float+0x242>
 8007302:	e764      	b.n	80071ce <_printf_float+0xb6>
 8007304:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007308:	f240 80dd 	bls.w	80074c6 <_printf_float+0x3ae>
 800730c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007310:	2200      	movs	r2, #0
 8007312:	2300      	movs	r3, #0
 8007314:	f7f9 fbfc 	bl	8000b10 <__aeabi_dcmpeq>
 8007318:	2800      	cmp	r0, #0
 800731a:	d033      	beq.n	8007384 <_printf_float+0x26c>
 800731c:	2301      	movs	r3, #1
 800731e:	4631      	mov	r1, r6
 8007320:	4628      	mov	r0, r5
 8007322:	4a35      	ldr	r2, [pc, #212]	; (80073f8 <_printf_float+0x2e0>)
 8007324:	47b8      	blx	r7
 8007326:	3001      	adds	r0, #1
 8007328:	f43f af51 	beq.w	80071ce <_printf_float+0xb6>
 800732c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007330:	429a      	cmp	r2, r3
 8007332:	db02      	blt.n	800733a <_printf_float+0x222>
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	07d8      	lsls	r0, r3, #31
 8007338:	d50f      	bpl.n	800735a <_printf_float+0x242>
 800733a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800733e:	4631      	mov	r1, r6
 8007340:	4628      	mov	r0, r5
 8007342:	47b8      	blx	r7
 8007344:	3001      	adds	r0, #1
 8007346:	f43f af42 	beq.w	80071ce <_printf_float+0xb6>
 800734a:	f04f 0800 	mov.w	r8, #0
 800734e:	f104 091a 	add.w	r9, r4, #26
 8007352:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007354:	3b01      	subs	r3, #1
 8007356:	4543      	cmp	r3, r8
 8007358:	dc09      	bgt.n	800736e <_printf_float+0x256>
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	079b      	lsls	r3, r3, #30
 800735e:	f100 8102 	bmi.w	8007566 <_printf_float+0x44e>
 8007362:	68e0      	ldr	r0, [r4, #12]
 8007364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007366:	4298      	cmp	r0, r3
 8007368:	bfb8      	it	lt
 800736a:	4618      	movlt	r0, r3
 800736c:	e731      	b.n	80071d2 <_printf_float+0xba>
 800736e:	2301      	movs	r3, #1
 8007370:	464a      	mov	r2, r9
 8007372:	4631      	mov	r1, r6
 8007374:	4628      	mov	r0, r5
 8007376:	47b8      	blx	r7
 8007378:	3001      	adds	r0, #1
 800737a:	f43f af28 	beq.w	80071ce <_printf_float+0xb6>
 800737e:	f108 0801 	add.w	r8, r8, #1
 8007382:	e7e6      	b.n	8007352 <_printf_float+0x23a>
 8007384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007386:	2b00      	cmp	r3, #0
 8007388:	dc38      	bgt.n	80073fc <_printf_float+0x2e4>
 800738a:	2301      	movs	r3, #1
 800738c:	4631      	mov	r1, r6
 800738e:	4628      	mov	r0, r5
 8007390:	4a19      	ldr	r2, [pc, #100]	; (80073f8 <_printf_float+0x2e0>)
 8007392:	47b8      	blx	r7
 8007394:	3001      	adds	r0, #1
 8007396:	f43f af1a 	beq.w	80071ce <_printf_float+0xb6>
 800739a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800739e:	4313      	orrs	r3, r2
 80073a0:	d102      	bne.n	80073a8 <_printf_float+0x290>
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	07d9      	lsls	r1, r3, #31
 80073a6:	d5d8      	bpl.n	800735a <_printf_float+0x242>
 80073a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073ac:	4631      	mov	r1, r6
 80073ae:	4628      	mov	r0, r5
 80073b0:	47b8      	blx	r7
 80073b2:	3001      	adds	r0, #1
 80073b4:	f43f af0b 	beq.w	80071ce <_printf_float+0xb6>
 80073b8:	f04f 0900 	mov.w	r9, #0
 80073bc:	f104 0a1a 	add.w	sl, r4, #26
 80073c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073c2:	425b      	negs	r3, r3
 80073c4:	454b      	cmp	r3, r9
 80073c6:	dc01      	bgt.n	80073cc <_printf_float+0x2b4>
 80073c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073ca:	e794      	b.n	80072f6 <_printf_float+0x1de>
 80073cc:	2301      	movs	r3, #1
 80073ce:	4652      	mov	r2, sl
 80073d0:	4631      	mov	r1, r6
 80073d2:	4628      	mov	r0, r5
 80073d4:	47b8      	blx	r7
 80073d6:	3001      	adds	r0, #1
 80073d8:	f43f aef9 	beq.w	80071ce <_printf_float+0xb6>
 80073dc:	f109 0901 	add.w	r9, r9, #1
 80073e0:	e7ee      	b.n	80073c0 <_printf_float+0x2a8>
 80073e2:	bf00      	nop
 80073e4:	7fefffff 	.word	0x7fefffff
 80073e8:	08009e1c 	.word	0x08009e1c
 80073ec:	08009e20 	.word	0x08009e20
 80073f0:	08009e28 	.word	0x08009e28
 80073f4:	08009e24 	.word	0x08009e24
 80073f8:	08009e2c 	.word	0x08009e2c
 80073fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007400:	429a      	cmp	r2, r3
 8007402:	bfa8      	it	ge
 8007404:	461a      	movge	r2, r3
 8007406:	2a00      	cmp	r2, #0
 8007408:	4691      	mov	r9, r2
 800740a:	dc37      	bgt.n	800747c <_printf_float+0x364>
 800740c:	f04f 0b00 	mov.w	fp, #0
 8007410:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007414:	f104 021a 	add.w	r2, r4, #26
 8007418:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800741c:	ebaa 0309 	sub.w	r3, sl, r9
 8007420:	455b      	cmp	r3, fp
 8007422:	dc33      	bgt.n	800748c <_printf_float+0x374>
 8007424:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007428:	429a      	cmp	r2, r3
 800742a:	db3b      	blt.n	80074a4 <_printf_float+0x38c>
 800742c:	6823      	ldr	r3, [r4, #0]
 800742e:	07da      	lsls	r2, r3, #31
 8007430:	d438      	bmi.n	80074a4 <_printf_float+0x38c>
 8007432:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007434:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007436:	eba3 020a 	sub.w	r2, r3, sl
 800743a:	eba3 0901 	sub.w	r9, r3, r1
 800743e:	4591      	cmp	r9, r2
 8007440:	bfa8      	it	ge
 8007442:	4691      	movge	r9, r2
 8007444:	f1b9 0f00 	cmp.w	r9, #0
 8007448:	dc34      	bgt.n	80074b4 <_printf_float+0x39c>
 800744a:	f04f 0800 	mov.w	r8, #0
 800744e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007452:	f104 0a1a 	add.w	sl, r4, #26
 8007456:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800745a:	1a9b      	subs	r3, r3, r2
 800745c:	eba3 0309 	sub.w	r3, r3, r9
 8007460:	4543      	cmp	r3, r8
 8007462:	f77f af7a 	ble.w	800735a <_printf_float+0x242>
 8007466:	2301      	movs	r3, #1
 8007468:	4652      	mov	r2, sl
 800746a:	4631      	mov	r1, r6
 800746c:	4628      	mov	r0, r5
 800746e:	47b8      	blx	r7
 8007470:	3001      	adds	r0, #1
 8007472:	f43f aeac 	beq.w	80071ce <_printf_float+0xb6>
 8007476:	f108 0801 	add.w	r8, r8, #1
 800747a:	e7ec      	b.n	8007456 <_printf_float+0x33e>
 800747c:	4613      	mov	r3, r2
 800747e:	4631      	mov	r1, r6
 8007480:	4642      	mov	r2, r8
 8007482:	4628      	mov	r0, r5
 8007484:	47b8      	blx	r7
 8007486:	3001      	adds	r0, #1
 8007488:	d1c0      	bne.n	800740c <_printf_float+0x2f4>
 800748a:	e6a0      	b.n	80071ce <_printf_float+0xb6>
 800748c:	2301      	movs	r3, #1
 800748e:	4631      	mov	r1, r6
 8007490:	4628      	mov	r0, r5
 8007492:	920b      	str	r2, [sp, #44]	; 0x2c
 8007494:	47b8      	blx	r7
 8007496:	3001      	adds	r0, #1
 8007498:	f43f ae99 	beq.w	80071ce <_printf_float+0xb6>
 800749c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800749e:	f10b 0b01 	add.w	fp, fp, #1
 80074a2:	e7b9      	b.n	8007418 <_printf_float+0x300>
 80074a4:	4631      	mov	r1, r6
 80074a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074aa:	4628      	mov	r0, r5
 80074ac:	47b8      	blx	r7
 80074ae:	3001      	adds	r0, #1
 80074b0:	d1bf      	bne.n	8007432 <_printf_float+0x31a>
 80074b2:	e68c      	b.n	80071ce <_printf_float+0xb6>
 80074b4:	464b      	mov	r3, r9
 80074b6:	4631      	mov	r1, r6
 80074b8:	4628      	mov	r0, r5
 80074ba:	eb08 020a 	add.w	r2, r8, sl
 80074be:	47b8      	blx	r7
 80074c0:	3001      	adds	r0, #1
 80074c2:	d1c2      	bne.n	800744a <_printf_float+0x332>
 80074c4:	e683      	b.n	80071ce <_printf_float+0xb6>
 80074c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074c8:	2a01      	cmp	r2, #1
 80074ca:	dc01      	bgt.n	80074d0 <_printf_float+0x3b8>
 80074cc:	07db      	lsls	r3, r3, #31
 80074ce:	d537      	bpl.n	8007540 <_printf_float+0x428>
 80074d0:	2301      	movs	r3, #1
 80074d2:	4642      	mov	r2, r8
 80074d4:	4631      	mov	r1, r6
 80074d6:	4628      	mov	r0, r5
 80074d8:	47b8      	blx	r7
 80074da:	3001      	adds	r0, #1
 80074dc:	f43f ae77 	beq.w	80071ce <_printf_float+0xb6>
 80074e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074e4:	4631      	mov	r1, r6
 80074e6:	4628      	mov	r0, r5
 80074e8:	47b8      	blx	r7
 80074ea:	3001      	adds	r0, #1
 80074ec:	f43f ae6f 	beq.w	80071ce <_printf_float+0xb6>
 80074f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074f4:	2200      	movs	r2, #0
 80074f6:	2300      	movs	r3, #0
 80074f8:	f7f9 fb0a 	bl	8000b10 <__aeabi_dcmpeq>
 80074fc:	b9d8      	cbnz	r0, 8007536 <_printf_float+0x41e>
 80074fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007500:	f108 0201 	add.w	r2, r8, #1
 8007504:	3b01      	subs	r3, #1
 8007506:	4631      	mov	r1, r6
 8007508:	4628      	mov	r0, r5
 800750a:	47b8      	blx	r7
 800750c:	3001      	adds	r0, #1
 800750e:	d10e      	bne.n	800752e <_printf_float+0x416>
 8007510:	e65d      	b.n	80071ce <_printf_float+0xb6>
 8007512:	2301      	movs	r3, #1
 8007514:	464a      	mov	r2, r9
 8007516:	4631      	mov	r1, r6
 8007518:	4628      	mov	r0, r5
 800751a:	47b8      	blx	r7
 800751c:	3001      	adds	r0, #1
 800751e:	f43f ae56 	beq.w	80071ce <_printf_float+0xb6>
 8007522:	f108 0801 	add.w	r8, r8, #1
 8007526:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007528:	3b01      	subs	r3, #1
 800752a:	4543      	cmp	r3, r8
 800752c:	dcf1      	bgt.n	8007512 <_printf_float+0x3fa>
 800752e:	4653      	mov	r3, sl
 8007530:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007534:	e6e0      	b.n	80072f8 <_printf_float+0x1e0>
 8007536:	f04f 0800 	mov.w	r8, #0
 800753a:	f104 091a 	add.w	r9, r4, #26
 800753e:	e7f2      	b.n	8007526 <_printf_float+0x40e>
 8007540:	2301      	movs	r3, #1
 8007542:	4642      	mov	r2, r8
 8007544:	e7df      	b.n	8007506 <_printf_float+0x3ee>
 8007546:	2301      	movs	r3, #1
 8007548:	464a      	mov	r2, r9
 800754a:	4631      	mov	r1, r6
 800754c:	4628      	mov	r0, r5
 800754e:	47b8      	blx	r7
 8007550:	3001      	adds	r0, #1
 8007552:	f43f ae3c 	beq.w	80071ce <_printf_float+0xb6>
 8007556:	f108 0801 	add.w	r8, r8, #1
 800755a:	68e3      	ldr	r3, [r4, #12]
 800755c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800755e:	1a5b      	subs	r3, r3, r1
 8007560:	4543      	cmp	r3, r8
 8007562:	dcf0      	bgt.n	8007546 <_printf_float+0x42e>
 8007564:	e6fd      	b.n	8007362 <_printf_float+0x24a>
 8007566:	f04f 0800 	mov.w	r8, #0
 800756a:	f104 0919 	add.w	r9, r4, #25
 800756e:	e7f4      	b.n	800755a <_printf_float+0x442>

08007570 <_printf_common>:
 8007570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007574:	4616      	mov	r6, r2
 8007576:	4699      	mov	r9, r3
 8007578:	688a      	ldr	r2, [r1, #8]
 800757a:	690b      	ldr	r3, [r1, #16]
 800757c:	4607      	mov	r7, r0
 800757e:	4293      	cmp	r3, r2
 8007580:	bfb8      	it	lt
 8007582:	4613      	movlt	r3, r2
 8007584:	6033      	str	r3, [r6, #0]
 8007586:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800758a:	460c      	mov	r4, r1
 800758c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007590:	b10a      	cbz	r2, 8007596 <_printf_common+0x26>
 8007592:	3301      	adds	r3, #1
 8007594:	6033      	str	r3, [r6, #0]
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	0699      	lsls	r1, r3, #26
 800759a:	bf42      	ittt	mi
 800759c:	6833      	ldrmi	r3, [r6, #0]
 800759e:	3302      	addmi	r3, #2
 80075a0:	6033      	strmi	r3, [r6, #0]
 80075a2:	6825      	ldr	r5, [r4, #0]
 80075a4:	f015 0506 	ands.w	r5, r5, #6
 80075a8:	d106      	bne.n	80075b8 <_printf_common+0x48>
 80075aa:	f104 0a19 	add.w	sl, r4, #25
 80075ae:	68e3      	ldr	r3, [r4, #12]
 80075b0:	6832      	ldr	r2, [r6, #0]
 80075b2:	1a9b      	subs	r3, r3, r2
 80075b4:	42ab      	cmp	r3, r5
 80075b6:	dc28      	bgt.n	800760a <_printf_common+0x9a>
 80075b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80075bc:	1e13      	subs	r3, r2, #0
 80075be:	6822      	ldr	r2, [r4, #0]
 80075c0:	bf18      	it	ne
 80075c2:	2301      	movne	r3, #1
 80075c4:	0692      	lsls	r2, r2, #26
 80075c6:	d42d      	bmi.n	8007624 <_printf_common+0xb4>
 80075c8:	4649      	mov	r1, r9
 80075ca:	4638      	mov	r0, r7
 80075cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075d0:	47c0      	blx	r8
 80075d2:	3001      	adds	r0, #1
 80075d4:	d020      	beq.n	8007618 <_printf_common+0xa8>
 80075d6:	6823      	ldr	r3, [r4, #0]
 80075d8:	68e5      	ldr	r5, [r4, #12]
 80075da:	f003 0306 	and.w	r3, r3, #6
 80075de:	2b04      	cmp	r3, #4
 80075e0:	bf18      	it	ne
 80075e2:	2500      	movne	r5, #0
 80075e4:	6832      	ldr	r2, [r6, #0]
 80075e6:	f04f 0600 	mov.w	r6, #0
 80075ea:	68a3      	ldr	r3, [r4, #8]
 80075ec:	bf08      	it	eq
 80075ee:	1aad      	subeq	r5, r5, r2
 80075f0:	6922      	ldr	r2, [r4, #16]
 80075f2:	bf08      	it	eq
 80075f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075f8:	4293      	cmp	r3, r2
 80075fa:	bfc4      	itt	gt
 80075fc:	1a9b      	subgt	r3, r3, r2
 80075fe:	18ed      	addgt	r5, r5, r3
 8007600:	341a      	adds	r4, #26
 8007602:	42b5      	cmp	r5, r6
 8007604:	d11a      	bne.n	800763c <_printf_common+0xcc>
 8007606:	2000      	movs	r0, #0
 8007608:	e008      	b.n	800761c <_printf_common+0xac>
 800760a:	2301      	movs	r3, #1
 800760c:	4652      	mov	r2, sl
 800760e:	4649      	mov	r1, r9
 8007610:	4638      	mov	r0, r7
 8007612:	47c0      	blx	r8
 8007614:	3001      	adds	r0, #1
 8007616:	d103      	bne.n	8007620 <_printf_common+0xb0>
 8007618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800761c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007620:	3501      	adds	r5, #1
 8007622:	e7c4      	b.n	80075ae <_printf_common+0x3e>
 8007624:	2030      	movs	r0, #48	; 0x30
 8007626:	18e1      	adds	r1, r4, r3
 8007628:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007632:	4422      	add	r2, r4
 8007634:	3302      	adds	r3, #2
 8007636:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800763a:	e7c5      	b.n	80075c8 <_printf_common+0x58>
 800763c:	2301      	movs	r3, #1
 800763e:	4622      	mov	r2, r4
 8007640:	4649      	mov	r1, r9
 8007642:	4638      	mov	r0, r7
 8007644:	47c0      	blx	r8
 8007646:	3001      	adds	r0, #1
 8007648:	d0e6      	beq.n	8007618 <_printf_common+0xa8>
 800764a:	3601      	adds	r6, #1
 800764c:	e7d9      	b.n	8007602 <_printf_common+0x92>
	...

08007650 <_printf_i>:
 8007650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007654:	7e0f      	ldrb	r7, [r1, #24]
 8007656:	4691      	mov	r9, r2
 8007658:	2f78      	cmp	r7, #120	; 0x78
 800765a:	4680      	mov	r8, r0
 800765c:	460c      	mov	r4, r1
 800765e:	469a      	mov	sl, r3
 8007660:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007662:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007666:	d807      	bhi.n	8007678 <_printf_i+0x28>
 8007668:	2f62      	cmp	r7, #98	; 0x62
 800766a:	d80a      	bhi.n	8007682 <_printf_i+0x32>
 800766c:	2f00      	cmp	r7, #0
 800766e:	f000 80d9 	beq.w	8007824 <_printf_i+0x1d4>
 8007672:	2f58      	cmp	r7, #88	; 0x58
 8007674:	f000 80a4 	beq.w	80077c0 <_printf_i+0x170>
 8007678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800767c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007680:	e03a      	b.n	80076f8 <_printf_i+0xa8>
 8007682:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007686:	2b15      	cmp	r3, #21
 8007688:	d8f6      	bhi.n	8007678 <_printf_i+0x28>
 800768a:	a101      	add	r1, pc, #4	; (adr r1, 8007690 <_printf_i+0x40>)
 800768c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007690:	080076e9 	.word	0x080076e9
 8007694:	080076fd 	.word	0x080076fd
 8007698:	08007679 	.word	0x08007679
 800769c:	08007679 	.word	0x08007679
 80076a0:	08007679 	.word	0x08007679
 80076a4:	08007679 	.word	0x08007679
 80076a8:	080076fd 	.word	0x080076fd
 80076ac:	08007679 	.word	0x08007679
 80076b0:	08007679 	.word	0x08007679
 80076b4:	08007679 	.word	0x08007679
 80076b8:	08007679 	.word	0x08007679
 80076bc:	0800780b 	.word	0x0800780b
 80076c0:	0800772d 	.word	0x0800772d
 80076c4:	080077ed 	.word	0x080077ed
 80076c8:	08007679 	.word	0x08007679
 80076cc:	08007679 	.word	0x08007679
 80076d0:	0800782d 	.word	0x0800782d
 80076d4:	08007679 	.word	0x08007679
 80076d8:	0800772d 	.word	0x0800772d
 80076dc:	08007679 	.word	0x08007679
 80076e0:	08007679 	.word	0x08007679
 80076e4:	080077f5 	.word	0x080077f5
 80076e8:	682b      	ldr	r3, [r5, #0]
 80076ea:	1d1a      	adds	r2, r3, #4
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	602a      	str	r2, [r5, #0]
 80076f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076f8:	2301      	movs	r3, #1
 80076fa:	e0a4      	b.n	8007846 <_printf_i+0x1f6>
 80076fc:	6820      	ldr	r0, [r4, #0]
 80076fe:	6829      	ldr	r1, [r5, #0]
 8007700:	0606      	lsls	r6, r0, #24
 8007702:	f101 0304 	add.w	r3, r1, #4
 8007706:	d50a      	bpl.n	800771e <_printf_i+0xce>
 8007708:	680e      	ldr	r6, [r1, #0]
 800770a:	602b      	str	r3, [r5, #0]
 800770c:	2e00      	cmp	r6, #0
 800770e:	da03      	bge.n	8007718 <_printf_i+0xc8>
 8007710:	232d      	movs	r3, #45	; 0x2d
 8007712:	4276      	negs	r6, r6
 8007714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007718:	230a      	movs	r3, #10
 800771a:	485e      	ldr	r0, [pc, #376]	; (8007894 <_printf_i+0x244>)
 800771c:	e019      	b.n	8007752 <_printf_i+0x102>
 800771e:	680e      	ldr	r6, [r1, #0]
 8007720:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007724:	602b      	str	r3, [r5, #0]
 8007726:	bf18      	it	ne
 8007728:	b236      	sxthne	r6, r6
 800772a:	e7ef      	b.n	800770c <_printf_i+0xbc>
 800772c:	682b      	ldr	r3, [r5, #0]
 800772e:	6820      	ldr	r0, [r4, #0]
 8007730:	1d19      	adds	r1, r3, #4
 8007732:	6029      	str	r1, [r5, #0]
 8007734:	0601      	lsls	r1, r0, #24
 8007736:	d501      	bpl.n	800773c <_printf_i+0xec>
 8007738:	681e      	ldr	r6, [r3, #0]
 800773a:	e002      	b.n	8007742 <_printf_i+0xf2>
 800773c:	0646      	lsls	r6, r0, #25
 800773e:	d5fb      	bpl.n	8007738 <_printf_i+0xe8>
 8007740:	881e      	ldrh	r6, [r3, #0]
 8007742:	2f6f      	cmp	r7, #111	; 0x6f
 8007744:	bf0c      	ite	eq
 8007746:	2308      	moveq	r3, #8
 8007748:	230a      	movne	r3, #10
 800774a:	4852      	ldr	r0, [pc, #328]	; (8007894 <_printf_i+0x244>)
 800774c:	2100      	movs	r1, #0
 800774e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007752:	6865      	ldr	r5, [r4, #4]
 8007754:	2d00      	cmp	r5, #0
 8007756:	bfa8      	it	ge
 8007758:	6821      	ldrge	r1, [r4, #0]
 800775a:	60a5      	str	r5, [r4, #8]
 800775c:	bfa4      	itt	ge
 800775e:	f021 0104 	bicge.w	r1, r1, #4
 8007762:	6021      	strge	r1, [r4, #0]
 8007764:	b90e      	cbnz	r6, 800776a <_printf_i+0x11a>
 8007766:	2d00      	cmp	r5, #0
 8007768:	d04d      	beq.n	8007806 <_printf_i+0x1b6>
 800776a:	4615      	mov	r5, r2
 800776c:	fbb6 f1f3 	udiv	r1, r6, r3
 8007770:	fb03 6711 	mls	r7, r3, r1, r6
 8007774:	5dc7      	ldrb	r7, [r0, r7]
 8007776:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800777a:	4637      	mov	r7, r6
 800777c:	42bb      	cmp	r3, r7
 800777e:	460e      	mov	r6, r1
 8007780:	d9f4      	bls.n	800776c <_printf_i+0x11c>
 8007782:	2b08      	cmp	r3, #8
 8007784:	d10b      	bne.n	800779e <_printf_i+0x14e>
 8007786:	6823      	ldr	r3, [r4, #0]
 8007788:	07de      	lsls	r6, r3, #31
 800778a:	d508      	bpl.n	800779e <_printf_i+0x14e>
 800778c:	6923      	ldr	r3, [r4, #16]
 800778e:	6861      	ldr	r1, [r4, #4]
 8007790:	4299      	cmp	r1, r3
 8007792:	bfde      	ittt	le
 8007794:	2330      	movle	r3, #48	; 0x30
 8007796:	f805 3c01 	strble.w	r3, [r5, #-1]
 800779a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800779e:	1b52      	subs	r2, r2, r5
 80077a0:	6122      	str	r2, [r4, #16]
 80077a2:	464b      	mov	r3, r9
 80077a4:	4621      	mov	r1, r4
 80077a6:	4640      	mov	r0, r8
 80077a8:	f8cd a000 	str.w	sl, [sp]
 80077ac:	aa03      	add	r2, sp, #12
 80077ae:	f7ff fedf 	bl	8007570 <_printf_common>
 80077b2:	3001      	adds	r0, #1
 80077b4:	d14c      	bne.n	8007850 <_printf_i+0x200>
 80077b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077ba:	b004      	add	sp, #16
 80077bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c0:	4834      	ldr	r0, [pc, #208]	; (8007894 <_printf_i+0x244>)
 80077c2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80077c6:	6829      	ldr	r1, [r5, #0]
 80077c8:	6823      	ldr	r3, [r4, #0]
 80077ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80077ce:	6029      	str	r1, [r5, #0]
 80077d0:	061d      	lsls	r5, r3, #24
 80077d2:	d514      	bpl.n	80077fe <_printf_i+0x1ae>
 80077d4:	07df      	lsls	r7, r3, #31
 80077d6:	bf44      	itt	mi
 80077d8:	f043 0320 	orrmi.w	r3, r3, #32
 80077dc:	6023      	strmi	r3, [r4, #0]
 80077de:	b91e      	cbnz	r6, 80077e8 <_printf_i+0x198>
 80077e0:	6823      	ldr	r3, [r4, #0]
 80077e2:	f023 0320 	bic.w	r3, r3, #32
 80077e6:	6023      	str	r3, [r4, #0]
 80077e8:	2310      	movs	r3, #16
 80077ea:	e7af      	b.n	800774c <_printf_i+0xfc>
 80077ec:	6823      	ldr	r3, [r4, #0]
 80077ee:	f043 0320 	orr.w	r3, r3, #32
 80077f2:	6023      	str	r3, [r4, #0]
 80077f4:	2378      	movs	r3, #120	; 0x78
 80077f6:	4828      	ldr	r0, [pc, #160]	; (8007898 <_printf_i+0x248>)
 80077f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077fc:	e7e3      	b.n	80077c6 <_printf_i+0x176>
 80077fe:	0659      	lsls	r1, r3, #25
 8007800:	bf48      	it	mi
 8007802:	b2b6      	uxthmi	r6, r6
 8007804:	e7e6      	b.n	80077d4 <_printf_i+0x184>
 8007806:	4615      	mov	r5, r2
 8007808:	e7bb      	b.n	8007782 <_printf_i+0x132>
 800780a:	682b      	ldr	r3, [r5, #0]
 800780c:	6826      	ldr	r6, [r4, #0]
 800780e:	1d18      	adds	r0, r3, #4
 8007810:	6961      	ldr	r1, [r4, #20]
 8007812:	6028      	str	r0, [r5, #0]
 8007814:	0635      	lsls	r5, r6, #24
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	d501      	bpl.n	800781e <_printf_i+0x1ce>
 800781a:	6019      	str	r1, [r3, #0]
 800781c:	e002      	b.n	8007824 <_printf_i+0x1d4>
 800781e:	0670      	lsls	r0, r6, #25
 8007820:	d5fb      	bpl.n	800781a <_printf_i+0x1ca>
 8007822:	8019      	strh	r1, [r3, #0]
 8007824:	2300      	movs	r3, #0
 8007826:	4615      	mov	r5, r2
 8007828:	6123      	str	r3, [r4, #16]
 800782a:	e7ba      	b.n	80077a2 <_printf_i+0x152>
 800782c:	682b      	ldr	r3, [r5, #0]
 800782e:	2100      	movs	r1, #0
 8007830:	1d1a      	adds	r2, r3, #4
 8007832:	602a      	str	r2, [r5, #0]
 8007834:	681d      	ldr	r5, [r3, #0]
 8007836:	6862      	ldr	r2, [r4, #4]
 8007838:	4628      	mov	r0, r5
 800783a:	f001 fa39 	bl	8008cb0 <memchr>
 800783e:	b108      	cbz	r0, 8007844 <_printf_i+0x1f4>
 8007840:	1b40      	subs	r0, r0, r5
 8007842:	6060      	str	r0, [r4, #4]
 8007844:	6863      	ldr	r3, [r4, #4]
 8007846:	6123      	str	r3, [r4, #16]
 8007848:	2300      	movs	r3, #0
 800784a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800784e:	e7a8      	b.n	80077a2 <_printf_i+0x152>
 8007850:	462a      	mov	r2, r5
 8007852:	4649      	mov	r1, r9
 8007854:	4640      	mov	r0, r8
 8007856:	6923      	ldr	r3, [r4, #16]
 8007858:	47d0      	blx	sl
 800785a:	3001      	adds	r0, #1
 800785c:	d0ab      	beq.n	80077b6 <_printf_i+0x166>
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	079b      	lsls	r3, r3, #30
 8007862:	d413      	bmi.n	800788c <_printf_i+0x23c>
 8007864:	68e0      	ldr	r0, [r4, #12]
 8007866:	9b03      	ldr	r3, [sp, #12]
 8007868:	4298      	cmp	r0, r3
 800786a:	bfb8      	it	lt
 800786c:	4618      	movlt	r0, r3
 800786e:	e7a4      	b.n	80077ba <_printf_i+0x16a>
 8007870:	2301      	movs	r3, #1
 8007872:	4632      	mov	r2, r6
 8007874:	4649      	mov	r1, r9
 8007876:	4640      	mov	r0, r8
 8007878:	47d0      	blx	sl
 800787a:	3001      	adds	r0, #1
 800787c:	d09b      	beq.n	80077b6 <_printf_i+0x166>
 800787e:	3501      	adds	r5, #1
 8007880:	68e3      	ldr	r3, [r4, #12]
 8007882:	9903      	ldr	r1, [sp, #12]
 8007884:	1a5b      	subs	r3, r3, r1
 8007886:	42ab      	cmp	r3, r5
 8007888:	dcf2      	bgt.n	8007870 <_printf_i+0x220>
 800788a:	e7eb      	b.n	8007864 <_printf_i+0x214>
 800788c:	2500      	movs	r5, #0
 800788e:	f104 0619 	add.w	r6, r4, #25
 8007892:	e7f5      	b.n	8007880 <_printf_i+0x230>
 8007894:	08009e2e 	.word	0x08009e2e
 8007898:	08009e3f 	.word	0x08009e3f

0800789c <iprintf>:
 800789c:	b40f      	push	{r0, r1, r2, r3}
 800789e:	4b0a      	ldr	r3, [pc, #40]	; (80078c8 <iprintf+0x2c>)
 80078a0:	b513      	push	{r0, r1, r4, lr}
 80078a2:	681c      	ldr	r4, [r3, #0]
 80078a4:	b124      	cbz	r4, 80078b0 <iprintf+0x14>
 80078a6:	69a3      	ldr	r3, [r4, #24]
 80078a8:	b913      	cbnz	r3, 80078b0 <iprintf+0x14>
 80078aa:	4620      	mov	r0, r4
 80078ac:	f7ff fa26 	bl	8006cfc <__sinit>
 80078b0:	ab05      	add	r3, sp, #20
 80078b2:	4620      	mov	r0, r4
 80078b4:	9a04      	ldr	r2, [sp, #16]
 80078b6:	68a1      	ldr	r1, [r4, #8]
 80078b8:	9301      	str	r3, [sp, #4]
 80078ba:	f001 ff75 	bl	80097a8 <_vfiprintf_r>
 80078be:	b002      	add	sp, #8
 80078c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078c4:	b004      	add	sp, #16
 80078c6:	4770      	bx	lr
 80078c8:	20000018 	.word	0x20000018

080078cc <_puts_r>:
 80078cc:	b570      	push	{r4, r5, r6, lr}
 80078ce:	460e      	mov	r6, r1
 80078d0:	4605      	mov	r5, r0
 80078d2:	b118      	cbz	r0, 80078dc <_puts_r+0x10>
 80078d4:	6983      	ldr	r3, [r0, #24]
 80078d6:	b90b      	cbnz	r3, 80078dc <_puts_r+0x10>
 80078d8:	f7ff fa10 	bl	8006cfc <__sinit>
 80078dc:	69ab      	ldr	r3, [r5, #24]
 80078de:	68ac      	ldr	r4, [r5, #8]
 80078e0:	b913      	cbnz	r3, 80078e8 <_puts_r+0x1c>
 80078e2:	4628      	mov	r0, r5
 80078e4:	f7ff fa0a 	bl	8006cfc <__sinit>
 80078e8:	4b2c      	ldr	r3, [pc, #176]	; (800799c <_puts_r+0xd0>)
 80078ea:	429c      	cmp	r4, r3
 80078ec:	d120      	bne.n	8007930 <_puts_r+0x64>
 80078ee:	686c      	ldr	r4, [r5, #4]
 80078f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078f2:	07db      	lsls	r3, r3, #31
 80078f4:	d405      	bmi.n	8007902 <_puts_r+0x36>
 80078f6:	89a3      	ldrh	r3, [r4, #12]
 80078f8:	0598      	lsls	r0, r3, #22
 80078fa:	d402      	bmi.n	8007902 <_puts_r+0x36>
 80078fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078fe:	f7ff fac0 	bl	8006e82 <__retarget_lock_acquire_recursive>
 8007902:	89a3      	ldrh	r3, [r4, #12]
 8007904:	0719      	lsls	r1, r3, #28
 8007906:	d51d      	bpl.n	8007944 <_puts_r+0x78>
 8007908:	6923      	ldr	r3, [r4, #16]
 800790a:	b1db      	cbz	r3, 8007944 <_puts_r+0x78>
 800790c:	3e01      	subs	r6, #1
 800790e:	68a3      	ldr	r3, [r4, #8]
 8007910:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007914:	3b01      	subs	r3, #1
 8007916:	60a3      	str	r3, [r4, #8]
 8007918:	bb39      	cbnz	r1, 800796a <_puts_r+0x9e>
 800791a:	2b00      	cmp	r3, #0
 800791c:	da38      	bge.n	8007990 <_puts_r+0xc4>
 800791e:	4622      	mov	r2, r4
 8007920:	210a      	movs	r1, #10
 8007922:	4628      	mov	r0, r5
 8007924:	f000 f926 	bl	8007b74 <__swbuf_r>
 8007928:	3001      	adds	r0, #1
 800792a:	d011      	beq.n	8007950 <_puts_r+0x84>
 800792c:	250a      	movs	r5, #10
 800792e:	e011      	b.n	8007954 <_puts_r+0x88>
 8007930:	4b1b      	ldr	r3, [pc, #108]	; (80079a0 <_puts_r+0xd4>)
 8007932:	429c      	cmp	r4, r3
 8007934:	d101      	bne.n	800793a <_puts_r+0x6e>
 8007936:	68ac      	ldr	r4, [r5, #8]
 8007938:	e7da      	b.n	80078f0 <_puts_r+0x24>
 800793a:	4b1a      	ldr	r3, [pc, #104]	; (80079a4 <_puts_r+0xd8>)
 800793c:	429c      	cmp	r4, r3
 800793e:	bf08      	it	eq
 8007940:	68ec      	ldreq	r4, [r5, #12]
 8007942:	e7d5      	b.n	80078f0 <_puts_r+0x24>
 8007944:	4621      	mov	r1, r4
 8007946:	4628      	mov	r0, r5
 8007948:	f000 f978 	bl	8007c3c <__swsetup_r>
 800794c:	2800      	cmp	r0, #0
 800794e:	d0dd      	beq.n	800790c <_puts_r+0x40>
 8007950:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007954:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007956:	07da      	lsls	r2, r3, #31
 8007958:	d405      	bmi.n	8007966 <_puts_r+0x9a>
 800795a:	89a3      	ldrh	r3, [r4, #12]
 800795c:	059b      	lsls	r3, r3, #22
 800795e:	d402      	bmi.n	8007966 <_puts_r+0x9a>
 8007960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007962:	f7ff fa8f 	bl	8006e84 <__retarget_lock_release_recursive>
 8007966:	4628      	mov	r0, r5
 8007968:	bd70      	pop	{r4, r5, r6, pc}
 800796a:	2b00      	cmp	r3, #0
 800796c:	da04      	bge.n	8007978 <_puts_r+0xac>
 800796e:	69a2      	ldr	r2, [r4, #24]
 8007970:	429a      	cmp	r2, r3
 8007972:	dc06      	bgt.n	8007982 <_puts_r+0xb6>
 8007974:	290a      	cmp	r1, #10
 8007976:	d004      	beq.n	8007982 <_puts_r+0xb6>
 8007978:	6823      	ldr	r3, [r4, #0]
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	6022      	str	r2, [r4, #0]
 800797e:	7019      	strb	r1, [r3, #0]
 8007980:	e7c5      	b.n	800790e <_puts_r+0x42>
 8007982:	4622      	mov	r2, r4
 8007984:	4628      	mov	r0, r5
 8007986:	f000 f8f5 	bl	8007b74 <__swbuf_r>
 800798a:	3001      	adds	r0, #1
 800798c:	d1bf      	bne.n	800790e <_puts_r+0x42>
 800798e:	e7df      	b.n	8007950 <_puts_r+0x84>
 8007990:	250a      	movs	r5, #10
 8007992:	6823      	ldr	r3, [r4, #0]
 8007994:	1c5a      	adds	r2, r3, #1
 8007996:	6022      	str	r2, [r4, #0]
 8007998:	701d      	strb	r5, [r3, #0]
 800799a:	e7db      	b.n	8007954 <_puts_r+0x88>
 800799c:	08009dd8 	.word	0x08009dd8
 80079a0:	08009df8 	.word	0x08009df8
 80079a4:	08009db8 	.word	0x08009db8

080079a8 <puts>:
 80079a8:	4b02      	ldr	r3, [pc, #8]	; (80079b4 <puts+0xc>)
 80079aa:	4601      	mov	r1, r0
 80079ac:	6818      	ldr	r0, [r3, #0]
 80079ae:	f7ff bf8d 	b.w	80078cc <_puts_r>
 80079b2:	bf00      	nop
 80079b4:	20000018 	.word	0x20000018

080079b8 <cleanup_glue>:
 80079b8:	b538      	push	{r3, r4, r5, lr}
 80079ba:	460c      	mov	r4, r1
 80079bc:	6809      	ldr	r1, [r1, #0]
 80079be:	4605      	mov	r5, r0
 80079c0:	b109      	cbz	r1, 80079c6 <cleanup_glue+0xe>
 80079c2:	f7ff fff9 	bl	80079b8 <cleanup_glue>
 80079c6:	4621      	mov	r1, r4
 80079c8:	4628      	mov	r0, r5
 80079ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079ce:	f001 bd1f 	b.w	8009410 <_free_r>
	...

080079d4 <_reclaim_reent>:
 80079d4:	4b2c      	ldr	r3, [pc, #176]	; (8007a88 <_reclaim_reent+0xb4>)
 80079d6:	b570      	push	{r4, r5, r6, lr}
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4604      	mov	r4, r0
 80079dc:	4283      	cmp	r3, r0
 80079de:	d051      	beq.n	8007a84 <_reclaim_reent+0xb0>
 80079e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80079e2:	b143      	cbz	r3, 80079f6 <_reclaim_reent+0x22>
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d14a      	bne.n	8007a80 <_reclaim_reent+0xac>
 80079ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079ec:	6819      	ldr	r1, [r3, #0]
 80079ee:	b111      	cbz	r1, 80079f6 <_reclaim_reent+0x22>
 80079f0:	4620      	mov	r0, r4
 80079f2:	f001 fd0d 	bl	8009410 <_free_r>
 80079f6:	6961      	ldr	r1, [r4, #20]
 80079f8:	b111      	cbz	r1, 8007a00 <_reclaim_reent+0x2c>
 80079fa:	4620      	mov	r0, r4
 80079fc:	f001 fd08 	bl	8009410 <_free_r>
 8007a00:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007a02:	b111      	cbz	r1, 8007a0a <_reclaim_reent+0x36>
 8007a04:	4620      	mov	r0, r4
 8007a06:	f001 fd03 	bl	8009410 <_free_r>
 8007a0a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007a0c:	b111      	cbz	r1, 8007a14 <_reclaim_reent+0x40>
 8007a0e:	4620      	mov	r0, r4
 8007a10:	f001 fcfe 	bl	8009410 <_free_r>
 8007a14:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007a16:	b111      	cbz	r1, 8007a1e <_reclaim_reent+0x4a>
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f001 fcf9 	bl	8009410 <_free_r>
 8007a1e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007a20:	b111      	cbz	r1, 8007a28 <_reclaim_reent+0x54>
 8007a22:	4620      	mov	r0, r4
 8007a24:	f001 fcf4 	bl	8009410 <_free_r>
 8007a28:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007a2a:	b111      	cbz	r1, 8007a32 <_reclaim_reent+0x5e>
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f001 fcef 	bl	8009410 <_free_r>
 8007a32:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007a34:	b111      	cbz	r1, 8007a3c <_reclaim_reent+0x68>
 8007a36:	4620      	mov	r0, r4
 8007a38:	f001 fcea 	bl	8009410 <_free_r>
 8007a3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a3e:	b111      	cbz	r1, 8007a46 <_reclaim_reent+0x72>
 8007a40:	4620      	mov	r0, r4
 8007a42:	f001 fce5 	bl	8009410 <_free_r>
 8007a46:	69a3      	ldr	r3, [r4, #24]
 8007a48:	b1e3      	cbz	r3, 8007a84 <_reclaim_reent+0xb0>
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007a4e:	4798      	blx	r3
 8007a50:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007a52:	b1b9      	cbz	r1, 8007a84 <_reclaim_reent+0xb0>
 8007a54:	4620      	mov	r0, r4
 8007a56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007a5a:	f7ff bfad 	b.w	80079b8 <cleanup_glue>
 8007a5e:	5949      	ldr	r1, [r1, r5]
 8007a60:	b941      	cbnz	r1, 8007a74 <_reclaim_reent+0xa0>
 8007a62:	3504      	adds	r5, #4
 8007a64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a66:	2d80      	cmp	r5, #128	; 0x80
 8007a68:	68d9      	ldr	r1, [r3, #12]
 8007a6a:	d1f8      	bne.n	8007a5e <_reclaim_reent+0x8a>
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f001 fccf 	bl	8009410 <_free_r>
 8007a72:	e7ba      	b.n	80079ea <_reclaim_reent+0x16>
 8007a74:	680e      	ldr	r6, [r1, #0]
 8007a76:	4620      	mov	r0, r4
 8007a78:	f001 fcca 	bl	8009410 <_free_r>
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	e7ef      	b.n	8007a60 <_reclaim_reent+0x8c>
 8007a80:	2500      	movs	r5, #0
 8007a82:	e7ef      	b.n	8007a64 <_reclaim_reent+0x90>
 8007a84:	bd70      	pop	{r4, r5, r6, pc}
 8007a86:	bf00      	nop
 8007a88:	20000018 	.word	0x20000018

08007a8c <_sbrk_r>:
 8007a8c:	b538      	push	{r3, r4, r5, lr}
 8007a8e:	2300      	movs	r3, #0
 8007a90:	4d05      	ldr	r5, [pc, #20]	; (8007aa8 <_sbrk_r+0x1c>)
 8007a92:	4604      	mov	r4, r0
 8007a94:	4608      	mov	r0, r1
 8007a96:	602b      	str	r3, [r5, #0]
 8007a98:	f7fa f994 	bl	8001dc4 <_sbrk>
 8007a9c:	1c43      	adds	r3, r0, #1
 8007a9e:	d102      	bne.n	8007aa6 <_sbrk_r+0x1a>
 8007aa0:	682b      	ldr	r3, [r5, #0]
 8007aa2:	b103      	cbz	r3, 8007aa6 <_sbrk_r+0x1a>
 8007aa4:	6023      	str	r3, [r4, #0]
 8007aa6:	bd38      	pop	{r3, r4, r5, pc}
 8007aa8:	200013f4 	.word	0x200013f4

08007aac <siprintf>:
 8007aac:	b40e      	push	{r1, r2, r3}
 8007aae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ab2:	b500      	push	{lr}
 8007ab4:	b09c      	sub	sp, #112	; 0x70
 8007ab6:	ab1d      	add	r3, sp, #116	; 0x74
 8007ab8:	9002      	str	r0, [sp, #8]
 8007aba:	9006      	str	r0, [sp, #24]
 8007abc:	9107      	str	r1, [sp, #28]
 8007abe:	9104      	str	r1, [sp, #16]
 8007ac0:	4808      	ldr	r0, [pc, #32]	; (8007ae4 <siprintf+0x38>)
 8007ac2:	4909      	ldr	r1, [pc, #36]	; (8007ae8 <siprintf+0x3c>)
 8007ac4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ac8:	9105      	str	r1, [sp, #20]
 8007aca:	6800      	ldr	r0, [r0, #0]
 8007acc:	a902      	add	r1, sp, #8
 8007ace:	9301      	str	r3, [sp, #4]
 8007ad0:	f001 fd42 	bl	8009558 <_svfiprintf_r>
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	9b02      	ldr	r3, [sp, #8]
 8007ad8:	701a      	strb	r2, [r3, #0]
 8007ada:	b01c      	add	sp, #112	; 0x70
 8007adc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ae0:	b003      	add	sp, #12
 8007ae2:	4770      	bx	lr
 8007ae4:	20000018 	.word	0x20000018
 8007ae8:	ffff0208 	.word	0xffff0208

08007aec <__sread>:
 8007aec:	b510      	push	{r4, lr}
 8007aee:	460c      	mov	r4, r1
 8007af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af4:	f001 ff88 	bl	8009a08 <_read_r>
 8007af8:	2800      	cmp	r0, #0
 8007afa:	bfab      	itete	ge
 8007afc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007afe:	89a3      	ldrhlt	r3, [r4, #12]
 8007b00:	181b      	addge	r3, r3, r0
 8007b02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b06:	bfac      	ite	ge
 8007b08:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b0a:	81a3      	strhlt	r3, [r4, #12]
 8007b0c:	bd10      	pop	{r4, pc}

08007b0e <__swrite>:
 8007b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b12:	461f      	mov	r7, r3
 8007b14:	898b      	ldrh	r3, [r1, #12]
 8007b16:	4605      	mov	r5, r0
 8007b18:	05db      	lsls	r3, r3, #23
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	4616      	mov	r6, r2
 8007b1e:	d505      	bpl.n	8007b2c <__swrite+0x1e>
 8007b20:	2302      	movs	r3, #2
 8007b22:	2200      	movs	r2, #0
 8007b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b28:	f001 f842 	bl	8008bb0 <_lseek_r>
 8007b2c:	89a3      	ldrh	r3, [r4, #12]
 8007b2e:	4632      	mov	r2, r6
 8007b30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b34:	81a3      	strh	r3, [r4, #12]
 8007b36:	4628      	mov	r0, r5
 8007b38:	463b      	mov	r3, r7
 8007b3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b42:	f000 b869 	b.w	8007c18 <_write_r>

08007b46 <__sseek>:
 8007b46:	b510      	push	{r4, lr}
 8007b48:	460c      	mov	r4, r1
 8007b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b4e:	f001 f82f 	bl	8008bb0 <_lseek_r>
 8007b52:	1c43      	adds	r3, r0, #1
 8007b54:	89a3      	ldrh	r3, [r4, #12]
 8007b56:	bf15      	itete	ne
 8007b58:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b62:	81a3      	strheq	r3, [r4, #12]
 8007b64:	bf18      	it	ne
 8007b66:	81a3      	strhne	r3, [r4, #12]
 8007b68:	bd10      	pop	{r4, pc}

08007b6a <__sclose>:
 8007b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b6e:	f000 b8d3 	b.w	8007d18 <_close_r>
	...

08007b74 <__swbuf_r>:
 8007b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b76:	460e      	mov	r6, r1
 8007b78:	4614      	mov	r4, r2
 8007b7a:	4605      	mov	r5, r0
 8007b7c:	b118      	cbz	r0, 8007b86 <__swbuf_r+0x12>
 8007b7e:	6983      	ldr	r3, [r0, #24]
 8007b80:	b90b      	cbnz	r3, 8007b86 <__swbuf_r+0x12>
 8007b82:	f7ff f8bb 	bl	8006cfc <__sinit>
 8007b86:	4b21      	ldr	r3, [pc, #132]	; (8007c0c <__swbuf_r+0x98>)
 8007b88:	429c      	cmp	r4, r3
 8007b8a:	d12b      	bne.n	8007be4 <__swbuf_r+0x70>
 8007b8c:	686c      	ldr	r4, [r5, #4]
 8007b8e:	69a3      	ldr	r3, [r4, #24]
 8007b90:	60a3      	str	r3, [r4, #8]
 8007b92:	89a3      	ldrh	r3, [r4, #12]
 8007b94:	071a      	lsls	r2, r3, #28
 8007b96:	d52f      	bpl.n	8007bf8 <__swbuf_r+0x84>
 8007b98:	6923      	ldr	r3, [r4, #16]
 8007b9a:	b36b      	cbz	r3, 8007bf8 <__swbuf_r+0x84>
 8007b9c:	6923      	ldr	r3, [r4, #16]
 8007b9e:	6820      	ldr	r0, [r4, #0]
 8007ba0:	b2f6      	uxtb	r6, r6
 8007ba2:	1ac0      	subs	r0, r0, r3
 8007ba4:	6963      	ldr	r3, [r4, #20]
 8007ba6:	4637      	mov	r7, r6
 8007ba8:	4283      	cmp	r3, r0
 8007baa:	dc04      	bgt.n	8007bb6 <__swbuf_r+0x42>
 8007bac:	4621      	mov	r1, r4
 8007bae:	4628      	mov	r0, r5
 8007bb0:	f000 ffbe 	bl	8008b30 <_fflush_r>
 8007bb4:	bb30      	cbnz	r0, 8007c04 <__swbuf_r+0x90>
 8007bb6:	68a3      	ldr	r3, [r4, #8]
 8007bb8:	3001      	adds	r0, #1
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	60a3      	str	r3, [r4, #8]
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	1c5a      	adds	r2, r3, #1
 8007bc2:	6022      	str	r2, [r4, #0]
 8007bc4:	701e      	strb	r6, [r3, #0]
 8007bc6:	6963      	ldr	r3, [r4, #20]
 8007bc8:	4283      	cmp	r3, r0
 8007bca:	d004      	beq.n	8007bd6 <__swbuf_r+0x62>
 8007bcc:	89a3      	ldrh	r3, [r4, #12]
 8007bce:	07db      	lsls	r3, r3, #31
 8007bd0:	d506      	bpl.n	8007be0 <__swbuf_r+0x6c>
 8007bd2:	2e0a      	cmp	r6, #10
 8007bd4:	d104      	bne.n	8007be0 <__swbuf_r+0x6c>
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	4628      	mov	r0, r5
 8007bda:	f000 ffa9 	bl	8008b30 <_fflush_r>
 8007bde:	b988      	cbnz	r0, 8007c04 <__swbuf_r+0x90>
 8007be0:	4638      	mov	r0, r7
 8007be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007be4:	4b0a      	ldr	r3, [pc, #40]	; (8007c10 <__swbuf_r+0x9c>)
 8007be6:	429c      	cmp	r4, r3
 8007be8:	d101      	bne.n	8007bee <__swbuf_r+0x7a>
 8007bea:	68ac      	ldr	r4, [r5, #8]
 8007bec:	e7cf      	b.n	8007b8e <__swbuf_r+0x1a>
 8007bee:	4b09      	ldr	r3, [pc, #36]	; (8007c14 <__swbuf_r+0xa0>)
 8007bf0:	429c      	cmp	r4, r3
 8007bf2:	bf08      	it	eq
 8007bf4:	68ec      	ldreq	r4, [r5, #12]
 8007bf6:	e7ca      	b.n	8007b8e <__swbuf_r+0x1a>
 8007bf8:	4621      	mov	r1, r4
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	f000 f81e 	bl	8007c3c <__swsetup_r>
 8007c00:	2800      	cmp	r0, #0
 8007c02:	d0cb      	beq.n	8007b9c <__swbuf_r+0x28>
 8007c04:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007c08:	e7ea      	b.n	8007be0 <__swbuf_r+0x6c>
 8007c0a:	bf00      	nop
 8007c0c:	08009dd8 	.word	0x08009dd8
 8007c10:	08009df8 	.word	0x08009df8
 8007c14:	08009db8 	.word	0x08009db8

08007c18 <_write_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	4608      	mov	r0, r1
 8007c1e:	4611      	mov	r1, r2
 8007c20:	2200      	movs	r2, #0
 8007c22:	4d05      	ldr	r5, [pc, #20]	; (8007c38 <_write_r+0x20>)
 8007c24:	602a      	str	r2, [r5, #0]
 8007c26:	461a      	mov	r2, r3
 8007c28:	f7fa f880 	bl	8001d2c <_write>
 8007c2c:	1c43      	adds	r3, r0, #1
 8007c2e:	d102      	bne.n	8007c36 <_write_r+0x1e>
 8007c30:	682b      	ldr	r3, [r5, #0]
 8007c32:	b103      	cbz	r3, 8007c36 <_write_r+0x1e>
 8007c34:	6023      	str	r3, [r4, #0]
 8007c36:	bd38      	pop	{r3, r4, r5, pc}
 8007c38:	200013f4 	.word	0x200013f4

08007c3c <__swsetup_r>:
 8007c3c:	4b32      	ldr	r3, [pc, #200]	; (8007d08 <__swsetup_r+0xcc>)
 8007c3e:	b570      	push	{r4, r5, r6, lr}
 8007c40:	681d      	ldr	r5, [r3, #0]
 8007c42:	4606      	mov	r6, r0
 8007c44:	460c      	mov	r4, r1
 8007c46:	b125      	cbz	r5, 8007c52 <__swsetup_r+0x16>
 8007c48:	69ab      	ldr	r3, [r5, #24]
 8007c4a:	b913      	cbnz	r3, 8007c52 <__swsetup_r+0x16>
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	f7ff f855 	bl	8006cfc <__sinit>
 8007c52:	4b2e      	ldr	r3, [pc, #184]	; (8007d0c <__swsetup_r+0xd0>)
 8007c54:	429c      	cmp	r4, r3
 8007c56:	d10f      	bne.n	8007c78 <__swsetup_r+0x3c>
 8007c58:	686c      	ldr	r4, [r5, #4]
 8007c5a:	89a3      	ldrh	r3, [r4, #12]
 8007c5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c60:	0719      	lsls	r1, r3, #28
 8007c62:	d42c      	bmi.n	8007cbe <__swsetup_r+0x82>
 8007c64:	06dd      	lsls	r5, r3, #27
 8007c66:	d411      	bmi.n	8007c8c <__swsetup_r+0x50>
 8007c68:	2309      	movs	r3, #9
 8007c6a:	6033      	str	r3, [r6, #0]
 8007c6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c74:	81a3      	strh	r3, [r4, #12]
 8007c76:	e03e      	b.n	8007cf6 <__swsetup_r+0xba>
 8007c78:	4b25      	ldr	r3, [pc, #148]	; (8007d10 <__swsetup_r+0xd4>)
 8007c7a:	429c      	cmp	r4, r3
 8007c7c:	d101      	bne.n	8007c82 <__swsetup_r+0x46>
 8007c7e:	68ac      	ldr	r4, [r5, #8]
 8007c80:	e7eb      	b.n	8007c5a <__swsetup_r+0x1e>
 8007c82:	4b24      	ldr	r3, [pc, #144]	; (8007d14 <__swsetup_r+0xd8>)
 8007c84:	429c      	cmp	r4, r3
 8007c86:	bf08      	it	eq
 8007c88:	68ec      	ldreq	r4, [r5, #12]
 8007c8a:	e7e6      	b.n	8007c5a <__swsetup_r+0x1e>
 8007c8c:	0758      	lsls	r0, r3, #29
 8007c8e:	d512      	bpl.n	8007cb6 <__swsetup_r+0x7a>
 8007c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c92:	b141      	cbz	r1, 8007ca6 <__swsetup_r+0x6a>
 8007c94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c98:	4299      	cmp	r1, r3
 8007c9a:	d002      	beq.n	8007ca2 <__swsetup_r+0x66>
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f001 fbb7 	bl	8009410 <_free_r>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	6363      	str	r3, [r4, #52]	; 0x34
 8007ca6:	89a3      	ldrh	r3, [r4, #12]
 8007ca8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007cac:	81a3      	strh	r3, [r4, #12]
 8007cae:	2300      	movs	r3, #0
 8007cb0:	6063      	str	r3, [r4, #4]
 8007cb2:	6923      	ldr	r3, [r4, #16]
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	89a3      	ldrh	r3, [r4, #12]
 8007cb8:	f043 0308 	orr.w	r3, r3, #8
 8007cbc:	81a3      	strh	r3, [r4, #12]
 8007cbe:	6923      	ldr	r3, [r4, #16]
 8007cc0:	b94b      	cbnz	r3, 8007cd6 <__swsetup_r+0x9a>
 8007cc2:	89a3      	ldrh	r3, [r4, #12]
 8007cc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ccc:	d003      	beq.n	8007cd6 <__swsetup_r+0x9a>
 8007cce:	4621      	mov	r1, r4
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	f000 ffa5 	bl	8008c20 <__smakebuf_r>
 8007cd6:	89a0      	ldrh	r0, [r4, #12]
 8007cd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cdc:	f010 0301 	ands.w	r3, r0, #1
 8007ce0:	d00a      	beq.n	8007cf8 <__swsetup_r+0xbc>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60a3      	str	r3, [r4, #8]
 8007ce6:	6963      	ldr	r3, [r4, #20]
 8007ce8:	425b      	negs	r3, r3
 8007cea:	61a3      	str	r3, [r4, #24]
 8007cec:	6923      	ldr	r3, [r4, #16]
 8007cee:	b943      	cbnz	r3, 8007d02 <__swsetup_r+0xc6>
 8007cf0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007cf4:	d1ba      	bne.n	8007c6c <__swsetup_r+0x30>
 8007cf6:	bd70      	pop	{r4, r5, r6, pc}
 8007cf8:	0781      	lsls	r1, r0, #30
 8007cfa:	bf58      	it	pl
 8007cfc:	6963      	ldrpl	r3, [r4, #20]
 8007cfe:	60a3      	str	r3, [r4, #8]
 8007d00:	e7f4      	b.n	8007cec <__swsetup_r+0xb0>
 8007d02:	2000      	movs	r0, #0
 8007d04:	e7f7      	b.n	8007cf6 <__swsetup_r+0xba>
 8007d06:	bf00      	nop
 8007d08:	20000018 	.word	0x20000018
 8007d0c:	08009dd8 	.word	0x08009dd8
 8007d10:	08009df8 	.word	0x08009df8
 8007d14:	08009db8 	.word	0x08009db8

08007d18 <_close_r>:
 8007d18:	b538      	push	{r3, r4, r5, lr}
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	4d05      	ldr	r5, [pc, #20]	; (8007d34 <_close_r+0x1c>)
 8007d1e:	4604      	mov	r4, r0
 8007d20:	4608      	mov	r0, r1
 8007d22:	602b      	str	r3, [r5, #0]
 8007d24:	f7fa f81e 	bl	8001d64 <_close>
 8007d28:	1c43      	adds	r3, r0, #1
 8007d2a:	d102      	bne.n	8007d32 <_close_r+0x1a>
 8007d2c:	682b      	ldr	r3, [r5, #0]
 8007d2e:	b103      	cbz	r3, 8007d32 <_close_r+0x1a>
 8007d30:	6023      	str	r3, [r4, #0]
 8007d32:	bd38      	pop	{r3, r4, r5, pc}
 8007d34:	200013f4 	.word	0x200013f4

08007d38 <quorem>:
 8007d38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3c:	6903      	ldr	r3, [r0, #16]
 8007d3e:	690c      	ldr	r4, [r1, #16]
 8007d40:	4607      	mov	r7, r0
 8007d42:	42a3      	cmp	r3, r4
 8007d44:	f2c0 8082 	blt.w	8007e4c <quorem+0x114>
 8007d48:	3c01      	subs	r4, #1
 8007d4a:	f100 0514 	add.w	r5, r0, #20
 8007d4e:	f101 0814 	add.w	r8, r1, #20
 8007d52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d56:	9301      	str	r3, [sp, #4]
 8007d58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d60:	3301      	adds	r3, #1
 8007d62:	429a      	cmp	r2, r3
 8007d64:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d70:	d331      	bcc.n	8007dd6 <quorem+0x9e>
 8007d72:	f04f 0e00 	mov.w	lr, #0
 8007d76:	4640      	mov	r0, r8
 8007d78:	46ac      	mov	ip, r5
 8007d7a:	46f2      	mov	sl, lr
 8007d7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d80:	b293      	uxth	r3, r2
 8007d82:	fb06 e303 	mla	r3, r6, r3, lr
 8007d86:	0c12      	lsrs	r2, r2, #16
 8007d88:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	fb06 e202 	mla	r2, r6, r2, lr
 8007d92:	ebaa 0303 	sub.w	r3, sl, r3
 8007d96:	f8dc a000 	ldr.w	sl, [ip]
 8007d9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d9e:	fa1f fa8a 	uxth.w	sl, sl
 8007da2:	4453      	add	r3, sl
 8007da4:	f8dc a000 	ldr.w	sl, [ip]
 8007da8:	b292      	uxth	r2, r2
 8007daa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007dae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007db8:	4581      	cmp	r9, r0
 8007dba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007dbe:	f84c 3b04 	str.w	r3, [ip], #4
 8007dc2:	d2db      	bcs.n	8007d7c <quorem+0x44>
 8007dc4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007dc8:	b92b      	cbnz	r3, 8007dd6 <quorem+0x9e>
 8007dca:	9b01      	ldr	r3, [sp, #4]
 8007dcc:	3b04      	subs	r3, #4
 8007dce:	429d      	cmp	r5, r3
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	d32f      	bcc.n	8007e34 <quorem+0xfc>
 8007dd4:	613c      	str	r4, [r7, #16]
 8007dd6:	4638      	mov	r0, r7
 8007dd8:	f001 fa02 	bl	80091e0 <__mcmp>
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	db25      	blt.n	8007e2c <quorem+0xf4>
 8007de0:	4628      	mov	r0, r5
 8007de2:	f04f 0c00 	mov.w	ip, #0
 8007de6:	3601      	adds	r6, #1
 8007de8:	f858 1b04 	ldr.w	r1, [r8], #4
 8007dec:	f8d0 e000 	ldr.w	lr, [r0]
 8007df0:	b28b      	uxth	r3, r1
 8007df2:	ebac 0303 	sub.w	r3, ip, r3
 8007df6:	fa1f f28e 	uxth.w	r2, lr
 8007dfa:	4413      	add	r3, r2
 8007dfc:	0c0a      	lsrs	r2, r1, #16
 8007dfe:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007e02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e0c:	45c1      	cmp	r9, r8
 8007e0e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007e12:	f840 3b04 	str.w	r3, [r0], #4
 8007e16:	d2e7      	bcs.n	8007de8 <quorem+0xb0>
 8007e18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e20:	b922      	cbnz	r2, 8007e2c <quorem+0xf4>
 8007e22:	3b04      	subs	r3, #4
 8007e24:	429d      	cmp	r5, r3
 8007e26:	461a      	mov	r2, r3
 8007e28:	d30a      	bcc.n	8007e40 <quorem+0x108>
 8007e2a:	613c      	str	r4, [r7, #16]
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	b003      	add	sp, #12
 8007e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e34:	6812      	ldr	r2, [r2, #0]
 8007e36:	3b04      	subs	r3, #4
 8007e38:	2a00      	cmp	r2, #0
 8007e3a:	d1cb      	bne.n	8007dd4 <quorem+0x9c>
 8007e3c:	3c01      	subs	r4, #1
 8007e3e:	e7c6      	b.n	8007dce <quorem+0x96>
 8007e40:	6812      	ldr	r2, [r2, #0]
 8007e42:	3b04      	subs	r3, #4
 8007e44:	2a00      	cmp	r2, #0
 8007e46:	d1f0      	bne.n	8007e2a <quorem+0xf2>
 8007e48:	3c01      	subs	r4, #1
 8007e4a:	e7eb      	b.n	8007e24 <quorem+0xec>
 8007e4c:	2000      	movs	r0, #0
 8007e4e:	e7ee      	b.n	8007e2e <quorem+0xf6>

08007e50 <_dtoa_r>:
 8007e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e54:	4616      	mov	r6, r2
 8007e56:	461f      	mov	r7, r3
 8007e58:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007e5a:	b099      	sub	sp, #100	; 0x64
 8007e5c:	4605      	mov	r5, r0
 8007e5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007e62:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007e66:	b974      	cbnz	r4, 8007e86 <_dtoa_r+0x36>
 8007e68:	2010      	movs	r0, #16
 8007e6a:	f000 ff19 	bl	8008ca0 <malloc>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	6268      	str	r0, [r5, #36]	; 0x24
 8007e72:	b920      	cbnz	r0, 8007e7e <_dtoa_r+0x2e>
 8007e74:	21ea      	movs	r1, #234	; 0xea
 8007e76:	4ba8      	ldr	r3, [pc, #672]	; (8008118 <_dtoa_r+0x2c8>)
 8007e78:	48a8      	ldr	r0, [pc, #672]	; (800811c <_dtoa_r+0x2cc>)
 8007e7a:	f001 fdd7 	bl	8009a2c <__assert_func>
 8007e7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e82:	6004      	str	r4, [r0, #0]
 8007e84:	60c4      	str	r4, [r0, #12]
 8007e86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007e88:	6819      	ldr	r1, [r3, #0]
 8007e8a:	b151      	cbz	r1, 8007ea2 <_dtoa_r+0x52>
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	2301      	movs	r3, #1
 8007e90:	4093      	lsls	r3, r2
 8007e92:	604a      	str	r2, [r1, #4]
 8007e94:	608b      	str	r3, [r1, #8]
 8007e96:	4628      	mov	r0, r5
 8007e98:	f000 ff64 	bl	8008d64 <_Bfree>
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	1e3b      	subs	r3, r7, #0
 8007ea4:	bfaf      	iteee	ge
 8007ea6:	2300      	movge	r3, #0
 8007ea8:	2201      	movlt	r2, #1
 8007eaa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007eae:	9305      	strlt	r3, [sp, #20]
 8007eb0:	bfa8      	it	ge
 8007eb2:	f8c8 3000 	strge.w	r3, [r8]
 8007eb6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007eba:	4b99      	ldr	r3, [pc, #612]	; (8008120 <_dtoa_r+0x2d0>)
 8007ebc:	bfb8      	it	lt
 8007ebe:	f8c8 2000 	strlt.w	r2, [r8]
 8007ec2:	ea33 0309 	bics.w	r3, r3, r9
 8007ec6:	d119      	bne.n	8007efc <_dtoa_r+0xac>
 8007ec8:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ecc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ece:	6013      	str	r3, [r2, #0]
 8007ed0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ed4:	4333      	orrs	r3, r6
 8007ed6:	f000 857f 	beq.w	80089d8 <_dtoa_r+0xb88>
 8007eda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007edc:	b953      	cbnz	r3, 8007ef4 <_dtoa_r+0xa4>
 8007ede:	4b91      	ldr	r3, [pc, #580]	; (8008124 <_dtoa_r+0x2d4>)
 8007ee0:	e022      	b.n	8007f28 <_dtoa_r+0xd8>
 8007ee2:	4b91      	ldr	r3, [pc, #580]	; (8008128 <_dtoa_r+0x2d8>)
 8007ee4:	9303      	str	r3, [sp, #12]
 8007ee6:	3308      	adds	r3, #8
 8007ee8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007eea:	6013      	str	r3, [r2, #0]
 8007eec:	9803      	ldr	r0, [sp, #12]
 8007eee:	b019      	add	sp, #100	; 0x64
 8007ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ef4:	4b8b      	ldr	r3, [pc, #556]	; (8008124 <_dtoa_r+0x2d4>)
 8007ef6:	9303      	str	r3, [sp, #12]
 8007ef8:	3303      	adds	r3, #3
 8007efa:	e7f5      	b.n	8007ee8 <_dtoa_r+0x98>
 8007efc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007f00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007f04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	f7f8 fe00 	bl	8000b10 <__aeabi_dcmpeq>
 8007f10:	4680      	mov	r8, r0
 8007f12:	b158      	cbz	r0, 8007f2c <_dtoa_r+0xdc>
 8007f14:	2301      	movs	r3, #1
 8007f16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007f18:	6013      	str	r3, [r2, #0]
 8007f1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f000 8558 	beq.w	80089d2 <_dtoa_r+0xb82>
 8007f22:	4882      	ldr	r0, [pc, #520]	; (800812c <_dtoa_r+0x2dc>)
 8007f24:	6018      	str	r0, [r3, #0]
 8007f26:	1e43      	subs	r3, r0, #1
 8007f28:	9303      	str	r3, [sp, #12]
 8007f2a:	e7df      	b.n	8007eec <_dtoa_r+0x9c>
 8007f2c:	ab16      	add	r3, sp, #88	; 0x58
 8007f2e:	9301      	str	r3, [sp, #4]
 8007f30:	ab17      	add	r3, sp, #92	; 0x5c
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	4628      	mov	r0, r5
 8007f36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007f3a:	f001 f9f9 	bl	8009330 <__d2b>
 8007f3e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007f42:	4683      	mov	fp, r0
 8007f44:	2c00      	cmp	r4, #0
 8007f46:	d07f      	beq.n	8008048 <_dtoa_r+0x1f8>
 8007f48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f4e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007f52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f56:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007f5a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007f5e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007f62:	2200      	movs	r2, #0
 8007f64:	4b72      	ldr	r3, [pc, #456]	; (8008130 <_dtoa_r+0x2e0>)
 8007f66:	f7f8 f9b3 	bl	80002d0 <__aeabi_dsub>
 8007f6a:	a365      	add	r3, pc, #404	; (adr r3, 8008100 <_dtoa_r+0x2b0>)
 8007f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f70:	f7f8 fb66 	bl	8000640 <__aeabi_dmul>
 8007f74:	a364      	add	r3, pc, #400	; (adr r3, 8008108 <_dtoa_r+0x2b8>)
 8007f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7a:	f7f8 f9ab 	bl	80002d4 <__adddf3>
 8007f7e:	4606      	mov	r6, r0
 8007f80:	4620      	mov	r0, r4
 8007f82:	460f      	mov	r7, r1
 8007f84:	f7f8 faf2 	bl	800056c <__aeabi_i2d>
 8007f88:	a361      	add	r3, pc, #388	; (adr r3, 8008110 <_dtoa_r+0x2c0>)
 8007f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8e:	f7f8 fb57 	bl	8000640 <__aeabi_dmul>
 8007f92:	4602      	mov	r2, r0
 8007f94:	460b      	mov	r3, r1
 8007f96:	4630      	mov	r0, r6
 8007f98:	4639      	mov	r1, r7
 8007f9a:	f7f8 f99b 	bl	80002d4 <__adddf3>
 8007f9e:	4606      	mov	r6, r0
 8007fa0:	460f      	mov	r7, r1
 8007fa2:	f7f8 fdfd 	bl	8000ba0 <__aeabi_d2iz>
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	4682      	mov	sl, r0
 8007faa:	2300      	movs	r3, #0
 8007fac:	4630      	mov	r0, r6
 8007fae:	4639      	mov	r1, r7
 8007fb0:	f7f8 fdb8 	bl	8000b24 <__aeabi_dcmplt>
 8007fb4:	b148      	cbz	r0, 8007fca <_dtoa_r+0x17a>
 8007fb6:	4650      	mov	r0, sl
 8007fb8:	f7f8 fad8 	bl	800056c <__aeabi_i2d>
 8007fbc:	4632      	mov	r2, r6
 8007fbe:	463b      	mov	r3, r7
 8007fc0:	f7f8 fda6 	bl	8000b10 <__aeabi_dcmpeq>
 8007fc4:	b908      	cbnz	r0, 8007fca <_dtoa_r+0x17a>
 8007fc6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007fca:	f1ba 0f16 	cmp.w	sl, #22
 8007fce:	d858      	bhi.n	8008082 <_dtoa_r+0x232>
 8007fd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007fd4:	4b57      	ldr	r3, [pc, #348]	; (8008134 <_dtoa_r+0x2e4>)
 8007fd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fde:	f7f8 fda1 	bl	8000b24 <__aeabi_dcmplt>
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	d04f      	beq.n	8008086 <_dtoa_r+0x236>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007fec:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007ff0:	1b1c      	subs	r4, r3, r4
 8007ff2:	1e63      	subs	r3, r4, #1
 8007ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ff6:	bf49      	itett	mi
 8007ff8:	f1c4 0301 	rsbmi	r3, r4, #1
 8007ffc:	2300      	movpl	r3, #0
 8007ffe:	9306      	strmi	r3, [sp, #24]
 8008000:	2300      	movmi	r3, #0
 8008002:	bf54      	ite	pl
 8008004:	9306      	strpl	r3, [sp, #24]
 8008006:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008008:	f1ba 0f00 	cmp.w	sl, #0
 800800c:	db3d      	blt.n	800808a <_dtoa_r+0x23a>
 800800e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008010:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008014:	4453      	add	r3, sl
 8008016:	9309      	str	r3, [sp, #36]	; 0x24
 8008018:	2300      	movs	r3, #0
 800801a:	930a      	str	r3, [sp, #40]	; 0x28
 800801c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800801e:	2b09      	cmp	r3, #9
 8008020:	f200 808c 	bhi.w	800813c <_dtoa_r+0x2ec>
 8008024:	2b05      	cmp	r3, #5
 8008026:	bfc4      	itt	gt
 8008028:	3b04      	subgt	r3, #4
 800802a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800802c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800802e:	bfc8      	it	gt
 8008030:	2400      	movgt	r4, #0
 8008032:	f1a3 0302 	sub.w	r3, r3, #2
 8008036:	bfd8      	it	le
 8008038:	2401      	movle	r4, #1
 800803a:	2b03      	cmp	r3, #3
 800803c:	f200 808a 	bhi.w	8008154 <_dtoa_r+0x304>
 8008040:	e8df f003 	tbb	[pc, r3]
 8008044:	5b4d4f2d 	.word	0x5b4d4f2d
 8008048:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800804c:	441c      	add	r4, r3
 800804e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008052:	2b20      	cmp	r3, #32
 8008054:	bfc3      	ittte	gt
 8008056:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800805a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800805e:	fa09 f303 	lslgt.w	r3, r9, r3
 8008062:	f1c3 0320 	rsble	r3, r3, #32
 8008066:	bfc6      	itte	gt
 8008068:	fa26 f000 	lsrgt.w	r0, r6, r0
 800806c:	4318      	orrgt	r0, r3
 800806e:	fa06 f003 	lslle.w	r0, r6, r3
 8008072:	f7f8 fa6b 	bl	800054c <__aeabi_ui2d>
 8008076:	2301      	movs	r3, #1
 8008078:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800807c:	3c01      	subs	r4, #1
 800807e:	9313      	str	r3, [sp, #76]	; 0x4c
 8008080:	e76f      	b.n	8007f62 <_dtoa_r+0x112>
 8008082:	2301      	movs	r3, #1
 8008084:	e7b2      	b.n	8007fec <_dtoa_r+0x19c>
 8008086:	900f      	str	r0, [sp, #60]	; 0x3c
 8008088:	e7b1      	b.n	8007fee <_dtoa_r+0x19e>
 800808a:	9b06      	ldr	r3, [sp, #24]
 800808c:	eba3 030a 	sub.w	r3, r3, sl
 8008090:	9306      	str	r3, [sp, #24]
 8008092:	f1ca 0300 	rsb	r3, sl, #0
 8008096:	930a      	str	r3, [sp, #40]	; 0x28
 8008098:	2300      	movs	r3, #0
 800809a:	930e      	str	r3, [sp, #56]	; 0x38
 800809c:	e7be      	b.n	800801c <_dtoa_r+0x1cc>
 800809e:	2300      	movs	r3, #0
 80080a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80080a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	dc58      	bgt.n	800815a <_dtoa_r+0x30a>
 80080a8:	f04f 0901 	mov.w	r9, #1
 80080ac:	464b      	mov	r3, r9
 80080ae:	f8cd 9020 	str.w	r9, [sp, #32]
 80080b2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80080b6:	2200      	movs	r2, #0
 80080b8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80080ba:	6042      	str	r2, [r0, #4]
 80080bc:	2204      	movs	r2, #4
 80080be:	f102 0614 	add.w	r6, r2, #20
 80080c2:	429e      	cmp	r6, r3
 80080c4:	6841      	ldr	r1, [r0, #4]
 80080c6:	d94e      	bls.n	8008166 <_dtoa_r+0x316>
 80080c8:	4628      	mov	r0, r5
 80080ca:	f000 fe0b 	bl	8008ce4 <_Balloc>
 80080ce:	9003      	str	r0, [sp, #12]
 80080d0:	2800      	cmp	r0, #0
 80080d2:	d14c      	bne.n	800816e <_dtoa_r+0x31e>
 80080d4:	4602      	mov	r2, r0
 80080d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80080da:	4b17      	ldr	r3, [pc, #92]	; (8008138 <_dtoa_r+0x2e8>)
 80080dc:	e6cc      	b.n	8007e78 <_dtoa_r+0x28>
 80080de:	2301      	movs	r3, #1
 80080e0:	e7de      	b.n	80080a0 <_dtoa_r+0x250>
 80080e2:	2300      	movs	r3, #0
 80080e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80080e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080e8:	eb0a 0903 	add.w	r9, sl, r3
 80080ec:	f109 0301 	add.w	r3, r9, #1
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	9308      	str	r3, [sp, #32]
 80080f4:	bfb8      	it	lt
 80080f6:	2301      	movlt	r3, #1
 80080f8:	e7dd      	b.n	80080b6 <_dtoa_r+0x266>
 80080fa:	2301      	movs	r3, #1
 80080fc:	e7f2      	b.n	80080e4 <_dtoa_r+0x294>
 80080fe:	bf00      	nop
 8008100:	636f4361 	.word	0x636f4361
 8008104:	3fd287a7 	.word	0x3fd287a7
 8008108:	8b60c8b3 	.word	0x8b60c8b3
 800810c:	3fc68a28 	.word	0x3fc68a28
 8008110:	509f79fb 	.word	0x509f79fb
 8008114:	3fd34413 	.word	0x3fd34413
 8008118:	08009e5d 	.word	0x08009e5d
 800811c:	08009e74 	.word	0x08009e74
 8008120:	7ff00000 	.word	0x7ff00000
 8008124:	08009e59 	.word	0x08009e59
 8008128:	08009e50 	.word	0x08009e50
 800812c:	08009e2d 	.word	0x08009e2d
 8008130:	3ff80000 	.word	0x3ff80000
 8008134:	08009f68 	.word	0x08009f68
 8008138:	08009ecf 	.word	0x08009ecf
 800813c:	2401      	movs	r4, #1
 800813e:	2300      	movs	r3, #0
 8008140:	940b      	str	r4, [sp, #44]	; 0x2c
 8008142:	9322      	str	r3, [sp, #136]	; 0x88
 8008144:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008148:	2200      	movs	r2, #0
 800814a:	2312      	movs	r3, #18
 800814c:	f8cd 9020 	str.w	r9, [sp, #32]
 8008150:	9223      	str	r2, [sp, #140]	; 0x8c
 8008152:	e7b0      	b.n	80080b6 <_dtoa_r+0x266>
 8008154:	2301      	movs	r3, #1
 8008156:	930b      	str	r3, [sp, #44]	; 0x2c
 8008158:	e7f4      	b.n	8008144 <_dtoa_r+0x2f4>
 800815a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800815e:	464b      	mov	r3, r9
 8008160:	f8cd 9020 	str.w	r9, [sp, #32]
 8008164:	e7a7      	b.n	80080b6 <_dtoa_r+0x266>
 8008166:	3101      	adds	r1, #1
 8008168:	6041      	str	r1, [r0, #4]
 800816a:	0052      	lsls	r2, r2, #1
 800816c:	e7a7      	b.n	80080be <_dtoa_r+0x26e>
 800816e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008170:	9a03      	ldr	r2, [sp, #12]
 8008172:	601a      	str	r2, [r3, #0]
 8008174:	9b08      	ldr	r3, [sp, #32]
 8008176:	2b0e      	cmp	r3, #14
 8008178:	f200 80a8 	bhi.w	80082cc <_dtoa_r+0x47c>
 800817c:	2c00      	cmp	r4, #0
 800817e:	f000 80a5 	beq.w	80082cc <_dtoa_r+0x47c>
 8008182:	f1ba 0f00 	cmp.w	sl, #0
 8008186:	dd34      	ble.n	80081f2 <_dtoa_r+0x3a2>
 8008188:	4a9a      	ldr	r2, [pc, #616]	; (80083f4 <_dtoa_r+0x5a4>)
 800818a:	f00a 030f 	and.w	r3, sl, #15
 800818e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008192:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008196:	e9d3 3400 	ldrd	r3, r4, [r3]
 800819a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800819e:	ea4f 142a 	mov.w	r4, sl, asr #4
 80081a2:	d016      	beq.n	80081d2 <_dtoa_r+0x382>
 80081a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80081a8:	4b93      	ldr	r3, [pc, #588]	; (80083f8 <_dtoa_r+0x5a8>)
 80081aa:	2703      	movs	r7, #3
 80081ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081b0:	f7f8 fb70 	bl	8000894 <__aeabi_ddiv>
 80081b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081b8:	f004 040f 	and.w	r4, r4, #15
 80081bc:	4e8e      	ldr	r6, [pc, #568]	; (80083f8 <_dtoa_r+0x5a8>)
 80081be:	b954      	cbnz	r4, 80081d6 <_dtoa_r+0x386>
 80081c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081c8:	f7f8 fb64 	bl	8000894 <__aeabi_ddiv>
 80081cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081d0:	e029      	b.n	8008226 <_dtoa_r+0x3d6>
 80081d2:	2702      	movs	r7, #2
 80081d4:	e7f2      	b.n	80081bc <_dtoa_r+0x36c>
 80081d6:	07e1      	lsls	r1, r4, #31
 80081d8:	d508      	bpl.n	80081ec <_dtoa_r+0x39c>
 80081da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081de:	e9d6 2300 	ldrd	r2, r3, [r6]
 80081e2:	f7f8 fa2d 	bl	8000640 <__aeabi_dmul>
 80081e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80081ea:	3701      	adds	r7, #1
 80081ec:	1064      	asrs	r4, r4, #1
 80081ee:	3608      	adds	r6, #8
 80081f0:	e7e5      	b.n	80081be <_dtoa_r+0x36e>
 80081f2:	f000 80a5 	beq.w	8008340 <_dtoa_r+0x4f0>
 80081f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80081fa:	f1ca 0400 	rsb	r4, sl, #0
 80081fe:	4b7d      	ldr	r3, [pc, #500]	; (80083f4 <_dtoa_r+0x5a4>)
 8008200:	f004 020f 	and.w	r2, r4, #15
 8008204:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820c:	f7f8 fa18 	bl	8000640 <__aeabi_dmul>
 8008210:	2702      	movs	r7, #2
 8008212:	2300      	movs	r3, #0
 8008214:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008218:	4e77      	ldr	r6, [pc, #476]	; (80083f8 <_dtoa_r+0x5a8>)
 800821a:	1124      	asrs	r4, r4, #4
 800821c:	2c00      	cmp	r4, #0
 800821e:	f040 8084 	bne.w	800832a <_dtoa_r+0x4da>
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1d2      	bne.n	80081cc <_dtoa_r+0x37c>
 8008226:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008228:	2b00      	cmp	r3, #0
 800822a:	f000 808b 	beq.w	8008344 <_dtoa_r+0x4f4>
 800822e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008232:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008236:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800823a:	2200      	movs	r2, #0
 800823c:	4b6f      	ldr	r3, [pc, #444]	; (80083fc <_dtoa_r+0x5ac>)
 800823e:	f7f8 fc71 	bl	8000b24 <__aeabi_dcmplt>
 8008242:	2800      	cmp	r0, #0
 8008244:	d07e      	beq.n	8008344 <_dtoa_r+0x4f4>
 8008246:	9b08      	ldr	r3, [sp, #32]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d07b      	beq.n	8008344 <_dtoa_r+0x4f4>
 800824c:	f1b9 0f00 	cmp.w	r9, #0
 8008250:	dd38      	ble.n	80082c4 <_dtoa_r+0x474>
 8008252:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008256:	2200      	movs	r2, #0
 8008258:	4b69      	ldr	r3, [pc, #420]	; (8008400 <_dtoa_r+0x5b0>)
 800825a:	f7f8 f9f1 	bl	8000640 <__aeabi_dmul>
 800825e:	464c      	mov	r4, r9
 8008260:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008264:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8008268:	3701      	adds	r7, #1
 800826a:	4638      	mov	r0, r7
 800826c:	f7f8 f97e 	bl	800056c <__aeabi_i2d>
 8008270:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008274:	f7f8 f9e4 	bl	8000640 <__aeabi_dmul>
 8008278:	2200      	movs	r2, #0
 800827a:	4b62      	ldr	r3, [pc, #392]	; (8008404 <_dtoa_r+0x5b4>)
 800827c:	f7f8 f82a 	bl	80002d4 <__adddf3>
 8008280:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008284:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008288:	9611      	str	r6, [sp, #68]	; 0x44
 800828a:	2c00      	cmp	r4, #0
 800828c:	d15d      	bne.n	800834a <_dtoa_r+0x4fa>
 800828e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008292:	2200      	movs	r2, #0
 8008294:	4b5c      	ldr	r3, [pc, #368]	; (8008408 <_dtoa_r+0x5b8>)
 8008296:	f7f8 f81b 	bl	80002d0 <__aeabi_dsub>
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80082a2:	4633      	mov	r3, r6
 80082a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082a6:	f7f8 fc5b 	bl	8000b60 <__aeabi_dcmpgt>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	f040 829c 	bne.w	80087e8 <_dtoa_r+0x998>
 80082b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082b6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80082ba:	f7f8 fc33 	bl	8000b24 <__aeabi_dcmplt>
 80082be:	2800      	cmp	r0, #0
 80082c0:	f040 8290 	bne.w	80087e4 <_dtoa_r+0x994>
 80082c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80082c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80082cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f2c0 8152 	blt.w	8008578 <_dtoa_r+0x728>
 80082d4:	f1ba 0f0e 	cmp.w	sl, #14
 80082d8:	f300 814e 	bgt.w	8008578 <_dtoa_r+0x728>
 80082dc:	4b45      	ldr	r3, [pc, #276]	; (80083f4 <_dtoa_r+0x5a4>)
 80082de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80082e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80082e6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80082ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f280 80db 	bge.w	80084a8 <_dtoa_r+0x658>
 80082f2:	9b08      	ldr	r3, [sp, #32]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f300 80d7 	bgt.w	80084a8 <_dtoa_r+0x658>
 80082fa:	f040 8272 	bne.w	80087e2 <_dtoa_r+0x992>
 80082fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008302:	2200      	movs	r2, #0
 8008304:	4b40      	ldr	r3, [pc, #256]	; (8008408 <_dtoa_r+0x5b8>)
 8008306:	f7f8 f99b 	bl	8000640 <__aeabi_dmul>
 800830a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800830e:	f7f8 fc1d 	bl	8000b4c <__aeabi_dcmpge>
 8008312:	9c08      	ldr	r4, [sp, #32]
 8008314:	4626      	mov	r6, r4
 8008316:	2800      	cmp	r0, #0
 8008318:	f040 8248 	bne.w	80087ac <_dtoa_r+0x95c>
 800831c:	2331      	movs	r3, #49	; 0x31
 800831e:	9f03      	ldr	r7, [sp, #12]
 8008320:	f10a 0a01 	add.w	sl, sl, #1
 8008324:	f807 3b01 	strb.w	r3, [r7], #1
 8008328:	e244      	b.n	80087b4 <_dtoa_r+0x964>
 800832a:	07e2      	lsls	r2, r4, #31
 800832c:	d505      	bpl.n	800833a <_dtoa_r+0x4ea>
 800832e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008332:	f7f8 f985 	bl	8000640 <__aeabi_dmul>
 8008336:	2301      	movs	r3, #1
 8008338:	3701      	adds	r7, #1
 800833a:	1064      	asrs	r4, r4, #1
 800833c:	3608      	adds	r6, #8
 800833e:	e76d      	b.n	800821c <_dtoa_r+0x3cc>
 8008340:	2702      	movs	r7, #2
 8008342:	e770      	b.n	8008226 <_dtoa_r+0x3d6>
 8008344:	46d0      	mov	r8, sl
 8008346:	9c08      	ldr	r4, [sp, #32]
 8008348:	e78f      	b.n	800826a <_dtoa_r+0x41a>
 800834a:	9903      	ldr	r1, [sp, #12]
 800834c:	4b29      	ldr	r3, [pc, #164]	; (80083f4 <_dtoa_r+0x5a4>)
 800834e:	4421      	add	r1, r4
 8008350:	9112      	str	r1, [sp, #72]	; 0x48
 8008352:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008354:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008358:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800835c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008360:	2900      	cmp	r1, #0
 8008362:	d055      	beq.n	8008410 <_dtoa_r+0x5c0>
 8008364:	2000      	movs	r0, #0
 8008366:	4929      	ldr	r1, [pc, #164]	; (800840c <_dtoa_r+0x5bc>)
 8008368:	f7f8 fa94 	bl	8000894 <__aeabi_ddiv>
 800836c:	463b      	mov	r3, r7
 800836e:	4632      	mov	r2, r6
 8008370:	f7f7 ffae 	bl	80002d0 <__aeabi_dsub>
 8008374:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008378:	9f03      	ldr	r7, [sp, #12]
 800837a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800837e:	f7f8 fc0f 	bl	8000ba0 <__aeabi_d2iz>
 8008382:	4604      	mov	r4, r0
 8008384:	f7f8 f8f2 	bl	800056c <__aeabi_i2d>
 8008388:	4602      	mov	r2, r0
 800838a:	460b      	mov	r3, r1
 800838c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008390:	f7f7 ff9e 	bl	80002d0 <__aeabi_dsub>
 8008394:	4602      	mov	r2, r0
 8008396:	460b      	mov	r3, r1
 8008398:	3430      	adds	r4, #48	; 0x30
 800839a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800839e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083a2:	f807 4b01 	strb.w	r4, [r7], #1
 80083a6:	f7f8 fbbd 	bl	8000b24 <__aeabi_dcmplt>
 80083aa:	2800      	cmp	r0, #0
 80083ac:	d174      	bne.n	8008498 <_dtoa_r+0x648>
 80083ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083b2:	2000      	movs	r0, #0
 80083b4:	4911      	ldr	r1, [pc, #68]	; (80083fc <_dtoa_r+0x5ac>)
 80083b6:	f7f7 ff8b 	bl	80002d0 <__aeabi_dsub>
 80083ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083be:	f7f8 fbb1 	bl	8000b24 <__aeabi_dcmplt>
 80083c2:	2800      	cmp	r0, #0
 80083c4:	f040 80b7 	bne.w	8008536 <_dtoa_r+0x6e6>
 80083c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083ca:	429f      	cmp	r7, r3
 80083cc:	f43f af7a 	beq.w	80082c4 <_dtoa_r+0x474>
 80083d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083d4:	2200      	movs	r2, #0
 80083d6:	4b0a      	ldr	r3, [pc, #40]	; (8008400 <_dtoa_r+0x5b0>)
 80083d8:	f7f8 f932 	bl	8000640 <__aeabi_dmul>
 80083dc:	2200      	movs	r2, #0
 80083de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80083e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083e6:	4b06      	ldr	r3, [pc, #24]	; (8008400 <_dtoa_r+0x5b0>)
 80083e8:	f7f8 f92a 	bl	8000640 <__aeabi_dmul>
 80083ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083f0:	e7c3      	b.n	800837a <_dtoa_r+0x52a>
 80083f2:	bf00      	nop
 80083f4:	08009f68 	.word	0x08009f68
 80083f8:	08009f40 	.word	0x08009f40
 80083fc:	3ff00000 	.word	0x3ff00000
 8008400:	40240000 	.word	0x40240000
 8008404:	401c0000 	.word	0x401c0000
 8008408:	40140000 	.word	0x40140000
 800840c:	3fe00000 	.word	0x3fe00000
 8008410:	4630      	mov	r0, r6
 8008412:	4639      	mov	r1, r7
 8008414:	f7f8 f914 	bl	8000640 <__aeabi_dmul>
 8008418:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800841a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800841e:	9c03      	ldr	r4, [sp, #12]
 8008420:	9314      	str	r3, [sp, #80]	; 0x50
 8008422:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008426:	f7f8 fbbb 	bl	8000ba0 <__aeabi_d2iz>
 800842a:	9015      	str	r0, [sp, #84]	; 0x54
 800842c:	f7f8 f89e 	bl	800056c <__aeabi_i2d>
 8008430:	4602      	mov	r2, r0
 8008432:	460b      	mov	r3, r1
 8008434:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008438:	f7f7 ff4a 	bl	80002d0 <__aeabi_dsub>
 800843c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800843e:	4606      	mov	r6, r0
 8008440:	3330      	adds	r3, #48	; 0x30
 8008442:	f804 3b01 	strb.w	r3, [r4], #1
 8008446:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008448:	460f      	mov	r7, r1
 800844a:	429c      	cmp	r4, r3
 800844c:	f04f 0200 	mov.w	r2, #0
 8008450:	d124      	bne.n	800849c <_dtoa_r+0x64c>
 8008452:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008456:	4bb0      	ldr	r3, [pc, #704]	; (8008718 <_dtoa_r+0x8c8>)
 8008458:	f7f7 ff3c 	bl	80002d4 <__adddf3>
 800845c:	4602      	mov	r2, r0
 800845e:	460b      	mov	r3, r1
 8008460:	4630      	mov	r0, r6
 8008462:	4639      	mov	r1, r7
 8008464:	f7f8 fb7c 	bl	8000b60 <__aeabi_dcmpgt>
 8008468:	2800      	cmp	r0, #0
 800846a:	d163      	bne.n	8008534 <_dtoa_r+0x6e4>
 800846c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008470:	2000      	movs	r0, #0
 8008472:	49a9      	ldr	r1, [pc, #676]	; (8008718 <_dtoa_r+0x8c8>)
 8008474:	f7f7 ff2c 	bl	80002d0 <__aeabi_dsub>
 8008478:	4602      	mov	r2, r0
 800847a:	460b      	mov	r3, r1
 800847c:	4630      	mov	r0, r6
 800847e:	4639      	mov	r1, r7
 8008480:	f7f8 fb50 	bl	8000b24 <__aeabi_dcmplt>
 8008484:	2800      	cmp	r0, #0
 8008486:	f43f af1d 	beq.w	80082c4 <_dtoa_r+0x474>
 800848a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800848c:	1e7b      	subs	r3, r7, #1
 800848e:	9314      	str	r3, [sp, #80]	; 0x50
 8008490:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008494:	2b30      	cmp	r3, #48	; 0x30
 8008496:	d0f8      	beq.n	800848a <_dtoa_r+0x63a>
 8008498:	46c2      	mov	sl, r8
 800849a:	e03b      	b.n	8008514 <_dtoa_r+0x6c4>
 800849c:	4b9f      	ldr	r3, [pc, #636]	; (800871c <_dtoa_r+0x8cc>)
 800849e:	f7f8 f8cf 	bl	8000640 <__aeabi_dmul>
 80084a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084a6:	e7bc      	b.n	8008422 <_dtoa_r+0x5d2>
 80084a8:	9f03      	ldr	r7, [sp, #12]
 80084aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80084ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084b2:	4640      	mov	r0, r8
 80084b4:	4649      	mov	r1, r9
 80084b6:	f7f8 f9ed 	bl	8000894 <__aeabi_ddiv>
 80084ba:	f7f8 fb71 	bl	8000ba0 <__aeabi_d2iz>
 80084be:	4604      	mov	r4, r0
 80084c0:	f7f8 f854 	bl	800056c <__aeabi_i2d>
 80084c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084c8:	f7f8 f8ba 	bl	8000640 <__aeabi_dmul>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	4640      	mov	r0, r8
 80084d2:	4649      	mov	r1, r9
 80084d4:	f7f7 fefc 	bl	80002d0 <__aeabi_dsub>
 80084d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80084dc:	f807 6b01 	strb.w	r6, [r7], #1
 80084e0:	9e03      	ldr	r6, [sp, #12]
 80084e2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80084e6:	1bbe      	subs	r6, r7, r6
 80084e8:	45b4      	cmp	ip, r6
 80084ea:	4602      	mov	r2, r0
 80084ec:	460b      	mov	r3, r1
 80084ee:	d136      	bne.n	800855e <_dtoa_r+0x70e>
 80084f0:	f7f7 fef0 	bl	80002d4 <__adddf3>
 80084f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084f8:	4680      	mov	r8, r0
 80084fa:	4689      	mov	r9, r1
 80084fc:	f7f8 fb30 	bl	8000b60 <__aeabi_dcmpgt>
 8008500:	bb58      	cbnz	r0, 800855a <_dtoa_r+0x70a>
 8008502:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008506:	4640      	mov	r0, r8
 8008508:	4649      	mov	r1, r9
 800850a:	f7f8 fb01 	bl	8000b10 <__aeabi_dcmpeq>
 800850e:	b108      	cbz	r0, 8008514 <_dtoa_r+0x6c4>
 8008510:	07e1      	lsls	r1, r4, #31
 8008512:	d422      	bmi.n	800855a <_dtoa_r+0x70a>
 8008514:	4628      	mov	r0, r5
 8008516:	4659      	mov	r1, fp
 8008518:	f000 fc24 	bl	8008d64 <_Bfree>
 800851c:	2300      	movs	r3, #0
 800851e:	703b      	strb	r3, [r7, #0]
 8008520:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008522:	f10a 0001 	add.w	r0, sl, #1
 8008526:	6018      	str	r0, [r3, #0]
 8008528:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800852a:	2b00      	cmp	r3, #0
 800852c:	f43f acde 	beq.w	8007eec <_dtoa_r+0x9c>
 8008530:	601f      	str	r7, [r3, #0]
 8008532:	e4db      	b.n	8007eec <_dtoa_r+0x9c>
 8008534:	4627      	mov	r7, r4
 8008536:	463b      	mov	r3, r7
 8008538:	461f      	mov	r7, r3
 800853a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800853e:	2a39      	cmp	r2, #57	; 0x39
 8008540:	d107      	bne.n	8008552 <_dtoa_r+0x702>
 8008542:	9a03      	ldr	r2, [sp, #12]
 8008544:	429a      	cmp	r2, r3
 8008546:	d1f7      	bne.n	8008538 <_dtoa_r+0x6e8>
 8008548:	2230      	movs	r2, #48	; 0x30
 800854a:	9903      	ldr	r1, [sp, #12]
 800854c:	f108 0801 	add.w	r8, r8, #1
 8008550:	700a      	strb	r2, [r1, #0]
 8008552:	781a      	ldrb	r2, [r3, #0]
 8008554:	3201      	adds	r2, #1
 8008556:	701a      	strb	r2, [r3, #0]
 8008558:	e79e      	b.n	8008498 <_dtoa_r+0x648>
 800855a:	46d0      	mov	r8, sl
 800855c:	e7eb      	b.n	8008536 <_dtoa_r+0x6e6>
 800855e:	2200      	movs	r2, #0
 8008560:	4b6e      	ldr	r3, [pc, #440]	; (800871c <_dtoa_r+0x8cc>)
 8008562:	f7f8 f86d 	bl	8000640 <__aeabi_dmul>
 8008566:	2200      	movs	r2, #0
 8008568:	2300      	movs	r3, #0
 800856a:	4680      	mov	r8, r0
 800856c:	4689      	mov	r9, r1
 800856e:	f7f8 facf 	bl	8000b10 <__aeabi_dcmpeq>
 8008572:	2800      	cmp	r0, #0
 8008574:	d09b      	beq.n	80084ae <_dtoa_r+0x65e>
 8008576:	e7cd      	b.n	8008514 <_dtoa_r+0x6c4>
 8008578:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800857a:	2a00      	cmp	r2, #0
 800857c:	f000 80d0 	beq.w	8008720 <_dtoa_r+0x8d0>
 8008580:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008582:	2a01      	cmp	r2, #1
 8008584:	f300 80ae 	bgt.w	80086e4 <_dtoa_r+0x894>
 8008588:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800858a:	2a00      	cmp	r2, #0
 800858c:	f000 80a6 	beq.w	80086dc <_dtoa_r+0x88c>
 8008590:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008594:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008596:	9f06      	ldr	r7, [sp, #24]
 8008598:	9a06      	ldr	r2, [sp, #24]
 800859a:	2101      	movs	r1, #1
 800859c:	441a      	add	r2, r3
 800859e:	9206      	str	r2, [sp, #24]
 80085a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085a2:	4628      	mov	r0, r5
 80085a4:	441a      	add	r2, r3
 80085a6:	9209      	str	r2, [sp, #36]	; 0x24
 80085a8:	f000 fc92 	bl	8008ed0 <__i2b>
 80085ac:	4606      	mov	r6, r0
 80085ae:	2f00      	cmp	r7, #0
 80085b0:	dd0c      	ble.n	80085cc <_dtoa_r+0x77c>
 80085b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	dd09      	ble.n	80085cc <_dtoa_r+0x77c>
 80085b8:	42bb      	cmp	r3, r7
 80085ba:	bfa8      	it	ge
 80085bc:	463b      	movge	r3, r7
 80085be:	9a06      	ldr	r2, [sp, #24]
 80085c0:	1aff      	subs	r7, r7, r3
 80085c2:	1ad2      	subs	r2, r2, r3
 80085c4:	9206      	str	r2, [sp, #24]
 80085c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	9309      	str	r3, [sp, #36]	; 0x24
 80085cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ce:	b1f3      	cbz	r3, 800860e <_dtoa_r+0x7be>
 80085d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f000 80a8 	beq.w	8008728 <_dtoa_r+0x8d8>
 80085d8:	2c00      	cmp	r4, #0
 80085da:	dd10      	ble.n	80085fe <_dtoa_r+0x7ae>
 80085dc:	4631      	mov	r1, r6
 80085de:	4622      	mov	r2, r4
 80085e0:	4628      	mov	r0, r5
 80085e2:	f000 fd33 	bl	800904c <__pow5mult>
 80085e6:	465a      	mov	r2, fp
 80085e8:	4601      	mov	r1, r0
 80085ea:	4606      	mov	r6, r0
 80085ec:	4628      	mov	r0, r5
 80085ee:	f000 fc85 	bl	8008efc <__multiply>
 80085f2:	4680      	mov	r8, r0
 80085f4:	4659      	mov	r1, fp
 80085f6:	4628      	mov	r0, r5
 80085f8:	f000 fbb4 	bl	8008d64 <_Bfree>
 80085fc:	46c3      	mov	fp, r8
 80085fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008600:	1b1a      	subs	r2, r3, r4
 8008602:	d004      	beq.n	800860e <_dtoa_r+0x7be>
 8008604:	4659      	mov	r1, fp
 8008606:	4628      	mov	r0, r5
 8008608:	f000 fd20 	bl	800904c <__pow5mult>
 800860c:	4683      	mov	fp, r0
 800860e:	2101      	movs	r1, #1
 8008610:	4628      	mov	r0, r5
 8008612:	f000 fc5d 	bl	8008ed0 <__i2b>
 8008616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008618:	4604      	mov	r4, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	f340 8086 	ble.w	800872c <_dtoa_r+0x8dc>
 8008620:	461a      	mov	r2, r3
 8008622:	4601      	mov	r1, r0
 8008624:	4628      	mov	r0, r5
 8008626:	f000 fd11 	bl	800904c <__pow5mult>
 800862a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800862c:	4604      	mov	r4, r0
 800862e:	2b01      	cmp	r3, #1
 8008630:	dd7f      	ble.n	8008732 <_dtoa_r+0x8e2>
 8008632:	f04f 0800 	mov.w	r8, #0
 8008636:	6923      	ldr	r3, [r4, #16]
 8008638:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800863c:	6918      	ldr	r0, [r3, #16]
 800863e:	f000 fbf9 	bl	8008e34 <__hi0bits>
 8008642:	f1c0 0020 	rsb	r0, r0, #32
 8008646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008648:	4418      	add	r0, r3
 800864a:	f010 001f 	ands.w	r0, r0, #31
 800864e:	f000 8092 	beq.w	8008776 <_dtoa_r+0x926>
 8008652:	f1c0 0320 	rsb	r3, r0, #32
 8008656:	2b04      	cmp	r3, #4
 8008658:	f340 808a 	ble.w	8008770 <_dtoa_r+0x920>
 800865c:	f1c0 001c 	rsb	r0, r0, #28
 8008660:	9b06      	ldr	r3, [sp, #24]
 8008662:	4407      	add	r7, r0
 8008664:	4403      	add	r3, r0
 8008666:	9306      	str	r3, [sp, #24]
 8008668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800866a:	4403      	add	r3, r0
 800866c:	9309      	str	r3, [sp, #36]	; 0x24
 800866e:	9b06      	ldr	r3, [sp, #24]
 8008670:	2b00      	cmp	r3, #0
 8008672:	dd05      	ble.n	8008680 <_dtoa_r+0x830>
 8008674:	4659      	mov	r1, fp
 8008676:	461a      	mov	r2, r3
 8008678:	4628      	mov	r0, r5
 800867a:	f000 fd41 	bl	8009100 <__lshift>
 800867e:	4683      	mov	fp, r0
 8008680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008682:	2b00      	cmp	r3, #0
 8008684:	dd05      	ble.n	8008692 <_dtoa_r+0x842>
 8008686:	4621      	mov	r1, r4
 8008688:	461a      	mov	r2, r3
 800868a:	4628      	mov	r0, r5
 800868c:	f000 fd38 	bl	8009100 <__lshift>
 8008690:	4604      	mov	r4, r0
 8008692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008694:	2b00      	cmp	r3, #0
 8008696:	d070      	beq.n	800877a <_dtoa_r+0x92a>
 8008698:	4621      	mov	r1, r4
 800869a:	4658      	mov	r0, fp
 800869c:	f000 fda0 	bl	80091e0 <__mcmp>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	da6a      	bge.n	800877a <_dtoa_r+0x92a>
 80086a4:	2300      	movs	r3, #0
 80086a6:	4659      	mov	r1, fp
 80086a8:	220a      	movs	r2, #10
 80086aa:	4628      	mov	r0, r5
 80086ac:	f000 fb7c 	bl	8008da8 <__multadd>
 80086b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086b2:	4683      	mov	fp, r0
 80086b4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f000 8194 	beq.w	80089e6 <_dtoa_r+0xb96>
 80086be:	4631      	mov	r1, r6
 80086c0:	2300      	movs	r3, #0
 80086c2:	220a      	movs	r2, #10
 80086c4:	4628      	mov	r0, r5
 80086c6:	f000 fb6f 	bl	8008da8 <__multadd>
 80086ca:	f1b9 0f00 	cmp.w	r9, #0
 80086ce:	4606      	mov	r6, r0
 80086d0:	f300 8093 	bgt.w	80087fa <_dtoa_r+0x9aa>
 80086d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	dc57      	bgt.n	800878a <_dtoa_r+0x93a>
 80086da:	e08e      	b.n	80087fa <_dtoa_r+0x9aa>
 80086dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80086de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80086e2:	e757      	b.n	8008594 <_dtoa_r+0x744>
 80086e4:	9b08      	ldr	r3, [sp, #32]
 80086e6:	1e5c      	subs	r4, r3, #1
 80086e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ea:	42a3      	cmp	r3, r4
 80086ec:	bfb7      	itett	lt
 80086ee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80086f0:	1b1c      	subge	r4, r3, r4
 80086f2:	1ae2      	sublt	r2, r4, r3
 80086f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80086f6:	bfbe      	ittt	lt
 80086f8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80086fa:	189b      	addlt	r3, r3, r2
 80086fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80086fe:	9b08      	ldr	r3, [sp, #32]
 8008700:	bfb8      	it	lt
 8008702:	2400      	movlt	r4, #0
 8008704:	2b00      	cmp	r3, #0
 8008706:	bfbb      	ittet	lt
 8008708:	9b06      	ldrlt	r3, [sp, #24]
 800870a:	9a08      	ldrlt	r2, [sp, #32]
 800870c:	9f06      	ldrge	r7, [sp, #24]
 800870e:	1a9f      	sublt	r7, r3, r2
 8008710:	bfac      	ite	ge
 8008712:	9b08      	ldrge	r3, [sp, #32]
 8008714:	2300      	movlt	r3, #0
 8008716:	e73f      	b.n	8008598 <_dtoa_r+0x748>
 8008718:	3fe00000 	.word	0x3fe00000
 800871c:	40240000 	.word	0x40240000
 8008720:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008722:	9f06      	ldr	r7, [sp, #24]
 8008724:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008726:	e742      	b.n	80085ae <_dtoa_r+0x75e>
 8008728:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800872a:	e76b      	b.n	8008604 <_dtoa_r+0x7b4>
 800872c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800872e:	2b01      	cmp	r3, #1
 8008730:	dc19      	bgt.n	8008766 <_dtoa_r+0x916>
 8008732:	9b04      	ldr	r3, [sp, #16]
 8008734:	b9bb      	cbnz	r3, 8008766 <_dtoa_r+0x916>
 8008736:	9b05      	ldr	r3, [sp, #20]
 8008738:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800873c:	b99b      	cbnz	r3, 8008766 <_dtoa_r+0x916>
 800873e:	9b05      	ldr	r3, [sp, #20]
 8008740:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008744:	0d1b      	lsrs	r3, r3, #20
 8008746:	051b      	lsls	r3, r3, #20
 8008748:	b183      	cbz	r3, 800876c <_dtoa_r+0x91c>
 800874a:	f04f 0801 	mov.w	r8, #1
 800874e:	9b06      	ldr	r3, [sp, #24]
 8008750:	3301      	adds	r3, #1
 8008752:	9306      	str	r3, [sp, #24]
 8008754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008756:	3301      	adds	r3, #1
 8008758:	9309      	str	r3, [sp, #36]	; 0x24
 800875a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800875c:	2b00      	cmp	r3, #0
 800875e:	f47f af6a 	bne.w	8008636 <_dtoa_r+0x7e6>
 8008762:	2001      	movs	r0, #1
 8008764:	e76f      	b.n	8008646 <_dtoa_r+0x7f6>
 8008766:	f04f 0800 	mov.w	r8, #0
 800876a:	e7f6      	b.n	800875a <_dtoa_r+0x90a>
 800876c:	4698      	mov	r8, r3
 800876e:	e7f4      	b.n	800875a <_dtoa_r+0x90a>
 8008770:	f43f af7d 	beq.w	800866e <_dtoa_r+0x81e>
 8008774:	4618      	mov	r0, r3
 8008776:	301c      	adds	r0, #28
 8008778:	e772      	b.n	8008660 <_dtoa_r+0x810>
 800877a:	9b08      	ldr	r3, [sp, #32]
 800877c:	2b00      	cmp	r3, #0
 800877e:	dc36      	bgt.n	80087ee <_dtoa_r+0x99e>
 8008780:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008782:	2b02      	cmp	r3, #2
 8008784:	dd33      	ble.n	80087ee <_dtoa_r+0x99e>
 8008786:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800878a:	f1b9 0f00 	cmp.w	r9, #0
 800878e:	d10d      	bne.n	80087ac <_dtoa_r+0x95c>
 8008790:	4621      	mov	r1, r4
 8008792:	464b      	mov	r3, r9
 8008794:	2205      	movs	r2, #5
 8008796:	4628      	mov	r0, r5
 8008798:	f000 fb06 	bl	8008da8 <__multadd>
 800879c:	4601      	mov	r1, r0
 800879e:	4604      	mov	r4, r0
 80087a0:	4658      	mov	r0, fp
 80087a2:	f000 fd1d 	bl	80091e0 <__mcmp>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	f73f adb8 	bgt.w	800831c <_dtoa_r+0x4cc>
 80087ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80087ae:	9f03      	ldr	r7, [sp, #12]
 80087b0:	ea6f 0a03 	mvn.w	sl, r3
 80087b4:	f04f 0800 	mov.w	r8, #0
 80087b8:	4621      	mov	r1, r4
 80087ba:	4628      	mov	r0, r5
 80087bc:	f000 fad2 	bl	8008d64 <_Bfree>
 80087c0:	2e00      	cmp	r6, #0
 80087c2:	f43f aea7 	beq.w	8008514 <_dtoa_r+0x6c4>
 80087c6:	f1b8 0f00 	cmp.w	r8, #0
 80087ca:	d005      	beq.n	80087d8 <_dtoa_r+0x988>
 80087cc:	45b0      	cmp	r8, r6
 80087ce:	d003      	beq.n	80087d8 <_dtoa_r+0x988>
 80087d0:	4641      	mov	r1, r8
 80087d2:	4628      	mov	r0, r5
 80087d4:	f000 fac6 	bl	8008d64 <_Bfree>
 80087d8:	4631      	mov	r1, r6
 80087da:	4628      	mov	r0, r5
 80087dc:	f000 fac2 	bl	8008d64 <_Bfree>
 80087e0:	e698      	b.n	8008514 <_dtoa_r+0x6c4>
 80087e2:	2400      	movs	r4, #0
 80087e4:	4626      	mov	r6, r4
 80087e6:	e7e1      	b.n	80087ac <_dtoa_r+0x95c>
 80087e8:	46c2      	mov	sl, r8
 80087ea:	4626      	mov	r6, r4
 80087ec:	e596      	b.n	800831c <_dtoa_r+0x4cc>
 80087ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 80fd 	beq.w	80089f4 <_dtoa_r+0xba4>
 80087fa:	2f00      	cmp	r7, #0
 80087fc:	dd05      	ble.n	800880a <_dtoa_r+0x9ba>
 80087fe:	4631      	mov	r1, r6
 8008800:	463a      	mov	r2, r7
 8008802:	4628      	mov	r0, r5
 8008804:	f000 fc7c 	bl	8009100 <__lshift>
 8008808:	4606      	mov	r6, r0
 800880a:	f1b8 0f00 	cmp.w	r8, #0
 800880e:	d05c      	beq.n	80088ca <_dtoa_r+0xa7a>
 8008810:	4628      	mov	r0, r5
 8008812:	6871      	ldr	r1, [r6, #4]
 8008814:	f000 fa66 	bl	8008ce4 <_Balloc>
 8008818:	4607      	mov	r7, r0
 800881a:	b928      	cbnz	r0, 8008828 <_dtoa_r+0x9d8>
 800881c:	4602      	mov	r2, r0
 800881e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008822:	4b7f      	ldr	r3, [pc, #508]	; (8008a20 <_dtoa_r+0xbd0>)
 8008824:	f7ff bb28 	b.w	8007e78 <_dtoa_r+0x28>
 8008828:	6932      	ldr	r2, [r6, #16]
 800882a:	f106 010c 	add.w	r1, r6, #12
 800882e:	3202      	adds	r2, #2
 8008830:	0092      	lsls	r2, r2, #2
 8008832:	300c      	adds	r0, #12
 8008834:	f7fe fb27 	bl	8006e86 <memcpy>
 8008838:	2201      	movs	r2, #1
 800883a:	4639      	mov	r1, r7
 800883c:	4628      	mov	r0, r5
 800883e:	f000 fc5f 	bl	8009100 <__lshift>
 8008842:	46b0      	mov	r8, r6
 8008844:	4606      	mov	r6, r0
 8008846:	9b03      	ldr	r3, [sp, #12]
 8008848:	3301      	adds	r3, #1
 800884a:	9308      	str	r3, [sp, #32]
 800884c:	9b03      	ldr	r3, [sp, #12]
 800884e:	444b      	add	r3, r9
 8008850:	930a      	str	r3, [sp, #40]	; 0x28
 8008852:	9b04      	ldr	r3, [sp, #16]
 8008854:	f003 0301 	and.w	r3, r3, #1
 8008858:	9309      	str	r3, [sp, #36]	; 0x24
 800885a:	9b08      	ldr	r3, [sp, #32]
 800885c:	4621      	mov	r1, r4
 800885e:	3b01      	subs	r3, #1
 8008860:	4658      	mov	r0, fp
 8008862:	9304      	str	r3, [sp, #16]
 8008864:	f7ff fa68 	bl	8007d38 <quorem>
 8008868:	4603      	mov	r3, r0
 800886a:	4641      	mov	r1, r8
 800886c:	3330      	adds	r3, #48	; 0x30
 800886e:	9006      	str	r0, [sp, #24]
 8008870:	4658      	mov	r0, fp
 8008872:	930b      	str	r3, [sp, #44]	; 0x2c
 8008874:	f000 fcb4 	bl	80091e0 <__mcmp>
 8008878:	4632      	mov	r2, r6
 800887a:	4681      	mov	r9, r0
 800887c:	4621      	mov	r1, r4
 800887e:	4628      	mov	r0, r5
 8008880:	f000 fcca 	bl	8009218 <__mdiff>
 8008884:	68c2      	ldr	r2, [r0, #12]
 8008886:	4607      	mov	r7, r0
 8008888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800888a:	bb02      	cbnz	r2, 80088ce <_dtoa_r+0xa7e>
 800888c:	4601      	mov	r1, r0
 800888e:	4658      	mov	r0, fp
 8008890:	f000 fca6 	bl	80091e0 <__mcmp>
 8008894:	4602      	mov	r2, r0
 8008896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008898:	4639      	mov	r1, r7
 800889a:	4628      	mov	r0, r5
 800889c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80088a0:	f000 fa60 	bl	8008d64 <_Bfree>
 80088a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088a8:	9f08      	ldr	r7, [sp, #32]
 80088aa:	ea43 0102 	orr.w	r1, r3, r2
 80088ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088b0:	430b      	orrs	r3, r1
 80088b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088b4:	d10d      	bne.n	80088d2 <_dtoa_r+0xa82>
 80088b6:	2b39      	cmp	r3, #57	; 0x39
 80088b8:	d029      	beq.n	800890e <_dtoa_r+0xabe>
 80088ba:	f1b9 0f00 	cmp.w	r9, #0
 80088be:	dd01      	ble.n	80088c4 <_dtoa_r+0xa74>
 80088c0:	9b06      	ldr	r3, [sp, #24]
 80088c2:	3331      	adds	r3, #49	; 0x31
 80088c4:	9a04      	ldr	r2, [sp, #16]
 80088c6:	7013      	strb	r3, [r2, #0]
 80088c8:	e776      	b.n	80087b8 <_dtoa_r+0x968>
 80088ca:	4630      	mov	r0, r6
 80088cc:	e7b9      	b.n	8008842 <_dtoa_r+0x9f2>
 80088ce:	2201      	movs	r2, #1
 80088d0:	e7e2      	b.n	8008898 <_dtoa_r+0xa48>
 80088d2:	f1b9 0f00 	cmp.w	r9, #0
 80088d6:	db06      	blt.n	80088e6 <_dtoa_r+0xa96>
 80088d8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80088da:	ea41 0909 	orr.w	r9, r1, r9
 80088de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088e0:	ea59 0101 	orrs.w	r1, r9, r1
 80088e4:	d120      	bne.n	8008928 <_dtoa_r+0xad8>
 80088e6:	2a00      	cmp	r2, #0
 80088e8:	ddec      	ble.n	80088c4 <_dtoa_r+0xa74>
 80088ea:	4659      	mov	r1, fp
 80088ec:	2201      	movs	r2, #1
 80088ee:	4628      	mov	r0, r5
 80088f0:	9308      	str	r3, [sp, #32]
 80088f2:	f000 fc05 	bl	8009100 <__lshift>
 80088f6:	4621      	mov	r1, r4
 80088f8:	4683      	mov	fp, r0
 80088fa:	f000 fc71 	bl	80091e0 <__mcmp>
 80088fe:	2800      	cmp	r0, #0
 8008900:	9b08      	ldr	r3, [sp, #32]
 8008902:	dc02      	bgt.n	800890a <_dtoa_r+0xaba>
 8008904:	d1de      	bne.n	80088c4 <_dtoa_r+0xa74>
 8008906:	07da      	lsls	r2, r3, #31
 8008908:	d5dc      	bpl.n	80088c4 <_dtoa_r+0xa74>
 800890a:	2b39      	cmp	r3, #57	; 0x39
 800890c:	d1d8      	bne.n	80088c0 <_dtoa_r+0xa70>
 800890e:	2339      	movs	r3, #57	; 0x39
 8008910:	9a04      	ldr	r2, [sp, #16]
 8008912:	7013      	strb	r3, [r2, #0]
 8008914:	463b      	mov	r3, r7
 8008916:	461f      	mov	r7, r3
 8008918:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800891c:	3b01      	subs	r3, #1
 800891e:	2a39      	cmp	r2, #57	; 0x39
 8008920:	d050      	beq.n	80089c4 <_dtoa_r+0xb74>
 8008922:	3201      	adds	r2, #1
 8008924:	701a      	strb	r2, [r3, #0]
 8008926:	e747      	b.n	80087b8 <_dtoa_r+0x968>
 8008928:	2a00      	cmp	r2, #0
 800892a:	dd03      	ble.n	8008934 <_dtoa_r+0xae4>
 800892c:	2b39      	cmp	r3, #57	; 0x39
 800892e:	d0ee      	beq.n	800890e <_dtoa_r+0xabe>
 8008930:	3301      	adds	r3, #1
 8008932:	e7c7      	b.n	80088c4 <_dtoa_r+0xa74>
 8008934:	9a08      	ldr	r2, [sp, #32]
 8008936:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008938:	f802 3c01 	strb.w	r3, [r2, #-1]
 800893c:	428a      	cmp	r2, r1
 800893e:	d02a      	beq.n	8008996 <_dtoa_r+0xb46>
 8008940:	4659      	mov	r1, fp
 8008942:	2300      	movs	r3, #0
 8008944:	220a      	movs	r2, #10
 8008946:	4628      	mov	r0, r5
 8008948:	f000 fa2e 	bl	8008da8 <__multadd>
 800894c:	45b0      	cmp	r8, r6
 800894e:	4683      	mov	fp, r0
 8008950:	f04f 0300 	mov.w	r3, #0
 8008954:	f04f 020a 	mov.w	r2, #10
 8008958:	4641      	mov	r1, r8
 800895a:	4628      	mov	r0, r5
 800895c:	d107      	bne.n	800896e <_dtoa_r+0xb1e>
 800895e:	f000 fa23 	bl	8008da8 <__multadd>
 8008962:	4680      	mov	r8, r0
 8008964:	4606      	mov	r6, r0
 8008966:	9b08      	ldr	r3, [sp, #32]
 8008968:	3301      	adds	r3, #1
 800896a:	9308      	str	r3, [sp, #32]
 800896c:	e775      	b.n	800885a <_dtoa_r+0xa0a>
 800896e:	f000 fa1b 	bl	8008da8 <__multadd>
 8008972:	4631      	mov	r1, r6
 8008974:	4680      	mov	r8, r0
 8008976:	2300      	movs	r3, #0
 8008978:	220a      	movs	r2, #10
 800897a:	4628      	mov	r0, r5
 800897c:	f000 fa14 	bl	8008da8 <__multadd>
 8008980:	4606      	mov	r6, r0
 8008982:	e7f0      	b.n	8008966 <_dtoa_r+0xb16>
 8008984:	f1b9 0f00 	cmp.w	r9, #0
 8008988:	bfcc      	ite	gt
 800898a:	464f      	movgt	r7, r9
 800898c:	2701      	movle	r7, #1
 800898e:	f04f 0800 	mov.w	r8, #0
 8008992:	9a03      	ldr	r2, [sp, #12]
 8008994:	4417      	add	r7, r2
 8008996:	4659      	mov	r1, fp
 8008998:	2201      	movs	r2, #1
 800899a:	4628      	mov	r0, r5
 800899c:	9308      	str	r3, [sp, #32]
 800899e:	f000 fbaf 	bl	8009100 <__lshift>
 80089a2:	4621      	mov	r1, r4
 80089a4:	4683      	mov	fp, r0
 80089a6:	f000 fc1b 	bl	80091e0 <__mcmp>
 80089aa:	2800      	cmp	r0, #0
 80089ac:	dcb2      	bgt.n	8008914 <_dtoa_r+0xac4>
 80089ae:	d102      	bne.n	80089b6 <_dtoa_r+0xb66>
 80089b0:	9b08      	ldr	r3, [sp, #32]
 80089b2:	07db      	lsls	r3, r3, #31
 80089b4:	d4ae      	bmi.n	8008914 <_dtoa_r+0xac4>
 80089b6:	463b      	mov	r3, r7
 80089b8:	461f      	mov	r7, r3
 80089ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089be:	2a30      	cmp	r2, #48	; 0x30
 80089c0:	d0fa      	beq.n	80089b8 <_dtoa_r+0xb68>
 80089c2:	e6f9      	b.n	80087b8 <_dtoa_r+0x968>
 80089c4:	9a03      	ldr	r2, [sp, #12]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d1a5      	bne.n	8008916 <_dtoa_r+0xac6>
 80089ca:	2331      	movs	r3, #49	; 0x31
 80089cc:	f10a 0a01 	add.w	sl, sl, #1
 80089d0:	e779      	b.n	80088c6 <_dtoa_r+0xa76>
 80089d2:	4b14      	ldr	r3, [pc, #80]	; (8008a24 <_dtoa_r+0xbd4>)
 80089d4:	f7ff baa8 	b.w	8007f28 <_dtoa_r+0xd8>
 80089d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f47f aa81 	bne.w	8007ee2 <_dtoa_r+0x92>
 80089e0:	4b11      	ldr	r3, [pc, #68]	; (8008a28 <_dtoa_r+0xbd8>)
 80089e2:	f7ff baa1 	b.w	8007f28 <_dtoa_r+0xd8>
 80089e6:	f1b9 0f00 	cmp.w	r9, #0
 80089ea:	dc03      	bgt.n	80089f4 <_dtoa_r+0xba4>
 80089ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	f73f aecb 	bgt.w	800878a <_dtoa_r+0x93a>
 80089f4:	9f03      	ldr	r7, [sp, #12]
 80089f6:	4621      	mov	r1, r4
 80089f8:	4658      	mov	r0, fp
 80089fa:	f7ff f99d 	bl	8007d38 <quorem>
 80089fe:	9a03      	ldr	r2, [sp, #12]
 8008a00:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008a04:	f807 3b01 	strb.w	r3, [r7], #1
 8008a08:	1aba      	subs	r2, r7, r2
 8008a0a:	4591      	cmp	r9, r2
 8008a0c:	ddba      	ble.n	8008984 <_dtoa_r+0xb34>
 8008a0e:	4659      	mov	r1, fp
 8008a10:	2300      	movs	r3, #0
 8008a12:	220a      	movs	r2, #10
 8008a14:	4628      	mov	r0, r5
 8008a16:	f000 f9c7 	bl	8008da8 <__multadd>
 8008a1a:	4683      	mov	fp, r0
 8008a1c:	e7eb      	b.n	80089f6 <_dtoa_r+0xba6>
 8008a1e:	bf00      	nop
 8008a20:	08009ecf 	.word	0x08009ecf
 8008a24:	08009e2c 	.word	0x08009e2c
 8008a28:	08009e50 	.word	0x08009e50

08008a2c <__sflush_r>:
 8008a2c:	898a      	ldrh	r2, [r1, #12]
 8008a2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a30:	4605      	mov	r5, r0
 8008a32:	0710      	lsls	r0, r2, #28
 8008a34:	460c      	mov	r4, r1
 8008a36:	d457      	bmi.n	8008ae8 <__sflush_r+0xbc>
 8008a38:	684b      	ldr	r3, [r1, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	dc04      	bgt.n	8008a48 <__sflush_r+0x1c>
 8008a3e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	dc01      	bgt.n	8008a48 <__sflush_r+0x1c>
 8008a44:	2000      	movs	r0, #0
 8008a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a4a:	2e00      	cmp	r6, #0
 8008a4c:	d0fa      	beq.n	8008a44 <__sflush_r+0x18>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a54:	682f      	ldr	r7, [r5, #0]
 8008a56:	602b      	str	r3, [r5, #0]
 8008a58:	d032      	beq.n	8008ac0 <__sflush_r+0x94>
 8008a5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a5c:	89a3      	ldrh	r3, [r4, #12]
 8008a5e:	075a      	lsls	r2, r3, #29
 8008a60:	d505      	bpl.n	8008a6e <__sflush_r+0x42>
 8008a62:	6863      	ldr	r3, [r4, #4]
 8008a64:	1ac0      	subs	r0, r0, r3
 8008a66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a68:	b10b      	cbz	r3, 8008a6e <__sflush_r+0x42>
 8008a6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a6c:	1ac0      	subs	r0, r0, r3
 8008a6e:	2300      	movs	r3, #0
 8008a70:	4602      	mov	r2, r0
 8008a72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a74:	4628      	mov	r0, r5
 8008a76:	6a21      	ldr	r1, [r4, #32]
 8008a78:	47b0      	blx	r6
 8008a7a:	1c43      	adds	r3, r0, #1
 8008a7c:	89a3      	ldrh	r3, [r4, #12]
 8008a7e:	d106      	bne.n	8008a8e <__sflush_r+0x62>
 8008a80:	6829      	ldr	r1, [r5, #0]
 8008a82:	291d      	cmp	r1, #29
 8008a84:	d82c      	bhi.n	8008ae0 <__sflush_r+0xb4>
 8008a86:	4a29      	ldr	r2, [pc, #164]	; (8008b2c <__sflush_r+0x100>)
 8008a88:	40ca      	lsrs	r2, r1
 8008a8a:	07d6      	lsls	r6, r2, #31
 8008a8c:	d528      	bpl.n	8008ae0 <__sflush_r+0xb4>
 8008a8e:	2200      	movs	r2, #0
 8008a90:	6062      	str	r2, [r4, #4]
 8008a92:	6922      	ldr	r2, [r4, #16]
 8008a94:	04d9      	lsls	r1, r3, #19
 8008a96:	6022      	str	r2, [r4, #0]
 8008a98:	d504      	bpl.n	8008aa4 <__sflush_r+0x78>
 8008a9a:	1c42      	adds	r2, r0, #1
 8008a9c:	d101      	bne.n	8008aa2 <__sflush_r+0x76>
 8008a9e:	682b      	ldr	r3, [r5, #0]
 8008aa0:	b903      	cbnz	r3, 8008aa4 <__sflush_r+0x78>
 8008aa2:	6560      	str	r0, [r4, #84]	; 0x54
 8008aa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008aa6:	602f      	str	r7, [r5, #0]
 8008aa8:	2900      	cmp	r1, #0
 8008aaa:	d0cb      	beq.n	8008a44 <__sflush_r+0x18>
 8008aac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ab0:	4299      	cmp	r1, r3
 8008ab2:	d002      	beq.n	8008aba <__sflush_r+0x8e>
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	f000 fcab 	bl	8009410 <_free_r>
 8008aba:	2000      	movs	r0, #0
 8008abc:	6360      	str	r0, [r4, #52]	; 0x34
 8008abe:	e7c2      	b.n	8008a46 <__sflush_r+0x1a>
 8008ac0:	6a21      	ldr	r1, [r4, #32]
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	47b0      	blx	r6
 8008ac8:	1c41      	adds	r1, r0, #1
 8008aca:	d1c7      	bne.n	8008a5c <__sflush_r+0x30>
 8008acc:	682b      	ldr	r3, [r5, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d0c4      	beq.n	8008a5c <__sflush_r+0x30>
 8008ad2:	2b1d      	cmp	r3, #29
 8008ad4:	d001      	beq.n	8008ada <__sflush_r+0xae>
 8008ad6:	2b16      	cmp	r3, #22
 8008ad8:	d101      	bne.n	8008ade <__sflush_r+0xb2>
 8008ada:	602f      	str	r7, [r5, #0]
 8008adc:	e7b2      	b.n	8008a44 <__sflush_r+0x18>
 8008ade:	89a3      	ldrh	r3, [r4, #12]
 8008ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ae4:	81a3      	strh	r3, [r4, #12]
 8008ae6:	e7ae      	b.n	8008a46 <__sflush_r+0x1a>
 8008ae8:	690f      	ldr	r7, [r1, #16]
 8008aea:	2f00      	cmp	r7, #0
 8008aec:	d0aa      	beq.n	8008a44 <__sflush_r+0x18>
 8008aee:	0793      	lsls	r3, r2, #30
 8008af0:	bf18      	it	ne
 8008af2:	2300      	movne	r3, #0
 8008af4:	680e      	ldr	r6, [r1, #0]
 8008af6:	bf08      	it	eq
 8008af8:	694b      	ldreq	r3, [r1, #20]
 8008afa:	1bf6      	subs	r6, r6, r7
 8008afc:	600f      	str	r7, [r1, #0]
 8008afe:	608b      	str	r3, [r1, #8]
 8008b00:	2e00      	cmp	r6, #0
 8008b02:	dd9f      	ble.n	8008a44 <__sflush_r+0x18>
 8008b04:	4633      	mov	r3, r6
 8008b06:	463a      	mov	r2, r7
 8008b08:	4628      	mov	r0, r5
 8008b0a:	6a21      	ldr	r1, [r4, #32]
 8008b0c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008b10:	47e0      	blx	ip
 8008b12:	2800      	cmp	r0, #0
 8008b14:	dc06      	bgt.n	8008b24 <__sflush_r+0xf8>
 8008b16:	89a3      	ldrh	r3, [r4, #12]
 8008b18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b20:	81a3      	strh	r3, [r4, #12]
 8008b22:	e790      	b.n	8008a46 <__sflush_r+0x1a>
 8008b24:	4407      	add	r7, r0
 8008b26:	1a36      	subs	r6, r6, r0
 8008b28:	e7ea      	b.n	8008b00 <__sflush_r+0xd4>
 8008b2a:	bf00      	nop
 8008b2c:	20400001 	.word	0x20400001

08008b30 <_fflush_r>:
 8008b30:	b538      	push	{r3, r4, r5, lr}
 8008b32:	690b      	ldr	r3, [r1, #16]
 8008b34:	4605      	mov	r5, r0
 8008b36:	460c      	mov	r4, r1
 8008b38:	b913      	cbnz	r3, 8008b40 <_fflush_r+0x10>
 8008b3a:	2500      	movs	r5, #0
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	bd38      	pop	{r3, r4, r5, pc}
 8008b40:	b118      	cbz	r0, 8008b4a <_fflush_r+0x1a>
 8008b42:	6983      	ldr	r3, [r0, #24]
 8008b44:	b90b      	cbnz	r3, 8008b4a <_fflush_r+0x1a>
 8008b46:	f7fe f8d9 	bl	8006cfc <__sinit>
 8008b4a:	4b14      	ldr	r3, [pc, #80]	; (8008b9c <_fflush_r+0x6c>)
 8008b4c:	429c      	cmp	r4, r3
 8008b4e:	d11b      	bne.n	8008b88 <_fflush_r+0x58>
 8008b50:	686c      	ldr	r4, [r5, #4]
 8008b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d0ef      	beq.n	8008b3a <_fflush_r+0xa>
 8008b5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b5c:	07d0      	lsls	r0, r2, #31
 8008b5e:	d404      	bmi.n	8008b6a <_fflush_r+0x3a>
 8008b60:	0599      	lsls	r1, r3, #22
 8008b62:	d402      	bmi.n	8008b6a <_fflush_r+0x3a>
 8008b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b66:	f7fe f98c 	bl	8006e82 <__retarget_lock_acquire_recursive>
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	4621      	mov	r1, r4
 8008b6e:	f7ff ff5d 	bl	8008a2c <__sflush_r>
 8008b72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b74:	4605      	mov	r5, r0
 8008b76:	07da      	lsls	r2, r3, #31
 8008b78:	d4e0      	bmi.n	8008b3c <_fflush_r+0xc>
 8008b7a:	89a3      	ldrh	r3, [r4, #12]
 8008b7c:	059b      	lsls	r3, r3, #22
 8008b7e:	d4dd      	bmi.n	8008b3c <_fflush_r+0xc>
 8008b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b82:	f7fe f97f 	bl	8006e84 <__retarget_lock_release_recursive>
 8008b86:	e7d9      	b.n	8008b3c <_fflush_r+0xc>
 8008b88:	4b05      	ldr	r3, [pc, #20]	; (8008ba0 <_fflush_r+0x70>)
 8008b8a:	429c      	cmp	r4, r3
 8008b8c:	d101      	bne.n	8008b92 <_fflush_r+0x62>
 8008b8e:	68ac      	ldr	r4, [r5, #8]
 8008b90:	e7df      	b.n	8008b52 <_fflush_r+0x22>
 8008b92:	4b04      	ldr	r3, [pc, #16]	; (8008ba4 <_fflush_r+0x74>)
 8008b94:	429c      	cmp	r4, r3
 8008b96:	bf08      	it	eq
 8008b98:	68ec      	ldreq	r4, [r5, #12]
 8008b9a:	e7da      	b.n	8008b52 <_fflush_r+0x22>
 8008b9c:	08009dd8 	.word	0x08009dd8
 8008ba0:	08009df8 	.word	0x08009df8
 8008ba4:	08009db8 	.word	0x08009db8

08008ba8 <_localeconv_r>:
 8008ba8:	4800      	ldr	r0, [pc, #0]	; (8008bac <_localeconv_r+0x4>)
 8008baa:	4770      	bx	lr
 8008bac:	2000016c 	.word	0x2000016c

08008bb0 <_lseek_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	4608      	mov	r0, r1
 8008bb6:	4611      	mov	r1, r2
 8008bb8:	2200      	movs	r2, #0
 8008bba:	4d05      	ldr	r5, [pc, #20]	; (8008bd0 <_lseek_r+0x20>)
 8008bbc:	602a      	str	r2, [r5, #0]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	f7f9 f8f4 	bl	8001dac <_lseek>
 8008bc4:	1c43      	adds	r3, r0, #1
 8008bc6:	d102      	bne.n	8008bce <_lseek_r+0x1e>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	b103      	cbz	r3, 8008bce <_lseek_r+0x1e>
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	bd38      	pop	{r3, r4, r5, pc}
 8008bd0:	200013f4 	.word	0x200013f4

08008bd4 <__swhatbuf_r>:
 8008bd4:	b570      	push	{r4, r5, r6, lr}
 8008bd6:	460e      	mov	r6, r1
 8008bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bdc:	4614      	mov	r4, r2
 8008bde:	2900      	cmp	r1, #0
 8008be0:	461d      	mov	r5, r3
 8008be2:	b096      	sub	sp, #88	; 0x58
 8008be4:	da08      	bge.n	8008bf8 <__swhatbuf_r+0x24>
 8008be6:	2200      	movs	r2, #0
 8008be8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008bec:	602a      	str	r2, [r5, #0]
 8008bee:	061a      	lsls	r2, r3, #24
 8008bf0:	d410      	bmi.n	8008c14 <__swhatbuf_r+0x40>
 8008bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bf6:	e00e      	b.n	8008c16 <__swhatbuf_r+0x42>
 8008bf8:	466a      	mov	r2, sp
 8008bfa:	f000 ff47 	bl	8009a8c <_fstat_r>
 8008bfe:	2800      	cmp	r0, #0
 8008c00:	dbf1      	blt.n	8008be6 <__swhatbuf_r+0x12>
 8008c02:	9a01      	ldr	r2, [sp, #4]
 8008c04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c0c:	425a      	negs	r2, r3
 8008c0e:	415a      	adcs	r2, r3
 8008c10:	602a      	str	r2, [r5, #0]
 8008c12:	e7ee      	b.n	8008bf2 <__swhatbuf_r+0x1e>
 8008c14:	2340      	movs	r3, #64	; 0x40
 8008c16:	2000      	movs	r0, #0
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	b016      	add	sp, #88	; 0x58
 8008c1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c20 <__smakebuf_r>:
 8008c20:	898b      	ldrh	r3, [r1, #12]
 8008c22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c24:	079d      	lsls	r5, r3, #30
 8008c26:	4606      	mov	r6, r0
 8008c28:	460c      	mov	r4, r1
 8008c2a:	d507      	bpl.n	8008c3c <__smakebuf_r+0x1c>
 8008c2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c30:	6023      	str	r3, [r4, #0]
 8008c32:	6123      	str	r3, [r4, #16]
 8008c34:	2301      	movs	r3, #1
 8008c36:	6163      	str	r3, [r4, #20]
 8008c38:	b002      	add	sp, #8
 8008c3a:	bd70      	pop	{r4, r5, r6, pc}
 8008c3c:	466a      	mov	r2, sp
 8008c3e:	ab01      	add	r3, sp, #4
 8008c40:	f7ff ffc8 	bl	8008bd4 <__swhatbuf_r>
 8008c44:	9900      	ldr	r1, [sp, #0]
 8008c46:	4605      	mov	r5, r0
 8008c48:	4630      	mov	r0, r6
 8008c4a:	f7fe f953 	bl	8006ef4 <_malloc_r>
 8008c4e:	b948      	cbnz	r0, 8008c64 <__smakebuf_r+0x44>
 8008c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c54:	059a      	lsls	r2, r3, #22
 8008c56:	d4ef      	bmi.n	8008c38 <__smakebuf_r+0x18>
 8008c58:	f023 0303 	bic.w	r3, r3, #3
 8008c5c:	f043 0302 	orr.w	r3, r3, #2
 8008c60:	81a3      	strh	r3, [r4, #12]
 8008c62:	e7e3      	b.n	8008c2c <__smakebuf_r+0xc>
 8008c64:	4b0d      	ldr	r3, [pc, #52]	; (8008c9c <__smakebuf_r+0x7c>)
 8008c66:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c68:	89a3      	ldrh	r3, [r4, #12]
 8008c6a:	6020      	str	r0, [r4, #0]
 8008c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c70:	81a3      	strh	r3, [r4, #12]
 8008c72:	9b00      	ldr	r3, [sp, #0]
 8008c74:	6120      	str	r0, [r4, #16]
 8008c76:	6163      	str	r3, [r4, #20]
 8008c78:	9b01      	ldr	r3, [sp, #4]
 8008c7a:	b15b      	cbz	r3, 8008c94 <__smakebuf_r+0x74>
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c82:	f000 ff15 	bl	8009ab0 <_isatty_r>
 8008c86:	b128      	cbz	r0, 8008c94 <__smakebuf_r+0x74>
 8008c88:	89a3      	ldrh	r3, [r4, #12]
 8008c8a:	f023 0303 	bic.w	r3, r3, #3
 8008c8e:	f043 0301 	orr.w	r3, r3, #1
 8008c92:	81a3      	strh	r3, [r4, #12]
 8008c94:	89a0      	ldrh	r0, [r4, #12]
 8008c96:	4305      	orrs	r5, r0
 8008c98:	81a5      	strh	r5, [r4, #12]
 8008c9a:	e7cd      	b.n	8008c38 <__smakebuf_r+0x18>
 8008c9c:	08006c95 	.word	0x08006c95

08008ca0 <malloc>:
 8008ca0:	4b02      	ldr	r3, [pc, #8]	; (8008cac <malloc+0xc>)
 8008ca2:	4601      	mov	r1, r0
 8008ca4:	6818      	ldr	r0, [r3, #0]
 8008ca6:	f7fe b925 	b.w	8006ef4 <_malloc_r>
 8008caa:	bf00      	nop
 8008cac:	20000018 	.word	0x20000018

08008cb0 <memchr>:
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	b510      	push	{r4, lr}
 8008cb4:	b2c9      	uxtb	r1, r1
 8008cb6:	4402      	add	r2, r0
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	4618      	mov	r0, r3
 8008cbc:	d101      	bne.n	8008cc2 <memchr+0x12>
 8008cbe:	2000      	movs	r0, #0
 8008cc0:	e003      	b.n	8008cca <memchr+0x1a>
 8008cc2:	7804      	ldrb	r4, [r0, #0]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	428c      	cmp	r4, r1
 8008cc8:	d1f6      	bne.n	8008cb8 <memchr+0x8>
 8008cca:	bd10      	pop	{r4, pc}

08008ccc <__malloc_lock>:
 8008ccc:	4801      	ldr	r0, [pc, #4]	; (8008cd4 <__malloc_lock+0x8>)
 8008cce:	f7fe b8d8 	b.w	8006e82 <__retarget_lock_acquire_recursive>
 8008cd2:	bf00      	nop
 8008cd4:	200013e8 	.word	0x200013e8

08008cd8 <__malloc_unlock>:
 8008cd8:	4801      	ldr	r0, [pc, #4]	; (8008ce0 <__malloc_unlock+0x8>)
 8008cda:	f7fe b8d3 	b.w	8006e84 <__retarget_lock_release_recursive>
 8008cde:	bf00      	nop
 8008ce0:	200013e8 	.word	0x200013e8

08008ce4 <_Balloc>:
 8008ce4:	b570      	push	{r4, r5, r6, lr}
 8008ce6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ce8:	4604      	mov	r4, r0
 8008cea:	460d      	mov	r5, r1
 8008cec:	b976      	cbnz	r6, 8008d0c <_Balloc+0x28>
 8008cee:	2010      	movs	r0, #16
 8008cf0:	f7ff ffd6 	bl	8008ca0 <malloc>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	6260      	str	r0, [r4, #36]	; 0x24
 8008cf8:	b920      	cbnz	r0, 8008d04 <_Balloc+0x20>
 8008cfa:	2166      	movs	r1, #102	; 0x66
 8008cfc:	4b17      	ldr	r3, [pc, #92]	; (8008d5c <_Balloc+0x78>)
 8008cfe:	4818      	ldr	r0, [pc, #96]	; (8008d60 <_Balloc+0x7c>)
 8008d00:	f000 fe94 	bl	8009a2c <__assert_func>
 8008d04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d08:	6006      	str	r6, [r0, #0]
 8008d0a:	60c6      	str	r6, [r0, #12]
 8008d0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d0e:	68f3      	ldr	r3, [r6, #12]
 8008d10:	b183      	cbz	r3, 8008d34 <_Balloc+0x50>
 8008d12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d1a:	b9b8      	cbnz	r0, 8008d4c <_Balloc+0x68>
 8008d1c:	2101      	movs	r1, #1
 8008d1e:	fa01 f605 	lsl.w	r6, r1, r5
 8008d22:	1d72      	adds	r2, r6, #5
 8008d24:	4620      	mov	r0, r4
 8008d26:	0092      	lsls	r2, r2, #2
 8008d28:	f000 fb5e 	bl	80093e8 <_calloc_r>
 8008d2c:	b160      	cbz	r0, 8008d48 <_Balloc+0x64>
 8008d2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d32:	e00e      	b.n	8008d52 <_Balloc+0x6e>
 8008d34:	2221      	movs	r2, #33	; 0x21
 8008d36:	2104      	movs	r1, #4
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f000 fb55 	bl	80093e8 <_calloc_r>
 8008d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d40:	60f0      	str	r0, [r6, #12]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1e4      	bne.n	8008d12 <_Balloc+0x2e>
 8008d48:	2000      	movs	r0, #0
 8008d4a:	bd70      	pop	{r4, r5, r6, pc}
 8008d4c:	6802      	ldr	r2, [r0, #0]
 8008d4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d52:	2300      	movs	r3, #0
 8008d54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d58:	e7f7      	b.n	8008d4a <_Balloc+0x66>
 8008d5a:	bf00      	nop
 8008d5c:	08009e5d 	.word	0x08009e5d
 8008d60:	08009ee0 	.word	0x08009ee0

08008d64 <_Bfree>:
 8008d64:	b570      	push	{r4, r5, r6, lr}
 8008d66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d68:	4605      	mov	r5, r0
 8008d6a:	460c      	mov	r4, r1
 8008d6c:	b976      	cbnz	r6, 8008d8c <_Bfree+0x28>
 8008d6e:	2010      	movs	r0, #16
 8008d70:	f7ff ff96 	bl	8008ca0 <malloc>
 8008d74:	4602      	mov	r2, r0
 8008d76:	6268      	str	r0, [r5, #36]	; 0x24
 8008d78:	b920      	cbnz	r0, 8008d84 <_Bfree+0x20>
 8008d7a:	218a      	movs	r1, #138	; 0x8a
 8008d7c:	4b08      	ldr	r3, [pc, #32]	; (8008da0 <_Bfree+0x3c>)
 8008d7e:	4809      	ldr	r0, [pc, #36]	; (8008da4 <_Bfree+0x40>)
 8008d80:	f000 fe54 	bl	8009a2c <__assert_func>
 8008d84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d88:	6006      	str	r6, [r0, #0]
 8008d8a:	60c6      	str	r6, [r0, #12]
 8008d8c:	b13c      	cbz	r4, 8008d9e <_Bfree+0x3a>
 8008d8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d90:	6862      	ldr	r2, [r4, #4]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d98:	6021      	str	r1, [r4, #0]
 8008d9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d9e:	bd70      	pop	{r4, r5, r6, pc}
 8008da0:	08009e5d 	.word	0x08009e5d
 8008da4:	08009ee0 	.word	0x08009ee0

08008da8 <__multadd>:
 8008da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dac:	4607      	mov	r7, r0
 8008dae:	460c      	mov	r4, r1
 8008db0:	461e      	mov	r6, r3
 8008db2:	2000      	movs	r0, #0
 8008db4:	690d      	ldr	r5, [r1, #16]
 8008db6:	f101 0c14 	add.w	ip, r1, #20
 8008dba:	f8dc 3000 	ldr.w	r3, [ip]
 8008dbe:	3001      	adds	r0, #1
 8008dc0:	b299      	uxth	r1, r3
 8008dc2:	fb02 6101 	mla	r1, r2, r1, r6
 8008dc6:	0c1e      	lsrs	r6, r3, #16
 8008dc8:	0c0b      	lsrs	r3, r1, #16
 8008dca:	fb02 3306 	mla	r3, r2, r6, r3
 8008dce:	b289      	uxth	r1, r1
 8008dd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008dd4:	4285      	cmp	r5, r0
 8008dd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008dda:	f84c 1b04 	str.w	r1, [ip], #4
 8008dde:	dcec      	bgt.n	8008dba <__multadd+0x12>
 8008de0:	b30e      	cbz	r6, 8008e26 <__multadd+0x7e>
 8008de2:	68a3      	ldr	r3, [r4, #8]
 8008de4:	42ab      	cmp	r3, r5
 8008de6:	dc19      	bgt.n	8008e1c <__multadd+0x74>
 8008de8:	6861      	ldr	r1, [r4, #4]
 8008dea:	4638      	mov	r0, r7
 8008dec:	3101      	adds	r1, #1
 8008dee:	f7ff ff79 	bl	8008ce4 <_Balloc>
 8008df2:	4680      	mov	r8, r0
 8008df4:	b928      	cbnz	r0, 8008e02 <__multadd+0x5a>
 8008df6:	4602      	mov	r2, r0
 8008df8:	21b5      	movs	r1, #181	; 0xb5
 8008dfa:	4b0c      	ldr	r3, [pc, #48]	; (8008e2c <__multadd+0x84>)
 8008dfc:	480c      	ldr	r0, [pc, #48]	; (8008e30 <__multadd+0x88>)
 8008dfe:	f000 fe15 	bl	8009a2c <__assert_func>
 8008e02:	6922      	ldr	r2, [r4, #16]
 8008e04:	f104 010c 	add.w	r1, r4, #12
 8008e08:	3202      	adds	r2, #2
 8008e0a:	0092      	lsls	r2, r2, #2
 8008e0c:	300c      	adds	r0, #12
 8008e0e:	f7fe f83a 	bl	8006e86 <memcpy>
 8008e12:	4621      	mov	r1, r4
 8008e14:	4638      	mov	r0, r7
 8008e16:	f7ff ffa5 	bl	8008d64 <_Bfree>
 8008e1a:	4644      	mov	r4, r8
 8008e1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e20:	3501      	adds	r5, #1
 8008e22:	615e      	str	r6, [r3, #20]
 8008e24:	6125      	str	r5, [r4, #16]
 8008e26:	4620      	mov	r0, r4
 8008e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e2c:	08009ecf 	.word	0x08009ecf
 8008e30:	08009ee0 	.word	0x08009ee0

08008e34 <__hi0bits>:
 8008e34:	0c02      	lsrs	r2, r0, #16
 8008e36:	0412      	lsls	r2, r2, #16
 8008e38:	4603      	mov	r3, r0
 8008e3a:	b9ca      	cbnz	r2, 8008e70 <__hi0bits+0x3c>
 8008e3c:	0403      	lsls	r3, r0, #16
 8008e3e:	2010      	movs	r0, #16
 8008e40:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008e44:	bf04      	itt	eq
 8008e46:	021b      	lsleq	r3, r3, #8
 8008e48:	3008      	addeq	r0, #8
 8008e4a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008e4e:	bf04      	itt	eq
 8008e50:	011b      	lsleq	r3, r3, #4
 8008e52:	3004      	addeq	r0, #4
 8008e54:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008e58:	bf04      	itt	eq
 8008e5a:	009b      	lsleq	r3, r3, #2
 8008e5c:	3002      	addeq	r0, #2
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	db05      	blt.n	8008e6e <__hi0bits+0x3a>
 8008e62:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008e66:	f100 0001 	add.w	r0, r0, #1
 8008e6a:	bf08      	it	eq
 8008e6c:	2020      	moveq	r0, #32
 8008e6e:	4770      	bx	lr
 8008e70:	2000      	movs	r0, #0
 8008e72:	e7e5      	b.n	8008e40 <__hi0bits+0xc>

08008e74 <__lo0bits>:
 8008e74:	6803      	ldr	r3, [r0, #0]
 8008e76:	4602      	mov	r2, r0
 8008e78:	f013 0007 	ands.w	r0, r3, #7
 8008e7c:	d00b      	beq.n	8008e96 <__lo0bits+0x22>
 8008e7e:	07d9      	lsls	r1, r3, #31
 8008e80:	d421      	bmi.n	8008ec6 <__lo0bits+0x52>
 8008e82:	0798      	lsls	r0, r3, #30
 8008e84:	bf49      	itett	mi
 8008e86:	085b      	lsrmi	r3, r3, #1
 8008e88:	089b      	lsrpl	r3, r3, #2
 8008e8a:	2001      	movmi	r0, #1
 8008e8c:	6013      	strmi	r3, [r2, #0]
 8008e8e:	bf5c      	itt	pl
 8008e90:	2002      	movpl	r0, #2
 8008e92:	6013      	strpl	r3, [r2, #0]
 8008e94:	4770      	bx	lr
 8008e96:	b299      	uxth	r1, r3
 8008e98:	b909      	cbnz	r1, 8008e9e <__lo0bits+0x2a>
 8008e9a:	2010      	movs	r0, #16
 8008e9c:	0c1b      	lsrs	r3, r3, #16
 8008e9e:	b2d9      	uxtb	r1, r3
 8008ea0:	b909      	cbnz	r1, 8008ea6 <__lo0bits+0x32>
 8008ea2:	3008      	adds	r0, #8
 8008ea4:	0a1b      	lsrs	r3, r3, #8
 8008ea6:	0719      	lsls	r1, r3, #28
 8008ea8:	bf04      	itt	eq
 8008eaa:	091b      	lsreq	r3, r3, #4
 8008eac:	3004      	addeq	r0, #4
 8008eae:	0799      	lsls	r1, r3, #30
 8008eb0:	bf04      	itt	eq
 8008eb2:	089b      	lsreq	r3, r3, #2
 8008eb4:	3002      	addeq	r0, #2
 8008eb6:	07d9      	lsls	r1, r3, #31
 8008eb8:	d403      	bmi.n	8008ec2 <__lo0bits+0x4e>
 8008eba:	085b      	lsrs	r3, r3, #1
 8008ebc:	f100 0001 	add.w	r0, r0, #1
 8008ec0:	d003      	beq.n	8008eca <__lo0bits+0x56>
 8008ec2:	6013      	str	r3, [r2, #0]
 8008ec4:	4770      	bx	lr
 8008ec6:	2000      	movs	r0, #0
 8008ec8:	4770      	bx	lr
 8008eca:	2020      	movs	r0, #32
 8008ecc:	4770      	bx	lr
	...

08008ed0 <__i2b>:
 8008ed0:	b510      	push	{r4, lr}
 8008ed2:	460c      	mov	r4, r1
 8008ed4:	2101      	movs	r1, #1
 8008ed6:	f7ff ff05 	bl	8008ce4 <_Balloc>
 8008eda:	4602      	mov	r2, r0
 8008edc:	b928      	cbnz	r0, 8008eea <__i2b+0x1a>
 8008ede:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008ee2:	4b04      	ldr	r3, [pc, #16]	; (8008ef4 <__i2b+0x24>)
 8008ee4:	4804      	ldr	r0, [pc, #16]	; (8008ef8 <__i2b+0x28>)
 8008ee6:	f000 fda1 	bl	8009a2c <__assert_func>
 8008eea:	2301      	movs	r3, #1
 8008eec:	6144      	str	r4, [r0, #20]
 8008eee:	6103      	str	r3, [r0, #16]
 8008ef0:	bd10      	pop	{r4, pc}
 8008ef2:	bf00      	nop
 8008ef4:	08009ecf 	.word	0x08009ecf
 8008ef8:	08009ee0 	.word	0x08009ee0

08008efc <__multiply>:
 8008efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f00:	4691      	mov	r9, r2
 8008f02:	690a      	ldr	r2, [r1, #16]
 8008f04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f08:	460c      	mov	r4, r1
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	bfbe      	ittt	lt
 8008f0e:	460b      	movlt	r3, r1
 8008f10:	464c      	movlt	r4, r9
 8008f12:	4699      	movlt	r9, r3
 8008f14:	6927      	ldr	r7, [r4, #16]
 8008f16:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008f1a:	68a3      	ldr	r3, [r4, #8]
 8008f1c:	6861      	ldr	r1, [r4, #4]
 8008f1e:	eb07 060a 	add.w	r6, r7, sl
 8008f22:	42b3      	cmp	r3, r6
 8008f24:	b085      	sub	sp, #20
 8008f26:	bfb8      	it	lt
 8008f28:	3101      	addlt	r1, #1
 8008f2a:	f7ff fedb 	bl	8008ce4 <_Balloc>
 8008f2e:	b930      	cbnz	r0, 8008f3e <__multiply+0x42>
 8008f30:	4602      	mov	r2, r0
 8008f32:	f240 115d 	movw	r1, #349	; 0x15d
 8008f36:	4b43      	ldr	r3, [pc, #268]	; (8009044 <__multiply+0x148>)
 8008f38:	4843      	ldr	r0, [pc, #268]	; (8009048 <__multiply+0x14c>)
 8008f3a:	f000 fd77 	bl	8009a2c <__assert_func>
 8008f3e:	f100 0514 	add.w	r5, r0, #20
 8008f42:	462b      	mov	r3, r5
 8008f44:	2200      	movs	r2, #0
 8008f46:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f4a:	4543      	cmp	r3, r8
 8008f4c:	d321      	bcc.n	8008f92 <__multiply+0x96>
 8008f4e:	f104 0314 	add.w	r3, r4, #20
 8008f52:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008f56:	f109 0314 	add.w	r3, r9, #20
 8008f5a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008f5e:	9202      	str	r2, [sp, #8]
 8008f60:	1b3a      	subs	r2, r7, r4
 8008f62:	3a15      	subs	r2, #21
 8008f64:	f022 0203 	bic.w	r2, r2, #3
 8008f68:	3204      	adds	r2, #4
 8008f6a:	f104 0115 	add.w	r1, r4, #21
 8008f6e:	428f      	cmp	r7, r1
 8008f70:	bf38      	it	cc
 8008f72:	2204      	movcc	r2, #4
 8008f74:	9201      	str	r2, [sp, #4]
 8008f76:	9a02      	ldr	r2, [sp, #8]
 8008f78:	9303      	str	r3, [sp, #12]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d80c      	bhi.n	8008f98 <__multiply+0x9c>
 8008f7e:	2e00      	cmp	r6, #0
 8008f80:	dd03      	ble.n	8008f8a <__multiply+0x8e>
 8008f82:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d059      	beq.n	800903e <__multiply+0x142>
 8008f8a:	6106      	str	r6, [r0, #16]
 8008f8c:	b005      	add	sp, #20
 8008f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f92:	f843 2b04 	str.w	r2, [r3], #4
 8008f96:	e7d8      	b.n	8008f4a <__multiply+0x4e>
 8008f98:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f9c:	f1ba 0f00 	cmp.w	sl, #0
 8008fa0:	d023      	beq.n	8008fea <__multiply+0xee>
 8008fa2:	46a9      	mov	r9, r5
 8008fa4:	f04f 0c00 	mov.w	ip, #0
 8008fa8:	f104 0e14 	add.w	lr, r4, #20
 8008fac:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008fb0:	f8d9 1000 	ldr.w	r1, [r9]
 8008fb4:	fa1f fb82 	uxth.w	fp, r2
 8008fb8:	b289      	uxth	r1, r1
 8008fba:	fb0a 110b 	mla	r1, sl, fp, r1
 8008fbe:	4461      	add	r1, ip
 8008fc0:	f8d9 c000 	ldr.w	ip, [r9]
 8008fc4:	0c12      	lsrs	r2, r2, #16
 8008fc6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008fca:	fb0a c202 	mla	r2, sl, r2, ip
 8008fce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008fd2:	b289      	uxth	r1, r1
 8008fd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008fd8:	4577      	cmp	r7, lr
 8008fda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008fde:	f849 1b04 	str.w	r1, [r9], #4
 8008fe2:	d8e3      	bhi.n	8008fac <__multiply+0xb0>
 8008fe4:	9a01      	ldr	r2, [sp, #4]
 8008fe6:	f845 c002 	str.w	ip, [r5, r2]
 8008fea:	9a03      	ldr	r2, [sp, #12]
 8008fec:	3304      	adds	r3, #4
 8008fee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ff2:	f1b9 0f00 	cmp.w	r9, #0
 8008ff6:	d020      	beq.n	800903a <__multiply+0x13e>
 8008ff8:	46ae      	mov	lr, r5
 8008ffa:	f04f 0a00 	mov.w	sl, #0
 8008ffe:	6829      	ldr	r1, [r5, #0]
 8009000:	f104 0c14 	add.w	ip, r4, #20
 8009004:	f8bc b000 	ldrh.w	fp, [ip]
 8009008:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800900c:	b289      	uxth	r1, r1
 800900e:	fb09 220b 	mla	r2, r9, fp, r2
 8009012:	4492      	add	sl, r2
 8009014:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009018:	f84e 1b04 	str.w	r1, [lr], #4
 800901c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009020:	f8be 1000 	ldrh.w	r1, [lr]
 8009024:	0c12      	lsrs	r2, r2, #16
 8009026:	fb09 1102 	mla	r1, r9, r2, r1
 800902a:	4567      	cmp	r7, ip
 800902c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009030:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009034:	d8e6      	bhi.n	8009004 <__multiply+0x108>
 8009036:	9a01      	ldr	r2, [sp, #4]
 8009038:	50a9      	str	r1, [r5, r2]
 800903a:	3504      	adds	r5, #4
 800903c:	e79b      	b.n	8008f76 <__multiply+0x7a>
 800903e:	3e01      	subs	r6, #1
 8009040:	e79d      	b.n	8008f7e <__multiply+0x82>
 8009042:	bf00      	nop
 8009044:	08009ecf 	.word	0x08009ecf
 8009048:	08009ee0 	.word	0x08009ee0

0800904c <__pow5mult>:
 800904c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009050:	4615      	mov	r5, r2
 8009052:	f012 0203 	ands.w	r2, r2, #3
 8009056:	4606      	mov	r6, r0
 8009058:	460f      	mov	r7, r1
 800905a:	d007      	beq.n	800906c <__pow5mult+0x20>
 800905c:	4c25      	ldr	r4, [pc, #148]	; (80090f4 <__pow5mult+0xa8>)
 800905e:	3a01      	subs	r2, #1
 8009060:	2300      	movs	r3, #0
 8009062:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009066:	f7ff fe9f 	bl	8008da8 <__multadd>
 800906a:	4607      	mov	r7, r0
 800906c:	10ad      	asrs	r5, r5, #2
 800906e:	d03d      	beq.n	80090ec <__pow5mult+0xa0>
 8009070:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009072:	b97c      	cbnz	r4, 8009094 <__pow5mult+0x48>
 8009074:	2010      	movs	r0, #16
 8009076:	f7ff fe13 	bl	8008ca0 <malloc>
 800907a:	4602      	mov	r2, r0
 800907c:	6270      	str	r0, [r6, #36]	; 0x24
 800907e:	b928      	cbnz	r0, 800908c <__pow5mult+0x40>
 8009080:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009084:	4b1c      	ldr	r3, [pc, #112]	; (80090f8 <__pow5mult+0xac>)
 8009086:	481d      	ldr	r0, [pc, #116]	; (80090fc <__pow5mult+0xb0>)
 8009088:	f000 fcd0 	bl	8009a2c <__assert_func>
 800908c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009090:	6004      	str	r4, [r0, #0]
 8009092:	60c4      	str	r4, [r0, #12]
 8009094:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009098:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800909c:	b94c      	cbnz	r4, 80090b2 <__pow5mult+0x66>
 800909e:	f240 2171 	movw	r1, #625	; 0x271
 80090a2:	4630      	mov	r0, r6
 80090a4:	f7ff ff14 	bl	8008ed0 <__i2b>
 80090a8:	2300      	movs	r3, #0
 80090aa:	4604      	mov	r4, r0
 80090ac:	f8c8 0008 	str.w	r0, [r8, #8]
 80090b0:	6003      	str	r3, [r0, #0]
 80090b2:	f04f 0900 	mov.w	r9, #0
 80090b6:	07eb      	lsls	r3, r5, #31
 80090b8:	d50a      	bpl.n	80090d0 <__pow5mult+0x84>
 80090ba:	4639      	mov	r1, r7
 80090bc:	4622      	mov	r2, r4
 80090be:	4630      	mov	r0, r6
 80090c0:	f7ff ff1c 	bl	8008efc <__multiply>
 80090c4:	4680      	mov	r8, r0
 80090c6:	4639      	mov	r1, r7
 80090c8:	4630      	mov	r0, r6
 80090ca:	f7ff fe4b 	bl	8008d64 <_Bfree>
 80090ce:	4647      	mov	r7, r8
 80090d0:	106d      	asrs	r5, r5, #1
 80090d2:	d00b      	beq.n	80090ec <__pow5mult+0xa0>
 80090d4:	6820      	ldr	r0, [r4, #0]
 80090d6:	b938      	cbnz	r0, 80090e8 <__pow5mult+0x9c>
 80090d8:	4622      	mov	r2, r4
 80090da:	4621      	mov	r1, r4
 80090dc:	4630      	mov	r0, r6
 80090de:	f7ff ff0d 	bl	8008efc <__multiply>
 80090e2:	6020      	str	r0, [r4, #0]
 80090e4:	f8c0 9000 	str.w	r9, [r0]
 80090e8:	4604      	mov	r4, r0
 80090ea:	e7e4      	b.n	80090b6 <__pow5mult+0x6a>
 80090ec:	4638      	mov	r0, r7
 80090ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090f2:	bf00      	nop
 80090f4:	0800a030 	.word	0x0800a030
 80090f8:	08009e5d 	.word	0x08009e5d
 80090fc:	08009ee0 	.word	0x08009ee0

08009100 <__lshift>:
 8009100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009104:	460c      	mov	r4, r1
 8009106:	4607      	mov	r7, r0
 8009108:	4691      	mov	r9, r2
 800910a:	6923      	ldr	r3, [r4, #16]
 800910c:	6849      	ldr	r1, [r1, #4]
 800910e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009112:	68a3      	ldr	r3, [r4, #8]
 8009114:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009118:	f108 0601 	add.w	r6, r8, #1
 800911c:	42b3      	cmp	r3, r6
 800911e:	db0b      	blt.n	8009138 <__lshift+0x38>
 8009120:	4638      	mov	r0, r7
 8009122:	f7ff fddf 	bl	8008ce4 <_Balloc>
 8009126:	4605      	mov	r5, r0
 8009128:	b948      	cbnz	r0, 800913e <__lshift+0x3e>
 800912a:	4602      	mov	r2, r0
 800912c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009130:	4b29      	ldr	r3, [pc, #164]	; (80091d8 <__lshift+0xd8>)
 8009132:	482a      	ldr	r0, [pc, #168]	; (80091dc <__lshift+0xdc>)
 8009134:	f000 fc7a 	bl	8009a2c <__assert_func>
 8009138:	3101      	adds	r1, #1
 800913a:	005b      	lsls	r3, r3, #1
 800913c:	e7ee      	b.n	800911c <__lshift+0x1c>
 800913e:	2300      	movs	r3, #0
 8009140:	f100 0114 	add.w	r1, r0, #20
 8009144:	f100 0210 	add.w	r2, r0, #16
 8009148:	4618      	mov	r0, r3
 800914a:	4553      	cmp	r3, sl
 800914c:	db37      	blt.n	80091be <__lshift+0xbe>
 800914e:	6920      	ldr	r0, [r4, #16]
 8009150:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009154:	f104 0314 	add.w	r3, r4, #20
 8009158:	f019 091f 	ands.w	r9, r9, #31
 800915c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009160:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009164:	d02f      	beq.n	80091c6 <__lshift+0xc6>
 8009166:	468a      	mov	sl, r1
 8009168:	f04f 0c00 	mov.w	ip, #0
 800916c:	f1c9 0e20 	rsb	lr, r9, #32
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	fa02 f209 	lsl.w	r2, r2, r9
 8009176:	ea42 020c 	orr.w	r2, r2, ip
 800917a:	f84a 2b04 	str.w	r2, [sl], #4
 800917e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009182:	4298      	cmp	r0, r3
 8009184:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009188:	d8f2      	bhi.n	8009170 <__lshift+0x70>
 800918a:	1b03      	subs	r3, r0, r4
 800918c:	3b15      	subs	r3, #21
 800918e:	f023 0303 	bic.w	r3, r3, #3
 8009192:	3304      	adds	r3, #4
 8009194:	f104 0215 	add.w	r2, r4, #21
 8009198:	4290      	cmp	r0, r2
 800919a:	bf38      	it	cc
 800919c:	2304      	movcc	r3, #4
 800919e:	f841 c003 	str.w	ip, [r1, r3]
 80091a2:	f1bc 0f00 	cmp.w	ip, #0
 80091a6:	d001      	beq.n	80091ac <__lshift+0xac>
 80091a8:	f108 0602 	add.w	r6, r8, #2
 80091ac:	3e01      	subs	r6, #1
 80091ae:	4638      	mov	r0, r7
 80091b0:	4621      	mov	r1, r4
 80091b2:	612e      	str	r6, [r5, #16]
 80091b4:	f7ff fdd6 	bl	8008d64 <_Bfree>
 80091b8:	4628      	mov	r0, r5
 80091ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091be:	f842 0f04 	str.w	r0, [r2, #4]!
 80091c2:	3301      	adds	r3, #1
 80091c4:	e7c1      	b.n	800914a <__lshift+0x4a>
 80091c6:	3904      	subs	r1, #4
 80091c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80091cc:	4298      	cmp	r0, r3
 80091ce:	f841 2f04 	str.w	r2, [r1, #4]!
 80091d2:	d8f9      	bhi.n	80091c8 <__lshift+0xc8>
 80091d4:	e7ea      	b.n	80091ac <__lshift+0xac>
 80091d6:	bf00      	nop
 80091d8:	08009ecf 	.word	0x08009ecf
 80091dc:	08009ee0 	.word	0x08009ee0

080091e0 <__mcmp>:
 80091e0:	4603      	mov	r3, r0
 80091e2:	690a      	ldr	r2, [r1, #16]
 80091e4:	6900      	ldr	r0, [r0, #16]
 80091e6:	b530      	push	{r4, r5, lr}
 80091e8:	1a80      	subs	r0, r0, r2
 80091ea:	d10d      	bne.n	8009208 <__mcmp+0x28>
 80091ec:	3314      	adds	r3, #20
 80091ee:	3114      	adds	r1, #20
 80091f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80091f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80091f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80091fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009200:	4295      	cmp	r5, r2
 8009202:	d002      	beq.n	800920a <__mcmp+0x2a>
 8009204:	d304      	bcc.n	8009210 <__mcmp+0x30>
 8009206:	2001      	movs	r0, #1
 8009208:	bd30      	pop	{r4, r5, pc}
 800920a:	42a3      	cmp	r3, r4
 800920c:	d3f4      	bcc.n	80091f8 <__mcmp+0x18>
 800920e:	e7fb      	b.n	8009208 <__mcmp+0x28>
 8009210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009214:	e7f8      	b.n	8009208 <__mcmp+0x28>
	...

08009218 <__mdiff>:
 8009218:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800921c:	460d      	mov	r5, r1
 800921e:	4607      	mov	r7, r0
 8009220:	4611      	mov	r1, r2
 8009222:	4628      	mov	r0, r5
 8009224:	4614      	mov	r4, r2
 8009226:	f7ff ffdb 	bl	80091e0 <__mcmp>
 800922a:	1e06      	subs	r6, r0, #0
 800922c:	d111      	bne.n	8009252 <__mdiff+0x3a>
 800922e:	4631      	mov	r1, r6
 8009230:	4638      	mov	r0, r7
 8009232:	f7ff fd57 	bl	8008ce4 <_Balloc>
 8009236:	4602      	mov	r2, r0
 8009238:	b928      	cbnz	r0, 8009246 <__mdiff+0x2e>
 800923a:	f240 2132 	movw	r1, #562	; 0x232
 800923e:	4b3a      	ldr	r3, [pc, #232]	; (8009328 <__mdiff+0x110>)
 8009240:	483a      	ldr	r0, [pc, #232]	; (800932c <__mdiff+0x114>)
 8009242:	f000 fbf3 	bl	8009a2c <__assert_func>
 8009246:	2301      	movs	r3, #1
 8009248:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800924c:	4610      	mov	r0, r2
 800924e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009252:	bfa4      	itt	ge
 8009254:	4623      	movge	r3, r4
 8009256:	462c      	movge	r4, r5
 8009258:	4638      	mov	r0, r7
 800925a:	6861      	ldr	r1, [r4, #4]
 800925c:	bfa6      	itte	ge
 800925e:	461d      	movge	r5, r3
 8009260:	2600      	movge	r6, #0
 8009262:	2601      	movlt	r6, #1
 8009264:	f7ff fd3e 	bl	8008ce4 <_Balloc>
 8009268:	4602      	mov	r2, r0
 800926a:	b918      	cbnz	r0, 8009274 <__mdiff+0x5c>
 800926c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009270:	4b2d      	ldr	r3, [pc, #180]	; (8009328 <__mdiff+0x110>)
 8009272:	e7e5      	b.n	8009240 <__mdiff+0x28>
 8009274:	f102 0814 	add.w	r8, r2, #20
 8009278:	46c2      	mov	sl, r8
 800927a:	f04f 0c00 	mov.w	ip, #0
 800927e:	6927      	ldr	r7, [r4, #16]
 8009280:	60c6      	str	r6, [r0, #12]
 8009282:	692e      	ldr	r6, [r5, #16]
 8009284:	f104 0014 	add.w	r0, r4, #20
 8009288:	f105 0914 	add.w	r9, r5, #20
 800928c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009290:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009294:	3410      	adds	r4, #16
 8009296:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800929a:	f859 3b04 	ldr.w	r3, [r9], #4
 800929e:	fa1f f18b 	uxth.w	r1, fp
 80092a2:	448c      	add	ip, r1
 80092a4:	b299      	uxth	r1, r3
 80092a6:	0c1b      	lsrs	r3, r3, #16
 80092a8:	ebac 0101 	sub.w	r1, ip, r1
 80092ac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80092b0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80092b4:	b289      	uxth	r1, r1
 80092b6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80092ba:	454e      	cmp	r6, r9
 80092bc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80092c0:	f84a 3b04 	str.w	r3, [sl], #4
 80092c4:	d8e7      	bhi.n	8009296 <__mdiff+0x7e>
 80092c6:	1b73      	subs	r3, r6, r5
 80092c8:	3b15      	subs	r3, #21
 80092ca:	f023 0303 	bic.w	r3, r3, #3
 80092ce:	3515      	adds	r5, #21
 80092d0:	3304      	adds	r3, #4
 80092d2:	42ae      	cmp	r6, r5
 80092d4:	bf38      	it	cc
 80092d6:	2304      	movcc	r3, #4
 80092d8:	4418      	add	r0, r3
 80092da:	4443      	add	r3, r8
 80092dc:	461e      	mov	r6, r3
 80092de:	4605      	mov	r5, r0
 80092e0:	4575      	cmp	r5, lr
 80092e2:	d30e      	bcc.n	8009302 <__mdiff+0xea>
 80092e4:	f10e 0103 	add.w	r1, lr, #3
 80092e8:	1a09      	subs	r1, r1, r0
 80092ea:	f021 0103 	bic.w	r1, r1, #3
 80092ee:	3803      	subs	r0, #3
 80092f0:	4586      	cmp	lr, r0
 80092f2:	bf38      	it	cc
 80092f4:	2100      	movcc	r1, #0
 80092f6:	4419      	add	r1, r3
 80092f8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80092fc:	b18b      	cbz	r3, 8009322 <__mdiff+0x10a>
 80092fe:	6117      	str	r7, [r2, #16]
 8009300:	e7a4      	b.n	800924c <__mdiff+0x34>
 8009302:	f855 8b04 	ldr.w	r8, [r5], #4
 8009306:	fa1f f188 	uxth.w	r1, r8
 800930a:	4461      	add	r1, ip
 800930c:	140c      	asrs	r4, r1, #16
 800930e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009312:	b289      	uxth	r1, r1
 8009314:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009318:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800931c:	f846 1b04 	str.w	r1, [r6], #4
 8009320:	e7de      	b.n	80092e0 <__mdiff+0xc8>
 8009322:	3f01      	subs	r7, #1
 8009324:	e7e8      	b.n	80092f8 <__mdiff+0xe0>
 8009326:	bf00      	nop
 8009328:	08009ecf 	.word	0x08009ecf
 800932c:	08009ee0 	.word	0x08009ee0

08009330 <__d2b>:
 8009330:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009334:	2101      	movs	r1, #1
 8009336:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800933a:	4690      	mov	r8, r2
 800933c:	461d      	mov	r5, r3
 800933e:	f7ff fcd1 	bl	8008ce4 <_Balloc>
 8009342:	4604      	mov	r4, r0
 8009344:	b930      	cbnz	r0, 8009354 <__d2b+0x24>
 8009346:	4602      	mov	r2, r0
 8009348:	f240 310a 	movw	r1, #778	; 0x30a
 800934c:	4b24      	ldr	r3, [pc, #144]	; (80093e0 <__d2b+0xb0>)
 800934e:	4825      	ldr	r0, [pc, #148]	; (80093e4 <__d2b+0xb4>)
 8009350:	f000 fb6c 	bl	8009a2c <__assert_func>
 8009354:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009358:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800935c:	bb2d      	cbnz	r5, 80093aa <__d2b+0x7a>
 800935e:	9301      	str	r3, [sp, #4]
 8009360:	f1b8 0300 	subs.w	r3, r8, #0
 8009364:	d026      	beq.n	80093b4 <__d2b+0x84>
 8009366:	4668      	mov	r0, sp
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	f7ff fd83 	bl	8008e74 <__lo0bits>
 800936e:	9900      	ldr	r1, [sp, #0]
 8009370:	b1f0      	cbz	r0, 80093b0 <__d2b+0x80>
 8009372:	9a01      	ldr	r2, [sp, #4]
 8009374:	f1c0 0320 	rsb	r3, r0, #32
 8009378:	fa02 f303 	lsl.w	r3, r2, r3
 800937c:	430b      	orrs	r3, r1
 800937e:	40c2      	lsrs	r2, r0
 8009380:	6163      	str	r3, [r4, #20]
 8009382:	9201      	str	r2, [sp, #4]
 8009384:	9b01      	ldr	r3, [sp, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	bf14      	ite	ne
 800938a:	2102      	movne	r1, #2
 800938c:	2101      	moveq	r1, #1
 800938e:	61a3      	str	r3, [r4, #24]
 8009390:	6121      	str	r1, [r4, #16]
 8009392:	b1c5      	cbz	r5, 80093c6 <__d2b+0x96>
 8009394:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009398:	4405      	add	r5, r0
 800939a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800939e:	603d      	str	r5, [r7, #0]
 80093a0:	6030      	str	r0, [r6, #0]
 80093a2:	4620      	mov	r0, r4
 80093a4:	b002      	add	sp, #8
 80093a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093ae:	e7d6      	b.n	800935e <__d2b+0x2e>
 80093b0:	6161      	str	r1, [r4, #20]
 80093b2:	e7e7      	b.n	8009384 <__d2b+0x54>
 80093b4:	a801      	add	r0, sp, #4
 80093b6:	f7ff fd5d 	bl	8008e74 <__lo0bits>
 80093ba:	2101      	movs	r1, #1
 80093bc:	9b01      	ldr	r3, [sp, #4]
 80093be:	6121      	str	r1, [r4, #16]
 80093c0:	6163      	str	r3, [r4, #20]
 80093c2:	3020      	adds	r0, #32
 80093c4:	e7e5      	b.n	8009392 <__d2b+0x62>
 80093c6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80093ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80093ce:	6038      	str	r0, [r7, #0]
 80093d0:	6918      	ldr	r0, [r3, #16]
 80093d2:	f7ff fd2f 	bl	8008e34 <__hi0bits>
 80093d6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80093da:	6031      	str	r1, [r6, #0]
 80093dc:	e7e1      	b.n	80093a2 <__d2b+0x72>
 80093de:	bf00      	nop
 80093e0:	08009ecf 	.word	0x08009ecf
 80093e4:	08009ee0 	.word	0x08009ee0

080093e8 <_calloc_r>:
 80093e8:	b570      	push	{r4, r5, r6, lr}
 80093ea:	fba1 5402 	umull	r5, r4, r1, r2
 80093ee:	b934      	cbnz	r4, 80093fe <_calloc_r+0x16>
 80093f0:	4629      	mov	r1, r5
 80093f2:	f7fd fd7f 	bl	8006ef4 <_malloc_r>
 80093f6:	4606      	mov	r6, r0
 80093f8:	b928      	cbnz	r0, 8009406 <_calloc_r+0x1e>
 80093fa:	4630      	mov	r0, r6
 80093fc:	bd70      	pop	{r4, r5, r6, pc}
 80093fe:	220c      	movs	r2, #12
 8009400:	2600      	movs	r6, #0
 8009402:	6002      	str	r2, [r0, #0]
 8009404:	e7f9      	b.n	80093fa <_calloc_r+0x12>
 8009406:	462a      	mov	r2, r5
 8009408:	4621      	mov	r1, r4
 800940a:	f7fd fd4a 	bl	8006ea2 <memset>
 800940e:	e7f4      	b.n	80093fa <_calloc_r+0x12>

08009410 <_free_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	4605      	mov	r5, r0
 8009414:	2900      	cmp	r1, #0
 8009416:	d040      	beq.n	800949a <_free_r+0x8a>
 8009418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800941c:	1f0c      	subs	r4, r1, #4
 800941e:	2b00      	cmp	r3, #0
 8009420:	bfb8      	it	lt
 8009422:	18e4      	addlt	r4, r4, r3
 8009424:	f7ff fc52 	bl	8008ccc <__malloc_lock>
 8009428:	4a1c      	ldr	r2, [pc, #112]	; (800949c <_free_r+0x8c>)
 800942a:	6813      	ldr	r3, [r2, #0]
 800942c:	b933      	cbnz	r3, 800943c <_free_r+0x2c>
 800942e:	6063      	str	r3, [r4, #4]
 8009430:	6014      	str	r4, [r2, #0]
 8009432:	4628      	mov	r0, r5
 8009434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009438:	f7ff bc4e 	b.w	8008cd8 <__malloc_unlock>
 800943c:	42a3      	cmp	r3, r4
 800943e:	d908      	bls.n	8009452 <_free_r+0x42>
 8009440:	6820      	ldr	r0, [r4, #0]
 8009442:	1821      	adds	r1, r4, r0
 8009444:	428b      	cmp	r3, r1
 8009446:	bf01      	itttt	eq
 8009448:	6819      	ldreq	r1, [r3, #0]
 800944a:	685b      	ldreq	r3, [r3, #4]
 800944c:	1809      	addeq	r1, r1, r0
 800944e:	6021      	streq	r1, [r4, #0]
 8009450:	e7ed      	b.n	800942e <_free_r+0x1e>
 8009452:	461a      	mov	r2, r3
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	b10b      	cbz	r3, 800945c <_free_r+0x4c>
 8009458:	42a3      	cmp	r3, r4
 800945a:	d9fa      	bls.n	8009452 <_free_r+0x42>
 800945c:	6811      	ldr	r1, [r2, #0]
 800945e:	1850      	adds	r0, r2, r1
 8009460:	42a0      	cmp	r0, r4
 8009462:	d10b      	bne.n	800947c <_free_r+0x6c>
 8009464:	6820      	ldr	r0, [r4, #0]
 8009466:	4401      	add	r1, r0
 8009468:	1850      	adds	r0, r2, r1
 800946a:	4283      	cmp	r3, r0
 800946c:	6011      	str	r1, [r2, #0]
 800946e:	d1e0      	bne.n	8009432 <_free_r+0x22>
 8009470:	6818      	ldr	r0, [r3, #0]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	4401      	add	r1, r0
 8009476:	6011      	str	r1, [r2, #0]
 8009478:	6053      	str	r3, [r2, #4]
 800947a:	e7da      	b.n	8009432 <_free_r+0x22>
 800947c:	d902      	bls.n	8009484 <_free_r+0x74>
 800947e:	230c      	movs	r3, #12
 8009480:	602b      	str	r3, [r5, #0]
 8009482:	e7d6      	b.n	8009432 <_free_r+0x22>
 8009484:	6820      	ldr	r0, [r4, #0]
 8009486:	1821      	adds	r1, r4, r0
 8009488:	428b      	cmp	r3, r1
 800948a:	bf01      	itttt	eq
 800948c:	6819      	ldreq	r1, [r3, #0]
 800948e:	685b      	ldreq	r3, [r3, #4]
 8009490:	1809      	addeq	r1, r1, r0
 8009492:	6021      	streq	r1, [r4, #0]
 8009494:	6063      	str	r3, [r4, #4]
 8009496:	6054      	str	r4, [r2, #4]
 8009498:	e7cb      	b.n	8009432 <_free_r+0x22>
 800949a:	bd38      	pop	{r3, r4, r5, pc}
 800949c:	200013ec 	.word	0x200013ec

080094a0 <__ssputs_r>:
 80094a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094a4:	688e      	ldr	r6, [r1, #8]
 80094a6:	4682      	mov	sl, r0
 80094a8:	429e      	cmp	r6, r3
 80094aa:	460c      	mov	r4, r1
 80094ac:	4690      	mov	r8, r2
 80094ae:	461f      	mov	r7, r3
 80094b0:	d838      	bhi.n	8009524 <__ssputs_r+0x84>
 80094b2:	898a      	ldrh	r2, [r1, #12]
 80094b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094b8:	d032      	beq.n	8009520 <__ssputs_r+0x80>
 80094ba:	6825      	ldr	r5, [r4, #0]
 80094bc:	6909      	ldr	r1, [r1, #16]
 80094be:	3301      	adds	r3, #1
 80094c0:	eba5 0901 	sub.w	r9, r5, r1
 80094c4:	6965      	ldr	r5, [r4, #20]
 80094c6:	444b      	add	r3, r9
 80094c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094d0:	106d      	asrs	r5, r5, #1
 80094d2:	429d      	cmp	r5, r3
 80094d4:	bf38      	it	cc
 80094d6:	461d      	movcc	r5, r3
 80094d8:	0553      	lsls	r3, r2, #21
 80094da:	d531      	bpl.n	8009540 <__ssputs_r+0xa0>
 80094dc:	4629      	mov	r1, r5
 80094de:	f7fd fd09 	bl	8006ef4 <_malloc_r>
 80094e2:	4606      	mov	r6, r0
 80094e4:	b950      	cbnz	r0, 80094fc <__ssputs_r+0x5c>
 80094e6:	230c      	movs	r3, #12
 80094e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094ec:	f8ca 3000 	str.w	r3, [sl]
 80094f0:	89a3      	ldrh	r3, [r4, #12]
 80094f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094f6:	81a3      	strh	r3, [r4, #12]
 80094f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094fc:	464a      	mov	r2, r9
 80094fe:	6921      	ldr	r1, [r4, #16]
 8009500:	f7fd fcc1 	bl	8006e86 <memcpy>
 8009504:	89a3      	ldrh	r3, [r4, #12]
 8009506:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800950a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800950e:	81a3      	strh	r3, [r4, #12]
 8009510:	6126      	str	r6, [r4, #16]
 8009512:	444e      	add	r6, r9
 8009514:	6026      	str	r6, [r4, #0]
 8009516:	463e      	mov	r6, r7
 8009518:	6165      	str	r5, [r4, #20]
 800951a:	eba5 0509 	sub.w	r5, r5, r9
 800951e:	60a5      	str	r5, [r4, #8]
 8009520:	42be      	cmp	r6, r7
 8009522:	d900      	bls.n	8009526 <__ssputs_r+0x86>
 8009524:	463e      	mov	r6, r7
 8009526:	4632      	mov	r2, r6
 8009528:	4641      	mov	r1, r8
 800952a:	6820      	ldr	r0, [r4, #0]
 800952c:	f000 fae2 	bl	8009af4 <memmove>
 8009530:	68a3      	ldr	r3, [r4, #8]
 8009532:	2000      	movs	r0, #0
 8009534:	1b9b      	subs	r3, r3, r6
 8009536:	60a3      	str	r3, [r4, #8]
 8009538:	6823      	ldr	r3, [r4, #0]
 800953a:	4433      	add	r3, r6
 800953c:	6023      	str	r3, [r4, #0]
 800953e:	e7db      	b.n	80094f8 <__ssputs_r+0x58>
 8009540:	462a      	mov	r2, r5
 8009542:	f000 faf1 	bl	8009b28 <_realloc_r>
 8009546:	4606      	mov	r6, r0
 8009548:	2800      	cmp	r0, #0
 800954a:	d1e1      	bne.n	8009510 <__ssputs_r+0x70>
 800954c:	4650      	mov	r0, sl
 800954e:	6921      	ldr	r1, [r4, #16]
 8009550:	f7ff ff5e 	bl	8009410 <_free_r>
 8009554:	e7c7      	b.n	80094e6 <__ssputs_r+0x46>
	...

08009558 <_svfiprintf_r>:
 8009558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955c:	4698      	mov	r8, r3
 800955e:	898b      	ldrh	r3, [r1, #12]
 8009560:	4607      	mov	r7, r0
 8009562:	061b      	lsls	r3, r3, #24
 8009564:	460d      	mov	r5, r1
 8009566:	4614      	mov	r4, r2
 8009568:	b09d      	sub	sp, #116	; 0x74
 800956a:	d50e      	bpl.n	800958a <_svfiprintf_r+0x32>
 800956c:	690b      	ldr	r3, [r1, #16]
 800956e:	b963      	cbnz	r3, 800958a <_svfiprintf_r+0x32>
 8009570:	2140      	movs	r1, #64	; 0x40
 8009572:	f7fd fcbf 	bl	8006ef4 <_malloc_r>
 8009576:	6028      	str	r0, [r5, #0]
 8009578:	6128      	str	r0, [r5, #16]
 800957a:	b920      	cbnz	r0, 8009586 <_svfiprintf_r+0x2e>
 800957c:	230c      	movs	r3, #12
 800957e:	603b      	str	r3, [r7, #0]
 8009580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009584:	e0d1      	b.n	800972a <_svfiprintf_r+0x1d2>
 8009586:	2340      	movs	r3, #64	; 0x40
 8009588:	616b      	str	r3, [r5, #20]
 800958a:	2300      	movs	r3, #0
 800958c:	9309      	str	r3, [sp, #36]	; 0x24
 800958e:	2320      	movs	r3, #32
 8009590:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009594:	2330      	movs	r3, #48	; 0x30
 8009596:	f04f 0901 	mov.w	r9, #1
 800959a:	f8cd 800c 	str.w	r8, [sp, #12]
 800959e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009744 <_svfiprintf_r+0x1ec>
 80095a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095a6:	4623      	mov	r3, r4
 80095a8:	469a      	mov	sl, r3
 80095aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095ae:	b10a      	cbz	r2, 80095b4 <_svfiprintf_r+0x5c>
 80095b0:	2a25      	cmp	r2, #37	; 0x25
 80095b2:	d1f9      	bne.n	80095a8 <_svfiprintf_r+0x50>
 80095b4:	ebba 0b04 	subs.w	fp, sl, r4
 80095b8:	d00b      	beq.n	80095d2 <_svfiprintf_r+0x7a>
 80095ba:	465b      	mov	r3, fp
 80095bc:	4622      	mov	r2, r4
 80095be:	4629      	mov	r1, r5
 80095c0:	4638      	mov	r0, r7
 80095c2:	f7ff ff6d 	bl	80094a0 <__ssputs_r>
 80095c6:	3001      	adds	r0, #1
 80095c8:	f000 80aa 	beq.w	8009720 <_svfiprintf_r+0x1c8>
 80095cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095ce:	445a      	add	r2, fp
 80095d0:	9209      	str	r2, [sp, #36]	; 0x24
 80095d2:	f89a 3000 	ldrb.w	r3, [sl]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f000 80a2 	beq.w	8009720 <_svfiprintf_r+0x1c8>
 80095dc:	2300      	movs	r3, #0
 80095de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095e6:	f10a 0a01 	add.w	sl, sl, #1
 80095ea:	9304      	str	r3, [sp, #16]
 80095ec:	9307      	str	r3, [sp, #28]
 80095ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095f2:	931a      	str	r3, [sp, #104]	; 0x68
 80095f4:	4654      	mov	r4, sl
 80095f6:	2205      	movs	r2, #5
 80095f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095fc:	4851      	ldr	r0, [pc, #324]	; (8009744 <_svfiprintf_r+0x1ec>)
 80095fe:	f7ff fb57 	bl	8008cb0 <memchr>
 8009602:	9a04      	ldr	r2, [sp, #16]
 8009604:	b9d8      	cbnz	r0, 800963e <_svfiprintf_r+0xe6>
 8009606:	06d0      	lsls	r0, r2, #27
 8009608:	bf44      	itt	mi
 800960a:	2320      	movmi	r3, #32
 800960c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009610:	0711      	lsls	r1, r2, #28
 8009612:	bf44      	itt	mi
 8009614:	232b      	movmi	r3, #43	; 0x2b
 8009616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800961a:	f89a 3000 	ldrb.w	r3, [sl]
 800961e:	2b2a      	cmp	r3, #42	; 0x2a
 8009620:	d015      	beq.n	800964e <_svfiprintf_r+0xf6>
 8009622:	4654      	mov	r4, sl
 8009624:	2000      	movs	r0, #0
 8009626:	f04f 0c0a 	mov.w	ip, #10
 800962a:	9a07      	ldr	r2, [sp, #28]
 800962c:	4621      	mov	r1, r4
 800962e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009632:	3b30      	subs	r3, #48	; 0x30
 8009634:	2b09      	cmp	r3, #9
 8009636:	d94e      	bls.n	80096d6 <_svfiprintf_r+0x17e>
 8009638:	b1b0      	cbz	r0, 8009668 <_svfiprintf_r+0x110>
 800963a:	9207      	str	r2, [sp, #28]
 800963c:	e014      	b.n	8009668 <_svfiprintf_r+0x110>
 800963e:	eba0 0308 	sub.w	r3, r0, r8
 8009642:	fa09 f303 	lsl.w	r3, r9, r3
 8009646:	4313      	orrs	r3, r2
 8009648:	46a2      	mov	sl, r4
 800964a:	9304      	str	r3, [sp, #16]
 800964c:	e7d2      	b.n	80095f4 <_svfiprintf_r+0x9c>
 800964e:	9b03      	ldr	r3, [sp, #12]
 8009650:	1d19      	adds	r1, r3, #4
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	9103      	str	r1, [sp, #12]
 8009656:	2b00      	cmp	r3, #0
 8009658:	bfbb      	ittet	lt
 800965a:	425b      	neglt	r3, r3
 800965c:	f042 0202 	orrlt.w	r2, r2, #2
 8009660:	9307      	strge	r3, [sp, #28]
 8009662:	9307      	strlt	r3, [sp, #28]
 8009664:	bfb8      	it	lt
 8009666:	9204      	strlt	r2, [sp, #16]
 8009668:	7823      	ldrb	r3, [r4, #0]
 800966a:	2b2e      	cmp	r3, #46	; 0x2e
 800966c:	d10c      	bne.n	8009688 <_svfiprintf_r+0x130>
 800966e:	7863      	ldrb	r3, [r4, #1]
 8009670:	2b2a      	cmp	r3, #42	; 0x2a
 8009672:	d135      	bne.n	80096e0 <_svfiprintf_r+0x188>
 8009674:	9b03      	ldr	r3, [sp, #12]
 8009676:	3402      	adds	r4, #2
 8009678:	1d1a      	adds	r2, r3, #4
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	9203      	str	r2, [sp, #12]
 800967e:	2b00      	cmp	r3, #0
 8009680:	bfb8      	it	lt
 8009682:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009686:	9305      	str	r3, [sp, #20]
 8009688:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009748 <_svfiprintf_r+0x1f0>
 800968c:	2203      	movs	r2, #3
 800968e:	4650      	mov	r0, sl
 8009690:	7821      	ldrb	r1, [r4, #0]
 8009692:	f7ff fb0d 	bl	8008cb0 <memchr>
 8009696:	b140      	cbz	r0, 80096aa <_svfiprintf_r+0x152>
 8009698:	2340      	movs	r3, #64	; 0x40
 800969a:	eba0 000a 	sub.w	r0, r0, sl
 800969e:	fa03 f000 	lsl.w	r0, r3, r0
 80096a2:	9b04      	ldr	r3, [sp, #16]
 80096a4:	3401      	adds	r4, #1
 80096a6:	4303      	orrs	r3, r0
 80096a8:	9304      	str	r3, [sp, #16]
 80096aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ae:	2206      	movs	r2, #6
 80096b0:	4826      	ldr	r0, [pc, #152]	; (800974c <_svfiprintf_r+0x1f4>)
 80096b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096b6:	f7ff fafb 	bl	8008cb0 <memchr>
 80096ba:	2800      	cmp	r0, #0
 80096bc:	d038      	beq.n	8009730 <_svfiprintf_r+0x1d8>
 80096be:	4b24      	ldr	r3, [pc, #144]	; (8009750 <_svfiprintf_r+0x1f8>)
 80096c0:	bb1b      	cbnz	r3, 800970a <_svfiprintf_r+0x1b2>
 80096c2:	9b03      	ldr	r3, [sp, #12]
 80096c4:	3307      	adds	r3, #7
 80096c6:	f023 0307 	bic.w	r3, r3, #7
 80096ca:	3308      	adds	r3, #8
 80096cc:	9303      	str	r3, [sp, #12]
 80096ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d0:	4433      	add	r3, r6
 80096d2:	9309      	str	r3, [sp, #36]	; 0x24
 80096d4:	e767      	b.n	80095a6 <_svfiprintf_r+0x4e>
 80096d6:	460c      	mov	r4, r1
 80096d8:	2001      	movs	r0, #1
 80096da:	fb0c 3202 	mla	r2, ip, r2, r3
 80096de:	e7a5      	b.n	800962c <_svfiprintf_r+0xd4>
 80096e0:	2300      	movs	r3, #0
 80096e2:	f04f 0c0a 	mov.w	ip, #10
 80096e6:	4619      	mov	r1, r3
 80096e8:	3401      	adds	r4, #1
 80096ea:	9305      	str	r3, [sp, #20]
 80096ec:	4620      	mov	r0, r4
 80096ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096f2:	3a30      	subs	r2, #48	; 0x30
 80096f4:	2a09      	cmp	r2, #9
 80096f6:	d903      	bls.n	8009700 <_svfiprintf_r+0x1a8>
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d0c5      	beq.n	8009688 <_svfiprintf_r+0x130>
 80096fc:	9105      	str	r1, [sp, #20]
 80096fe:	e7c3      	b.n	8009688 <_svfiprintf_r+0x130>
 8009700:	4604      	mov	r4, r0
 8009702:	2301      	movs	r3, #1
 8009704:	fb0c 2101 	mla	r1, ip, r1, r2
 8009708:	e7f0      	b.n	80096ec <_svfiprintf_r+0x194>
 800970a:	ab03      	add	r3, sp, #12
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	462a      	mov	r2, r5
 8009710:	4638      	mov	r0, r7
 8009712:	4b10      	ldr	r3, [pc, #64]	; (8009754 <_svfiprintf_r+0x1fc>)
 8009714:	a904      	add	r1, sp, #16
 8009716:	f7fd fcff 	bl	8007118 <_printf_float>
 800971a:	1c42      	adds	r2, r0, #1
 800971c:	4606      	mov	r6, r0
 800971e:	d1d6      	bne.n	80096ce <_svfiprintf_r+0x176>
 8009720:	89ab      	ldrh	r3, [r5, #12]
 8009722:	065b      	lsls	r3, r3, #25
 8009724:	f53f af2c 	bmi.w	8009580 <_svfiprintf_r+0x28>
 8009728:	9809      	ldr	r0, [sp, #36]	; 0x24
 800972a:	b01d      	add	sp, #116	; 0x74
 800972c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009730:	ab03      	add	r3, sp, #12
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	462a      	mov	r2, r5
 8009736:	4638      	mov	r0, r7
 8009738:	4b06      	ldr	r3, [pc, #24]	; (8009754 <_svfiprintf_r+0x1fc>)
 800973a:	a904      	add	r1, sp, #16
 800973c:	f7fd ff88 	bl	8007650 <_printf_i>
 8009740:	e7eb      	b.n	800971a <_svfiprintf_r+0x1c2>
 8009742:	bf00      	nop
 8009744:	0800a03c 	.word	0x0800a03c
 8009748:	0800a042 	.word	0x0800a042
 800974c:	0800a046 	.word	0x0800a046
 8009750:	08007119 	.word	0x08007119
 8009754:	080094a1 	.word	0x080094a1

08009758 <__sfputc_r>:
 8009758:	6893      	ldr	r3, [r2, #8]
 800975a:	b410      	push	{r4}
 800975c:	3b01      	subs	r3, #1
 800975e:	2b00      	cmp	r3, #0
 8009760:	6093      	str	r3, [r2, #8]
 8009762:	da07      	bge.n	8009774 <__sfputc_r+0x1c>
 8009764:	6994      	ldr	r4, [r2, #24]
 8009766:	42a3      	cmp	r3, r4
 8009768:	db01      	blt.n	800976e <__sfputc_r+0x16>
 800976a:	290a      	cmp	r1, #10
 800976c:	d102      	bne.n	8009774 <__sfputc_r+0x1c>
 800976e:	bc10      	pop	{r4}
 8009770:	f7fe ba00 	b.w	8007b74 <__swbuf_r>
 8009774:	6813      	ldr	r3, [r2, #0]
 8009776:	1c58      	adds	r0, r3, #1
 8009778:	6010      	str	r0, [r2, #0]
 800977a:	7019      	strb	r1, [r3, #0]
 800977c:	4608      	mov	r0, r1
 800977e:	bc10      	pop	{r4}
 8009780:	4770      	bx	lr

08009782 <__sfputs_r>:
 8009782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009784:	4606      	mov	r6, r0
 8009786:	460f      	mov	r7, r1
 8009788:	4614      	mov	r4, r2
 800978a:	18d5      	adds	r5, r2, r3
 800978c:	42ac      	cmp	r4, r5
 800978e:	d101      	bne.n	8009794 <__sfputs_r+0x12>
 8009790:	2000      	movs	r0, #0
 8009792:	e007      	b.n	80097a4 <__sfputs_r+0x22>
 8009794:	463a      	mov	r2, r7
 8009796:	4630      	mov	r0, r6
 8009798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800979c:	f7ff ffdc 	bl	8009758 <__sfputc_r>
 80097a0:	1c43      	adds	r3, r0, #1
 80097a2:	d1f3      	bne.n	800978c <__sfputs_r+0xa>
 80097a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097a8 <_vfiprintf_r>:
 80097a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ac:	460d      	mov	r5, r1
 80097ae:	4614      	mov	r4, r2
 80097b0:	4698      	mov	r8, r3
 80097b2:	4606      	mov	r6, r0
 80097b4:	b09d      	sub	sp, #116	; 0x74
 80097b6:	b118      	cbz	r0, 80097c0 <_vfiprintf_r+0x18>
 80097b8:	6983      	ldr	r3, [r0, #24]
 80097ba:	b90b      	cbnz	r3, 80097c0 <_vfiprintf_r+0x18>
 80097bc:	f7fd fa9e 	bl	8006cfc <__sinit>
 80097c0:	4b89      	ldr	r3, [pc, #548]	; (80099e8 <_vfiprintf_r+0x240>)
 80097c2:	429d      	cmp	r5, r3
 80097c4:	d11b      	bne.n	80097fe <_vfiprintf_r+0x56>
 80097c6:	6875      	ldr	r5, [r6, #4]
 80097c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097ca:	07d9      	lsls	r1, r3, #31
 80097cc:	d405      	bmi.n	80097da <_vfiprintf_r+0x32>
 80097ce:	89ab      	ldrh	r3, [r5, #12]
 80097d0:	059a      	lsls	r2, r3, #22
 80097d2:	d402      	bmi.n	80097da <_vfiprintf_r+0x32>
 80097d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097d6:	f7fd fb54 	bl	8006e82 <__retarget_lock_acquire_recursive>
 80097da:	89ab      	ldrh	r3, [r5, #12]
 80097dc:	071b      	lsls	r3, r3, #28
 80097de:	d501      	bpl.n	80097e4 <_vfiprintf_r+0x3c>
 80097e0:	692b      	ldr	r3, [r5, #16]
 80097e2:	b9eb      	cbnz	r3, 8009820 <_vfiprintf_r+0x78>
 80097e4:	4629      	mov	r1, r5
 80097e6:	4630      	mov	r0, r6
 80097e8:	f7fe fa28 	bl	8007c3c <__swsetup_r>
 80097ec:	b1c0      	cbz	r0, 8009820 <_vfiprintf_r+0x78>
 80097ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097f0:	07dc      	lsls	r4, r3, #31
 80097f2:	d50e      	bpl.n	8009812 <_vfiprintf_r+0x6a>
 80097f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097f8:	b01d      	add	sp, #116	; 0x74
 80097fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097fe:	4b7b      	ldr	r3, [pc, #492]	; (80099ec <_vfiprintf_r+0x244>)
 8009800:	429d      	cmp	r5, r3
 8009802:	d101      	bne.n	8009808 <_vfiprintf_r+0x60>
 8009804:	68b5      	ldr	r5, [r6, #8]
 8009806:	e7df      	b.n	80097c8 <_vfiprintf_r+0x20>
 8009808:	4b79      	ldr	r3, [pc, #484]	; (80099f0 <_vfiprintf_r+0x248>)
 800980a:	429d      	cmp	r5, r3
 800980c:	bf08      	it	eq
 800980e:	68f5      	ldreq	r5, [r6, #12]
 8009810:	e7da      	b.n	80097c8 <_vfiprintf_r+0x20>
 8009812:	89ab      	ldrh	r3, [r5, #12]
 8009814:	0598      	lsls	r0, r3, #22
 8009816:	d4ed      	bmi.n	80097f4 <_vfiprintf_r+0x4c>
 8009818:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800981a:	f7fd fb33 	bl	8006e84 <__retarget_lock_release_recursive>
 800981e:	e7e9      	b.n	80097f4 <_vfiprintf_r+0x4c>
 8009820:	2300      	movs	r3, #0
 8009822:	9309      	str	r3, [sp, #36]	; 0x24
 8009824:	2320      	movs	r3, #32
 8009826:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800982a:	2330      	movs	r3, #48	; 0x30
 800982c:	f04f 0901 	mov.w	r9, #1
 8009830:	f8cd 800c 	str.w	r8, [sp, #12]
 8009834:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80099f4 <_vfiprintf_r+0x24c>
 8009838:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800983c:	4623      	mov	r3, r4
 800983e:	469a      	mov	sl, r3
 8009840:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009844:	b10a      	cbz	r2, 800984a <_vfiprintf_r+0xa2>
 8009846:	2a25      	cmp	r2, #37	; 0x25
 8009848:	d1f9      	bne.n	800983e <_vfiprintf_r+0x96>
 800984a:	ebba 0b04 	subs.w	fp, sl, r4
 800984e:	d00b      	beq.n	8009868 <_vfiprintf_r+0xc0>
 8009850:	465b      	mov	r3, fp
 8009852:	4622      	mov	r2, r4
 8009854:	4629      	mov	r1, r5
 8009856:	4630      	mov	r0, r6
 8009858:	f7ff ff93 	bl	8009782 <__sfputs_r>
 800985c:	3001      	adds	r0, #1
 800985e:	f000 80aa 	beq.w	80099b6 <_vfiprintf_r+0x20e>
 8009862:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009864:	445a      	add	r2, fp
 8009866:	9209      	str	r2, [sp, #36]	; 0x24
 8009868:	f89a 3000 	ldrb.w	r3, [sl]
 800986c:	2b00      	cmp	r3, #0
 800986e:	f000 80a2 	beq.w	80099b6 <_vfiprintf_r+0x20e>
 8009872:	2300      	movs	r3, #0
 8009874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009878:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800987c:	f10a 0a01 	add.w	sl, sl, #1
 8009880:	9304      	str	r3, [sp, #16]
 8009882:	9307      	str	r3, [sp, #28]
 8009884:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009888:	931a      	str	r3, [sp, #104]	; 0x68
 800988a:	4654      	mov	r4, sl
 800988c:	2205      	movs	r2, #5
 800988e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009892:	4858      	ldr	r0, [pc, #352]	; (80099f4 <_vfiprintf_r+0x24c>)
 8009894:	f7ff fa0c 	bl	8008cb0 <memchr>
 8009898:	9a04      	ldr	r2, [sp, #16]
 800989a:	b9d8      	cbnz	r0, 80098d4 <_vfiprintf_r+0x12c>
 800989c:	06d1      	lsls	r1, r2, #27
 800989e:	bf44      	itt	mi
 80098a0:	2320      	movmi	r3, #32
 80098a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098a6:	0713      	lsls	r3, r2, #28
 80098a8:	bf44      	itt	mi
 80098aa:	232b      	movmi	r3, #43	; 0x2b
 80098ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098b0:	f89a 3000 	ldrb.w	r3, [sl]
 80098b4:	2b2a      	cmp	r3, #42	; 0x2a
 80098b6:	d015      	beq.n	80098e4 <_vfiprintf_r+0x13c>
 80098b8:	4654      	mov	r4, sl
 80098ba:	2000      	movs	r0, #0
 80098bc:	f04f 0c0a 	mov.w	ip, #10
 80098c0:	9a07      	ldr	r2, [sp, #28]
 80098c2:	4621      	mov	r1, r4
 80098c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098c8:	3b30      	subs	r3, #48	; 0x30
 80098ca:	2b09      	cmp	r3, #9
 80098cc:	d94e      	bls.n	800996c <_vfiprintf_r+0x1c4>
 80098ce:	b1b0      	cbz	r0, 80098fe <_vfiprintf_r+0x156>
 80098d0:	9207      	str	r2, [sp, #28]
 80098d2:	e014      	b.n	80098fe <_vfiprintf_r+0x156>
 80098d4:	eba0 0308 	sub.w	r3, r0, r8
 80098d8:	fa09 f303 	lsl.w	r3, r9, r3
 80098dc:	4313      	orrs	r3, r2
 80098de:	46a2      	mov	sl, r4
 80098e0:	9304      	str	r3, [sp, #16]
 80098e2:	e7d2      	b.n	800988a <_vfiprintf_r+0xe2>
 80098e4:	9b03      	ldr	r3, [sp, #12]
 80098e6:	1d19      	adds	r1, r3, #4
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	9103      	str	r1, [sp, #12]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	bfbb      	ittet	lt
 80098f0:	425b      	neglt	r3, r3
 80098f2:	f042 0202 	orrlt.w	r2, r2, #2
 80098f6:	9307      	strge	r3, [sp, #28]
 80098f8:	9307      	strlt	r3, [sp, #28]
 80098fa:	bfb8      	it	lt
 80098fc:	9204      	strlt	r2, [sp, #16]
 80098fe:	7823      	ldrb	r3, [r4, #0]
 8009900:	2b2e      	cmp	r3, #46	; 0x2e
 8009902:	d10c      	bne.n	800991e <_vfiprintf_r+0x176>
 8009904:	7863      	ldrb	r3, [r4, #1]
 8009906:	2b2a      	cmp	r3, #42	; 0x2a
 8009908:	d135      	bne.n	8009976 <_vfiprintf_r+0x1ce>
 800990a:	9b03      	ldr	r3, [sp, #12]
 800990c:	3402      	adds	r4, #2
 800990e:	1d1a      	adds	r2, r3, #4
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	9203      	str	r2, [sp, #12]
 8009914:	2b00      	cmp	r3, #0
 8009916:	bfb8      	it	lt
 8009918:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800991c:	9305      	str	r3, [sp, #20]
 800991e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80099f8 <_vfiprintf_r+0x250>
 8009922:	2203      	movs	r2, #3
 8009924:	4650      	mov	r0, sl
 8009926:	7821      	ldrb	r1, [r4, #0]
 8009928:	f7ff f9c2 	bl	8008cb0 <memchr>
 800992c:	b140      	cbz	r0, 8009940 <_vfiprintf_r+0x198>
 800992e:	2340      	movs	r3, #64	; 0x40
 8009930:	eba0 000a 	sub.w	r0, r0, sl
 8009934:	fa03 f000 	lsl.w	r0, r3, r0
 8009938:	9b04      	ldr	r3, [sp, #16]
 800993a:	3401      	adds	r4, #1
 800993c:	4303      	orrs	r3, r0
 800993e:	9304      	str	r3, [sp, #16]
 8009940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009944:	2206      	movs	r2, #6
 8009946:	482d      	ldr	r0, [pc, #180]	; (80099fc <_vfiprintf_r+0x254>)
 8009948:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800994c:	f7ff f9b0 	bl	8008cb0 <memchr>
 8009950:	2800      	cmp	r0, #0
 8009952:	d03f      	beq.n	80099d4 <_vfiprintf_r+0x22c>
 8009954:	4b2a      	ldr	r3, [pc, #168]	; (8009a00 <_vfiprintf_r+0x258>)
 8009956:	bb1b      	cbnz	r3, 80099a0 <_vfiprintf_r+0x1f8>
 8009958:	9b03      	ldr	r3, [sp, #12]
 800995a:	3307      	adds	r3, #7
 800995c:	f023 0307 	bic.w	r3, r3, #7
 8009960:	3308      	adds	r3, #8
 8009962:	9303      	str	r3, [sp, #12]
 8009964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009966:	443b      	add	r3, r7
 8009968:	9309      	str	r3, [sp, #36]	; 0x24
 800996a:	e767      	b.n	800983c <_vfiprintf_r+0x94>
 800996c:	460c      	mov	r4, r1
 800996e:	2001      	movs	r0, #1
 8009970:	fb0c 3202 	mla	r2, ip, r2, r3
 8009974:	e7a5      	b.n	80098c2 <_vfiprintf_r+0x11a>
 8009976:	2300      	movs	r3, #0
 8009978:	f04f 0c0a 	mov.w	ip, #10
 800997c:	4619      	mov	r1, r3
 800997e:	3401      	adds	r4, #1
 8009980:	9305      	str	r3, [sp, #20]
 8009982:	4620      	mov	r0, r4
 8009984:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009988:	3a30      	subs	r2, #48	; 0x30
 800998a:	2a09      	cmp	r2, #9
 800998c:	d903      	bls.n	8009996 <_vfiprintf_r+0x1ee>
 800998e:	2b00      	cmp	r3, #0
 8009990:	d0c5      	beq.n	800991e <_vfiprintf_r+0x176>
 8009992:	9105      	str	r1, [sp, #20]
 8009994:	e7c3      	b.n	800991e <_vfiprintf_r+0x176>
 8009996:	4604      	mov	r4, r0
 8009998:	2301      	movs	r3, #1
 800999a:	fb0c 2101 	mla	r1, ip, r1, r2
 800999e:	e7f0      	b.n	8009982 <_vfiprintf_r+0x1da>
 80099a0:	ab03      	add	r3, sp, #12
 80099a2:	9300      	str	r3, [sp, #0]
 80099a4:	462a      	mov	r2, r5
 80099a6:	4630      	mov	r0, r6
 80099a8:	4b16      	ldr	r3, [pc, #88]	; (8009a04 <_vfiprintf_r+0x25c>)
 80099aa:	a904      	add	r1, sp, #16
 80099ac:	f7fd fbb4 	bl	8007118 <_printf_float>
 80099b0:	4607      	mov	r7, r0
 80099b2:	1c78      	adds	r0, r7, #1
 80099b4:	d1d6      	bne.n	8009964 <_vfiprintf_r+0x1bc>
 80099b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099b8:	07d9      	lsls	r1, r3, #31
 80099ba:	d405      	bmi.n	80099c8 <_vfiprintf_r+0x220>
 80099bc:	89ab      	ldrh	r3, [r5, #12]
 80099be:	059a      	lsls	r2, r3, #22
 80099c0:	d402      	bmi.n	80099c8 <_vfiprintf_r+0x220>
 80099c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099c4:	f7fd fa5e 	bl	8006e84 <__retarget_lock_release_recursive>
 80099c8:	89ab      	ldrh	r3, [r5, #12]
 80099ca:	065b      	lsls	r3, r3, #25
 80099cc:	f53f af12 	bmi.w	80097f4 <_vfiprintf_r+0x4c>
 80099d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099d2:	e711      	b.n	80097f8 <_vfiprintf_r+0x50>
 80099d4:	ab03      	add	r3, sp, #12
 80099d6:	9300      	str	r3, [sp, #0]
 80099d8:	462a      	mov	r2, r5
 80099da:	4630      	mov	r0, r6
 80099dc:	4b09      	ldr	r3, [pc, #36]	; (8009a04 <_vfiprintf_r+0x25c>)
 80099de:	a904      	add	r1, sp, #16
 80099e0:	f7fd fe36 	bl	8007650 <_printf_i>
 80099e4:	e7e4      	b.n	80099b0 <_vfiprintf_r+0x208>
 80099e6:	bf00      	nop
 80099e8:	08009dd8 	.word	0x08009dd8
 80099ec:	08009df8 	.word	0x08009df8
 80099f0:	08009db8 	.word	0x08009db8
 80099f4:	0800a03c 	.word	0x0800a03c
 80099f8:	0800a042 	.word	0x0800a042
 80099fc:	0800a046 	.word	0x0800a046
 8009a00:	08007119 	.word	0x08007119
 8009a04:	08009783 	.word	0x08009783

08009a08 <_read_r>:
 8009a08:	b538      	push	{r3, r4, r5, lr}
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	4608      	mov	r0, r1
 8009a0e:	4611      	mov	r1, r2
 8009a10:	2200      	movs	r2, #0
 8009a12:	4d05      	ldr	r5, [pc, #20]	; (8009a28 <_read_r+0x20>)
 8009a14:	602a      	str	r2, [r5, #0]
 8009a16:	461a      	mov	r2, r3
 8009a18:	f7f8 f96b 	bl	8001cf2 <_read>
 8009a1c:	1c43      	adds	r3, r0, #1
 8009a1e:	d102      	bne.n	8009a26 <_read_r+0x1e>
 8009a20:	682b      	ldr	r3, [r5, #0]
 8009a22:	b103      	cbz	r3, 8009a26 <_read_r+0x1e>
 8009a24:	6023      	str	r3, [r4, #0]
 8009a26:	bd38      	pop	{r3, r4, r5, pc}
 8009a28:	200013f4 	.word	0x200013f4

08009a2c <__assert_func>:
 8009a2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a2e:	4614      	mov	r4, r2
 8009a30:	461a      	mov	r2, r3
 8009a32:	4b09      	ldr	r3, [pc, #36]	; (8009a58 <__assert_func+0x2c>)
 8009a34:	4605      	mov	r5, r0
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	68d8      	ldr	r0, [r3, #12]
 8009a3a:	b14c      	cbz	r4, 8009a50 <__assert_func+0x24>
 8009a3c:	4b07      	ldr	r3, [pc, #28]	; (8009a5c <__assert_func+0x30>)
 8009a3e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a42:	9100      	str	r1, [sp, #0]
 8009a44:	462b      	mov	r3, r5
 8009a46:	4906      	ldr	r1, [pc, #24]	; (8009a60 <__assert_func+0x34>)
 8009a48:	f000 f80e 	bl	8009a68 <fiprintf>
 8009a4c:	f000 f8a8 	bl	8009ba0 <abort>
 8009a50:	4b04      	ldr	r3, [pc, #16]	; (8009a64 <__assert_func+0x38>)
 8009a52:	461c      	mov	r4, r3
 8009a54:	e7f3      	b.n	8009a3e <__assert_func+0x12>
 8009a56:	bf00      	nop
 8009a58:	20000018 	.word	0x20000018
 8009a5c:	0800a04d 	.word	0x0800a04d
 8009a60:	0800a05a 	.word	0x0800a05a
 8009a64:	0800a088 	.word	0x0800a088

08009a68 <fiprintf>:
 8009a68:	b40e      	push	{r1, r2, r3}
 8009a6a:	b503      	push	{r0, r1, lr}
 8009a6c:	4601      	mov	r1, r0
 8009a6e:	ab03      	add	r3, sp, #12
 8009a70:	4805      	ldr	r0, [pc, #20]	; (8009a88 <fiprintf+0x20>)
 8009a72:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a76:	6800      	ldr	r0, [r0, #0]
 8009a78:	9301      	str	r3, [sp, #4]
 8009a7a:	f7ff fe95 	bl	80097a8 <_vfiprintf_r>
 8009a7e:	b002      	add	sp, #8
 8009a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a84:	b003      	add	sp, #12
 8009a86:	4770      	bx	lr
 8009a88:	20000018 	.word	0x20000018

08009a8c <_fstat_r>:
 8009a8c:	b538      	push	{r3, r4, r5, lr}
 8009a8e:	2300      	movs	r3, #0
 8009a90:	4d06      	ldr	r5, [pc, #24]	; (8009aac <_fstat_r+0x20>)
 8009a92:	4604      	mov	r4, r0
 8009a94:	4608      	mov	r0, r1
 8009a96:	4611      	mov	r1, r2
 8009a98:	602b      	str	r3, [r5, #0]
 8009a9a:	f7f8 f96e 	bl	8001d7a <_fstat>
 8009a9e:	1c43      	adds	r3, r0, #1
 8009aa0:	d102      	bne.n	8009aa8 <_fstat_r+0x1c>
 8009aa2:	682b      	ldr	r3, [r5, #0]
 8009aa4:	b103      	cbz	r3, 8009aa8 <_fstat_r+0x1c>
 8009aa6:	6023      	str	r3, [r4, #0]
 8009aa8:	bd38      	pop	{r3, r4, r5, pc}
 8009aaa:	bf00      	nop
 8009aac:	200013f4 	.word	0x200013f4

08009ab0 <_isatty_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	4d05      	ldr	r5, [pc, #20]	; (8009acc <_isatty_r+0x1c>)
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	4608      	mov	r0, r1
 8009aba:	602b      	str	r3, [r5, #0]
 8009abc:	f7f8 f96c 	bl	8001d98 <_isatty>
 8009ac0:	1c43      	adds	r3, r0, #1
 8009ac2:	d102      	bne.n	8009aca <_isatty_r+0x1a>
 8009ac4:	682b      	ldr	r3, [r5, #0]
 8009ac6:	b103      	cbz	r3, 8009aca <_isatty_r+0x1a>
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	bd38      	pop	{r3, r4, r5, pc}
 8009acc:	200013f4 	.word	0x200013f4

08009ad0 <__ascii_mbtowc>:
 8009ad0:	b082      	sub	sp, #8
 8009ad2:	b901      	cbnz	r1, 8009ad6 <__ascii_mbtowc+0x6>
 8009ad4:	a901      	add	r1, sp, #4
 8009ad6:	b142      	cbz	r2, 8009aea <__ascii_mbtowc+0x1a>
 8009ad8:	b14b      	cbz	r3, 8009aee <__ascii_mbtowc+0x1e>
 8009ada:	7813      	ldrb	r3, [r2, #0]
 8009adc:	600b      	str	r3, [r1, #0]
 8009ade:	7812      	ldrb	r2, [r2, #0]
 8009ae0:	1e10      	subs	r0, r2, #0
 8009ae2:	bf18      	it	ne
 8009ae4:	2001      	movne	r0, #1
 8009ae6:	b002      	add	sp, #8
 8009ae8:	4770      	bx	lr
 8009aea:	4610      	mov	r0, r2
 8009aec:	e7fb      	b.n	8009ae6 <__ascii_mbtowc+0x16>
 8009aee:	f06f 0001 	mvn.w	r0, #1
 8009af2:	e7f8      	b.n	8009ae6 <__ascii_mbtowc+0x16>

08009af4 <memmove>:
 8009af4:	4288      	cmp	r0, r1
 8009af6:	b510      	push	{r4, lr}
 8009af8:	eb01 0402 	add.w	r4, r1, r2
 8009afc:	d902      	bls.n	8009b04 <memmove+0x10>
 8009afe:	4284      	cmp	r4, r0
 8009b00:	4623      	mov	r3, r4
 8009b02:	d807      	bhi.n	8009b14 <memmove+0x20>
 8009b04:	1e43      	subs	r3, r0, #1
 8009b06:	42a1      	cmp	r1, r4
 8009b08:	d008      	beq.n	8009b1c <memmove+0x28>
 8009b0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b12:	e7f8      	b.n	8009b06 <memmove+0x12>
 8009b14:	4601      	mov	r1, r0
 8009b16:	4402      	add	r2, r0
 8009b18:	428a      	cmp	r2, r1
 8009b1a:	d100      	bne.n	8009b1e <memmove+0x2a>
 8009b1c:	bd10      	pop	{r4, pc}
 8009b1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b26:	e7f7      	b.n	8009b18 <memmove+0x24>

08009b28 <_realloc_r>:
 8009b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b2c:	4680      	mov	r8, r0
 8009b2e:	4614      	mov	r4, r2
 8009b30:	460e      	mov	r6, r1
 8009b32:	b921      	cbnz	r1, 8009b3e <_realloc_r+0x16>
 8009b34:	4611      	mov	r1, r2
 8009b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b3a:	f7fd b9db 	b.w	8006ef4 <_malloc_r>
 8009b3e:	b92a      	cbnz	r2, 8009b4c <_realloc_r+0x24>
 8009b40:	f7ff fc66 	bl	8009410 <_free_r>
 8009b44:	4625      	mov	r5, r4
 8009b46:	4628      	mov	r0, r5
 8009b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b4c:	f000 f82f 	bl	8009bae <_malloc_usable_size_r>
 8009b50:	4284      	cmp	r4, r0
 8009b52:	4607      	mov	r7, r0
 8009b54:	d802      	bhi.n	8009b5c <_realloc_r+0x34>
 8009b56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b5a:	d812      	bhi.n	8009b82 <_realloc_r+0x5a>
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	4640      	mov	r0, r8
 8009b60:	f7fd f9c8 	bl	8006ef4 <_malloc_r>
 8009b64:	4605      	mov	r5, r0
 8009b66:	2800      	cmp	r0, #0
 8009b68:	d0ed      	beq.n	8009b46 <_realloc_r+0x1e>
 8009b6a:	42bc      	cmp	r4, r7
 8009b6c:	4622      	mov	r2, r4
 8009b6e:	4631      	mov	r1, r6
 8009b70:	bf28      	it	cs
 8009b72:	463a      	movcs	r2, r7
 8009b74:	f7fd f987 	bl	8006e86 <memcpy>
 8009b78:	4631      	mov	r1, r6
 8009b7a:	4640      	mov	r0, r8
 8009b7c:	f7ff fc48 	bl	8009410 <_free_r>
 8009b80:	e7e1      	b.n	8009b46 <_realloc_r+0x1e>
 8009b82:	4635      	mov	r5, r6
 8009b84:	e7df      	b.n	8009b46 <_realloc_r+0x1e>

08009b86 <__ascii_wctomb>:
 8009b86:	4603      	mov	r3, r0
 8009b88:	4608      	mov	r0, r1
 8009b8a:	b141      	cbz	r1, 8009b9e <__ascii_wctomb+0x18>
 8009b8c:	2aff      	cmp	r2, #255	; 0xff
 8009b8e:	d904      	bls.n	8009b9a <__ascii_wctomb+0x14>
 8009b90:	228a      	movs	r2, #138	; 0x8a
 8009b92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b96:	601a      	str	r2, [r3, #0]
 8009b98:	4770      	bx	lr
 8009b9a:	2001      	movs	r0, #1
 8009b9c:	700a      	strb	r2, [r1, #0]
 8009b9e:	4770      	bx	lr

08009ba0 <abort>:
 8009ba0:	2006      	movs	r0, #6
 8009ba2:	b508      	push	{r3, lr}
 8009ba4:	f000 f834 	bl	8009c10 <raise>
 8009ba8:	2001      	movs	r0, #1
 8009baa:	f7f8 f898 	bl	8001cde <_exit>

08009bae <_malloc_usable_size_r>:
 8009bae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bb2:	1f18      	subs	r0, r3, #4
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	bfbc      	itt	lt
 8009bb8:	580b      	ldrlt	r3, [r1, r0]
 8009bba:	18c0      	addlt	r0, r0, r3
 8009bbc:	4770      	bx	lr

08009bbe <_raise_r>:
 8009bbe:	291f      	cmp	r1, #31
 8009bc0:	b538      	push	{r3, r4, r5, lr}
 8009bc2:	4604      	mov	r4, r0
 8009bc4:	460d      	mov	r5, r1
 8009bc6:	d904      	bls.n	8009bd2 <_raise_r+0x14>
 8009bc8:	2316      	movs	r3, #22
 8009bca:	6003      	str	r3, [r0, #0]
 8009bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bd0:	bd38      	pop	{r3, r4, r5, pc}
 8009bd2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009bd4:	b112      	cbz	r2, 8009bdc <_raise_r+0x1e>
 8009bd6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009bda:	b94b      	cbnz	r3, 8009bf0 <_raise_r+0x32>
 8009bdc:	4620      	mov	r0, r4
 8009bde:	f000 f831 	bl	8009c44 <_getpid_r>
 8009be2:	462a      	mov	r2, r5
 8009be4:	4601      	mov	r1, r0
 8009be6:	4620      	mov	r0, r4
 8009be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bec:	f000 b818 	b.w	8009c20 <_kill_r>
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d00a      	beq.n	8009c0a <_raise_r+0x4c>
 8009bf4:	1c59      	adds	r1, r3, #1
 8009bf6:	d103      	bne.n	8009c00 <_raise_r+0x42>
 8009bf8:	2316      	movs	r3, #22
 8009bfa:	6003      	str	r3, [r0, #0]
 8009bfc:	2001      	movs	r0, #1
 8009bfe:	e7e7      	b.n	8009bd0 <_raise_r+0x12>
 8009c00:	2400      	movs	r4, #0
 8009c02:	4628      	mov	r0, r5
 8009c04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c08:	4798      	blx	r3
 8009c0a:	2000      	movs	r0, #0
 8009c0c:	e7e0      	b.n	8009bd0 <_raise_r+0x12>
	...

08009c10 <raise>:
 8009c10:	4b02      	ldr	r3, [pc, #8]	; (8009c1c <raise+0xc>)
 8009c12:	4601      	mov	r1, r0
 8009c14:	6818      	ldr	r0, [r3, #0]
 8009c16:	f7ff bfd2 	b.w	8009bbe <_raise_r>
 8009c1a:	bf00      	nop
 8009c1c:	20000018 	.word	0x20000018

08009c20 <_kill_r>:
 8009c20:	b538      	push	{r3, r4, r5, lr}
 8009c22:	2300      	movs	r3, #0
 8009c24:	4d06      	ldr	r5, [pc, #24]	; (8009c40 <_kill_r+0x20>)
 8009c26:	4604      	mov	r4, r0
 8009c28:	4608      	mov	r0, r1
 8009c2a:	4611      	mov	r1, r2
 8009c2c:	602b      	str	r3, [r5, #0]
 8009c2e:	f7f8 f846 	bl	8001cbe <_kill>
 8009c32:	1c43      	adds	r3, r0, #1
 8009c34:	d102      	bne.n	8009c3c <_kill_r+0x1c>
 8009c36:	682b      	ldr	r3, [r5, #0]
 8009c38:	b103      	cbz	r3, 8009c3c <_kill_r+0x1c>
 8009c3a:	6023      	str	r3, [r4, #0]
 8009c3c:	bd38      	pop	{r3, r4, r5, pc}
 8009c3e:	bf00      	nop
 8009c40:	200013f4 	.word	0x200013f4

08009c44 <_getpid_r>:
 8009c44:	f7f8 b834 	b.w	8001cb0 <_getpid>

08009c48 <_init>:
 8009c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4a:	bf00      	nop
 8009c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c4e:	bc08      	pop	{r3}
 8009c50:	469e      	mov	lr, r3
 8009c52:	4770      	bx	lr

08009c54 <_fini>:
 8009c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c56:	bf00      	nop
 8009c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c5a:	bc08      	pop	{r3}
 8009c5c:	469e      	mov	lr, r3
 8009c5e:	4770      	bx	lr
